#include "../graph.h"
#include "utils.h"
#include <iostream>
#include <random>
#include <string>

int main() {
  int seed = 0;

  std::vector<int> vertices(5);
  std::iota(vertices.begin(), vertices.end(), 0);
  std::shuffle(vertices.begin(), vertices.end(),
               std::default_random_engine(seed));
  for (int v : vertices) {
    std::cout << v << ' ';
  }
  std::cout << std::endl;

  std::mt19937 gen(seed);
  std::uniform_real_distribution<> dis(0.0, 1.0);
  for (int n = 0; n < 10; ++n) {
    // Use dis to transform the random unsigned int generated by gen into a
    // double in [0, 1). Each call to dis(gen) generates a new random double
    std::cout << dis(gen) << ' ';
  }
  std::cout << std::endl;

  Graph graph("graphs/simple.mtx");
  Graph c_graph;
  graph.doDegreeBasedMatching(&c_graph);

  assert(graph.getAggregates() ==
         std::vector<std::vector<int>>({{1, 2, 3}, {0, 4}}));
  auto A = c_graph.getAdjacencyMat();
  assertArraysEqual(A->IA, std::vector<int>({0, 1, 2}));
  assertArraysEqual(A->JA, std::vector<int>({1, 0}));
  assertArraysEqual(A->val, std::vector<int>({1, 1}));
}
