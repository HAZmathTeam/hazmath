C====================================================================
      subroutine scpro(u,v,scpr,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n),v(n)
C--------------------------------------------------------------------
C...  INNER PRODUCT
C--------------------------------------------------------------------
cc      scpr = ddot_kz(n,u,1,v,1)
      scpr = 0.0d00
      do i = 1 , n
         scpr = scpr + u(i)*v(i)
      end do
C
      return
      end
C====================================================================
      subroutine uuminv(u,v,n)
C====================================================================
      implicit real*8(a-h,o-z)
C--------------------------------------------------------------------
C...  U <--- U - V
C--------------------------------------------------------------------
      dimension u(n),v(n)
      do i = 1 , n
         u(i) = u(i) - v(i)
      end do
      return
      end
C====================================================================
      subroutine vuminv(u,v,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n),v(n)
C--------------------------------------------------------------------
C...  V <--- U - V
C--------------------------------------------------------------------
      do i = 1 , n
         v(i) = u(i) - v(i)
      end do
      return
      end
C====================================================================
      subroutine uupluv(u,v,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n),v(n)
C--------------------------------------------------------------------
C...  U <--- U + V
C--------------------------------------------------------------------
      do i = 1 , n
         u(i) = u(i) + v(i)
      end do
      return
      end
C====================================================================
      subroutine uuplmv(u,v,n,smult)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n),v(n)
C--------------------------------------------------------------------
C...  U <--- U + SMULT*V
C--------------------------------------------------------------------
      do i = 1 , n
         u(i) = u(i) + v(i)*smult
      end do
      return
      end
C====================================================================
      subroutine umuplv(u,v,n,smult)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n),v(n)
C--------------------------------------------------------------------
C...  U <--- SMULT*U  + V
C--------------------------------------------------------------------
      do i = 1 , n
         u(i) = smult*u(i) + v(i)
      end do
      return
      end
C====================================================================
      subroutine usmultv(u,v,n,smult)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n),v(n)
C--------------------------------------------------------------------
C...  U <--- SMULT*V
C--------------------------------------------------------------------
      do i = 1 , n
         u(i) = v(i)*smult
      end do
      return
      end
C====================================================================
      subroutine usmultu(u,n,smult)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n)
C--------------------------------------------------------------------
C...  U <--- SMULT*U  
C--------------------------------------------------------------------
      do i = 1 , n
         u(i) = smult*u(i)
      end do
      return
      end
C====================================================================
      subroutine wuminv(w,u,v,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n),v(n),w(n)
C--------------------------------------------------------------------
C...  W <--- U - V
C--------------------------------------------------------------------
      do i = 1 , n
         w(i) = u(i) - v(i)
      end do
      return
      end
C====================================================================
      subroutine wupluv(w,u,v,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n),v(n),w(n)
C--------------------------------------------------------------------
C...  W <--- U + V
C--------------------------------------------------------------------
      do i = 1 , n
         w(i) = u(i) + v(i)
      end do
      return
      end
C====================================================================
      subroutine wuplmv(w,u,v,n,smult)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n),v(n),w(n)
C--------------------------------------------------------------------
C...  W <--- U + SMULT*V
C--------------------------------------------------------------------
      do i = 1 , n
         w(i) = u(i) + v(i)*smult
      end do
      return
      end
C====================================================================
      subroutine l2norm(u,l2nr,n,h)
C====================================================================
      implicit real*8(a-h,l,o-z)
      dimension u(n)
C--------------------------------------------------------------------
C...  ||U||_{0} (FOR TWO DIMENSIONS)
C--------------------------------------------------------------------
      call scpro(u,u,l2nr,n)
      l2nr = dsqrt(l2nr)*h
      return
      end
C====================================================================
      subroutine c0norm(u,c0nr,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n)
C--------------------------------------------------------------------
C...  ||U||_{\infty}
C--------------------------------------------------------------------
      c0nr = -1.d00
      do i = 1 , n
         c0nr = dmax1(c0nr,dabs(u(i)))
      end do   
      return
      end
C====================================================================
      subroutine c0norm_number(u,c0nr,n,i1)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n)
C--------------------------------------------------------------------
C...  ||U||_{\infty}
C--------------------------------------------------------------------
      c0nr = -1.d00
      i1 = 0
      do i = 1 , n
         if(c0nr .lt. dabs(u(i))) then
            c0nr = dabs(u(i))
            i1 = i
         end if
      end do   
      return
      end
C====================================================================
      subroutine copyv(u,v,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n),v(n)
C--------------------------------------------------------------------
C...  V <--- U 
C--------------------------------------------------------------------
      do i = 1 , n
         v(i) = u(i)
      end do
      return
      end
C====================================================================
      subroutine icopyv(iu,iv,n)
C====================================================================
      dimension iu(n),iv(n)
C--------------------------------------------------------------------
C...  IV <--- IU
C--------------------------------------------------------------------
      do i = 1 , n
         iv(i) = iu(i)
      end do
      return
      end
C====================================================================
      subroutine nullv(u,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n)
C--------------------------------------------------------------------
C...  U = 0.
C--------------------------------------------------------------------
      do i = 1 , n
         u(i) = 0.0d00
      end do
      return
      end
C====================================================================
      subroutine onesv(u,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n)
C--------------------------------------------------------------------
C...  U = [1,1,...,1]
C--------------------------------------------------------------------
      do i = 1 , n
         u(i) = 1.0d00
      end do
      return
      end
C====================================================================
      subroutine inullv(iu,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension iu(n)
C--------------------------------------------------------------------
C...  IU = 0
C--------------------------------------------------------------------
      do i = 1 , n
         iu(i) = 0
      end do
      return
      end
C====================================================================
      subroutine ionev(iu,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension iu(n)
C--------------------------------------------------------------------
C...  IU = [1,1,...,1]
C--------------------------------------------------------------------
      do i = 1 , n
         iu(i) = 1
      end do
      return
      end
C====================================================================
      subroutine innv(iu,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension iu(n)
C--------------------------------------------------------------------
C...  IU = [N,N,...,N]
C--------------------------------------------------------------------
      do i = 1 , n
         iu(i) = n
      end do
      return
      end
C====================================================================
      subroutine dbnv(u,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n)
C--------------------------------------------------------------------
C...  U = [N,N,...,N]
C--------------------------------------------------------------------
      do i = 1 , n
         u(i) = dble(n)
      end do
      return
      end
C====================================================================
      subroutine iseqv(iu,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension iu(n)
C--------------------------------------------------------------------
C...  IU = [1,2,...,N]
C--------------------------------------------------------------------
      do i = 1 , n
         iu(i) = i
      end do
      return
      end
C====================================================================
      subroutine iseqrv(iu,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension iu(n)
C--------------------------------------------------------------------
C...  IU = [N,N-1,...,1]
C--------------------------------------------------------------------
      n1 = n - 1
      do i = 0, n1
         iu(i) = n - i
      end do
      return
      end
C====================================================================
      subroutine seqv(u,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n)
C--------------------------------------------------------------------
C...  U = [1,2,...,N]
C--------------------------------------------------------------------
      do i = 1 , n
         u(i) = dble(i)
      end do
      return
      end
C====================================================================
      subroutine seqrv(u,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n)
C--------------------------------------------------------------------
C...  U = [N,N-1,...,1]
C--------------------------------------------------------------------
      n1 = n - 1
      do i = 0, n1
         u(i) = dble(n - i)
      end do
      return
      end
C=====================================================================
      subroutine ireverse(iu,n)
C====================================================================
      implicit real*8(a-h,o-z)
      integer iu(1),n,k,iu0
C--------------------------------------------------------------------
C...  Reverse the numbering of the vector IU.
C--------------------------------------------------------------------
      do k =  1 , n/2
         iu0 =  iu(n-k+1)
         iu(n-k+1) = iu(k)
         iu(k) = iu0
      end do
      return
      end
C====================================================================
      subroutine reverse(u,n)
C====================================================================
      implicit real*8(a-h,o-z)
      integer n,k
      dimension u(n)
C--------------------------------------------------------------------
C...  Reverse the numbering of the vector U.
C--------------------------------------------------------------------
      do k =  1 , n/2
         u0 =  u(n-k+1)
         u(n-k+1) = u(k)
         u(k) = u0
      end do
      return
      end
C====================================================================
      real*8 function ddot_kz(n,dx,incx,dy,incy)
C=====================================================================
      implicit real*8(a-h,o-z)
      dimension dx(1),dy(1)
      integer i,incx,incy,ix,iy,m,mp1,n
C---------------------------------------------------------------------
C...  Forms the dot product of two vectors.
C...  Uses unrolled loops for increments equal to one.
C---------------------------------------------------------------------
      ddot_kz = 0.0d0
      dtemp = 0.0d0
      if(n.le.0) return
      if(incx.eq.1.and.incy.eq.1) go to 20
C
C...  Code for unequal increments or equal increments not equal to 1.
C
      ix = 1
      iy = 1
      if(incx.lt.0) ix = (-n+1)*incx + 1
      if(incy.lt.0) iy = (-n+1)*incy + 1
      do 10 i = 1,n
         dtemp = dtemp + dx(ix)*dy(iy)
         ix = ix + incx
         iy = iy + incy
 10   continue
      ddot_kz = dtemp
      return
C
C...  Code for both increments equal to 1. Clean-up loop
C
 20   m = mod(n,5)
      if(m .eq. 0) go to 40
      do 30 i = 1,m
         dtemp = dtemp + dx(i)*dy(i)
 30   continue
      if(n .lt. 5) go to 60
 40   mp1 = m + 1
      do 50 i = mp1,n,5
         dtemp = dtemp + dx(i)*dy(i) + dx(i+1)*dy(i+1)
     >         + dx(i+2)*dy(i+2) + dx(i+3)*dy(i+3) + dx(i+4)*dy(i+4)
 50   continue
 60   ddot_kz = dtemp
C
      return
      end
C=====================================================================
      subroutine interp_func(funct0,u,n,x,y)
C=====================================================================
      implicit real*8 (a-h,o-z)
      dimension u(1),x(1),y(1)
      external funct0
C---------------------------------------------------------------------
C...  The linear interpolation of the given function FUNCT0.
C---------------------------------------------------------------------
      do k = 1 , n
         u(k) = funct0(x(k),y(k))
      end do
      return
      end
C====================================================================
      subroutine wumultv(w,u,v,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension w(n),u(n),v(n)
C--------------------------------------------------------------------
C...  Vector PRODUCT componentwise. w = u:v
C--------------------------------------------------------------------
      do i = 1 , n
         w(i) = u(i)*v(i)
      end do
C
      return
      end
C====================================================================
      subroutine uumultv(u,v,n)
C====================================================================
      implicit real*8(a-h,o-z)
      dimension u(n),v(n)
C--------------------------------------------------------------------
C...  Vector PRODUCT componentwise. u = u:v
C--------------------------------------------------------------------
      do i = 1 , n
         u(i) = u(i)*v(i)
      end do
C
      return
      end
C=====================================================================
      integer*4 function nomxy(i,j,nx,ny)
C======================================================================
      implicit none
      integer*4 i,j,nx,ny
C--------------------------------------------------------------------
C...  NOMXY gives the global number of the node (i,j) in an NX x NY
C...  structured grid. Note that global numbers are enumerated 
C...  y-direction first from bottom to top and increased in 
C...  x-direction from left to right.
C--------------------------------------------------------------------
      if(i .lt. 1 .or. j .lt. 1 .or. 
     >     i .gt. nx .or. j .gt. ny  ) then
         nomxy = 0
      else
cc       nomxy = (j-1)*nx + i
         nomxy = (i-1)*ny + j
      end if
C
      RETURN
      END
C=====================================================================
      subroutine nomxy_inv(i,j,n,ny)
C======================================================================
      implicit none
      integer*4 i,j,n,ny
C--------------------------------------------------------------------
C...  NOMXY_INV gives the node (i,j) for the global number n in an
C...  NX x NY structured grid. Note that global numbers are enumerated
C...  y-direction first from bottom to top and increased in x-direction
C...  from left to right.
C--------------------------------------------------------------------
      j = mod(n,ny)
      if (j .eq. 0) then
         j = ny
         i = n/ny
      else
         i = n/ny + 1
      end if
C
      RETURN
      END
C======================================================================
