%----------------------------------------------%
% input parameters: for grid generation        %
%----------------------------------------------%
title{Square grid, or any other more or less descriptive title}
%
dimension{2}   % spatial dimension in which the grid has to be generated
%
print_level{1}	% how much information to print out: 0 Nothing | >0 Something

%---------------%
% files: output is in dir_grid/** where ** is nD for spatial dimension n.
%  	 the dir_grid/1D, dir_grid/2D ... should exist as
% 	 directories writeable by the user
% vtu files for plotting follow the same convention.
%---------------%

dir_grid{grids/}
dir_vtu{grids/}
%file_grid{unitLINE_n17.haz}
file_grid{unitSQ_n17.haz}
%file_grid{unitCUBE_n17.haz}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
dir_vtu{grids_vtu/}
%file_vtu{unitLINE_n17.vtu}
file_vtu{unitSQ_n17.vtu}
%file_vtu{unitCUBE_n17.vtu}

%---------------%
% coordinate systems: Each has coordinates of the origin o[0:dim-1]
%                     type (0=cartesian, 1=polar)
%
%---------------%

num_coordsystems{3} % number of coordinate systems

%% data for the coord systems: coord-system label, coords of the
%% origin, type. the labels should be integers, consequtive and start
%% from 0 the values of the above quantities are given as space tab
%% separated values

data_coordsystems{0 0. 0.  0
		  1 0. 0.  1
		  2 -1. -1.  1}
%---------------%
% graph which describes the domain. The input are
% vertices and edges. The graph has to be a union of polygons,
% of polyhedrons that are isomorphic to an n-dimensional cube.
%---------------%

num_vertices{4} %number of vertices

%---------------%
%coords (see way below): for every node 1:numvertices give coords (dim
% coords per node) the vertices should be ordered so that the
% macroelement (polyhedron) is mapped to the unit cube without
% "twisting". This can be done by consistently labeling all faces. In
% dimension d, if the vertices are numbered from 0 to (2^d-1) each
% face corresponds to fixing exactly one bit in the binary
% representation of the vertex label.

%  For example in 3D we have [000:111] as vertex labels, i.e. [0:7]
% (this has nothing to do with coordinates) and the faces are:
% (000,001,010,011)= fixing the first bit to be 0; and
% (011,010,110,111)= fixing the second bit to be 1; and so on. The
% ordering of the labels in the faces follows the same convention. In
% the example we gave, the face for which the second bit is fixed is
% numbered incorrectly, it should be (010,011,110,111).

% If two points on an edge are in the same coordinate system,
% then all points on this edge are in polar coordinate system.
% if two points on an edge are in in different coordinate systems,
% then the points on the edge are on a straight
%% line connecting the two vertices.
%---------------%

%data_vertices{-1.   -1.   0 0	%% coords, coord_system.
%	       2.    0.   2 1   %% for a polar system:
%	       2.   90.   2 1   %% angles are in degrees.
%	       2.   45.   2 1}


data_vertices{-1.   -1.   0 1	%% coords, coord_system, bcode
	       1.   -1.   0 1
	       -1.   1.   0 1
	       1.   1.   0 1}

%---------------%
% edges and number of divisions for every edge.
% opposite edges have the same number of divisions. if they do not,
% then the max number of divisions is taken.
%---------------%

num_edges{4} %

data_edges{0 1	31 %% edge: 1st vertex, 2nd vertex, number of divisions.
           1 3 		41
           0 2 		41
  	   2 3     	31	      }

%% number of refinements:
%% refinement type: