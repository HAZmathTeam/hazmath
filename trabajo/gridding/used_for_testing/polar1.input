%----------------------------------------------%
% input parameters: for grid generation        %
%----------------------------------------------%
title{Cube into cube}
%
dimension{3}   % spatial dimension in which the grid has to be generated
%
print_level{0}	% how much information to print out: 0 Nothing | >0 Something

refinement_type{-1}

%---------------%
% files: output is in dir_grid/** where ** is nD for spatial dimension n.
%  	 the dir_grid/1D, dir_grid/2D ... should exist as
% 	 directories writeable by the user
% vtu files for plotting follow the same convention.
%---------------%

dir_grid{./}
dir_vtu{./}
file_grid{mesh3d.haz}
file_vtu{mesh3d.vtu}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%---------------%
% coordinate systems: Each has coordinates of the origin o[0:dim-1]
%                     type (0=cartesian, 1=polar)
%
%---------------%

num_coordsystems{3} % number of coordinate systems

%% data for the coord systems: coord-system label, coords of the
%% origin, type. the labels should be integers, consequtive and start
%% from 0 the values of the above quantities are given as space tab
%% separated values

data_coordsystems{0 0 0. 0.  0.
		  1 1 0. 0. 0.
		  2 1 -1. -1. 0.}
%---------------%
% graph which describes the domain. The input are
% vertices and edges. The graph has to be a union of polygons,
% of polyhedrons that are isomorphic to an n-dimensional cube.
%---------------%

num_vertices{16} %number of vertices
%%% coords, type, origin for polar system: angles are in degrees
data_vertices{
 %%%^^^ 0 0  -0.50000  -0.50000  -0.70711
 %%%^^^ 1 0  -0.50000  -0.50000   0.70711
 %%%^^^ 2 0  -0.50000   0.50000  -0.70711
 %%%^^^ 3 0  -0.50000   0.50000   0.70711
 %%%^^^ 4 0   0.50000  -0.50000  -0.70711
 %%%^^^ 5 0   0.50000  -0.50000   0.70711
 %%%^^^ 6 0   0.50000   0.50000  -0.70711
 %%%^^^ 7 0   0.50000   0.50000   0.70711

 %%%^^^ 8  0  -1.00000  -1.00000  -1.41421
 %%%^^^ 9  0  -1.00000  -1.00000   1.41421
 %%%^^^ 10 0 -1.00000   1.00000  -1.41421
 %%%^^^ 11 0 -1.00000   1.00000   1.41421
 %%%^^^ 12 0  1.00000  -1.00000  -1.41421
 %%%^^^ 13 0  1.00000  -1.00000   1.41421
 %%%^^^ 14 0  1.00000   1.00000  -1.41421
 %%%^^^ 15 0  1.00000   1.00000   1.41421

 	        0 1 1. 135.  225. 
	        1 1 1.  45.  225.   
 	        2 1 1. 135.  135.
 	        3 1 1. 45.   135. 
 	        4 1 1. 135.  315. 
 	        5 1 1. 45.   315.   
 	        6 1 1. 135.  45.
 	        7 1 1. 45.   45. 

	        8 1 2. 135.  225. 
 	        9 1 2.  45.  225.   
 	       10 1 2. 135.  135.
 	       11 1 2. 45.   135. 
 	       12 1 2. 135.  315. 
 	       13 1 2. 45.   315.   
 	       14 1 2. 135.  45.
 	       15 1 2. 45.   45.  
	       	 }


num_edges{8} %

%% edge: 1st vertex, 2nd vertex, number of divisions.
data_edges{0 1  3
           0 2  3
           0 4  3
           8 9  3
           8 10 3
	   12 13 3
	   3 11 3
	   15 11 3
	   }

%%% ====================MACROELEMENTS=========================
num_macroelements{6}
%%% NUMBERING OF VERTICES DESCRIBING A MACROELEMENT: Check the README.
%%% macroelement number, vertices forming the macroelement, macroelement code.

data_macroelements{
	8   9  10  11  0 1 2 3 -1 
 	9 11 13 15 1 3 5 7  -6
 	4 5 6 7 12 13  14  15 -3
 	10 11 14  15  2 3 6 7 -4
	8 9 12 13 0 1 4 5 -2
 	8 10  12 14 0 2 4 6 -5
}

num_macrofaces{1}

% any face which needs a code (for example boundary faces: face
% number. If a face is not included here and is a boundary face then
% its code is set to Dirichlet (i.e. 1...16). Internal faces not found
% here have a code 0. Faces given here and not found in the
% macroelement list are ignored.

data_macrofaces{0 1 2 3 -1
		   }

%%%%%%%%%%%%%%AMR %%%%%%%%%%%%%%%%%%%%%%%%%%%%
num_refinements{0}

err_stop_refinement{        -1.e-10        }
