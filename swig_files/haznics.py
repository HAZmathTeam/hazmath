# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _haznics
else:
    import _haznics

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PI = _haznics.PI
EXP_OF_1 = _haznics.EXP_OF_1
MAX_CHARS_INPUT_GRID_FILE = _haznics.MAX_CHARS_INPUT_GRID_FILE
BIGREAL = _haznics.BIGREAL
SMALLREAL = _haznics.SMALLREAL
SMALLREAL2 = _haznics.SMALLREAL2
MAX_REFINE_LVL = _haznics.MAX_REFINE_LVL
MAX_AMG_LVL = _haznics.MAX_AMG_LVL
MIN_CDOF = _haznics.MIN_CDOF
MIN_CRATE = _haznics.MIN_CRATE
MAX_CRATE = _haznics.MAX_CRATE
STAG_RATIO = _haznics.STAG_RATIO
MAX_STAG = _haznics.MAX_STAG
MAX_RESTART = _haznics.MAX_RESTART
SUCCESS = _haznics.SUCCESS
ERROR_DIM = _haznics.ERROR_DIM
ERROR_FE_TYPE = _haznics.ERROR_FE_TYPE
ERROR_QUAD_TYPE = _haznics.ERROR_QUAD_TYPE
ERROR_QUAD_DIM = _haznics.ERROR_QUAD_DIM
ERROR_MAT_DOF = _haznics.ERROR_MAT_DOF
ERROR_TS_TYPE = _haznics.ERROR_TS_TYPE
ERROR_OPEN_FILE = _haznics.ERROR_OPEN_FILE
ERROR_WRONG_FILE = _haznics.ERROR_WRONG_FILE
ERROR_INPUT_PAR = _haznics.ERROR_INPUT_PAR
ERROR_MAT_SIZE = _haznics.ERROR_MAT_SIZE
ERROR_BLKMAT_ZERO = _haznics.ERROR_BLKMAT_ZERO
ERROR_NUM_BLOCKS = _haznics.ERROR_NUM_BLOCKS
ERROR_MISC = _haznics.ERROR_MISC
ERROR_ALLOC_MEM = _haznics.ERROR_ALLOC_MEM
ERROR_DATA_STRUCTURE = _haznics.ERROR_DATA_STRUCTURE
ERROR_DATA_ZERODIAG = _haznics.ERROR_DATA_ZERODIAG
ERROR_DUMMY_VAR = _haznics.ERROR_DUMMY_VAR
ERROR_AMG_SMOOTH_TYPE = _haznics.ERROR_AMG_SMOOTH_TYPE
ERROR_AMG_AGG_TYPE = _haznics.ERROR_AMG_AGG_TYPE
ERROR_AMG_COARSEING = _haznics.ERROR_AMG_COARSEING
ERROR_SOLVER_TYPE = _haznics.ERROR_SOLVER_TYPE
ERROR_SOLVER_PRECTYPE = _haznics.ERROR_SOLVER_PRECTYPE
ERROR_SOLVER_STAG = _haznics.ERROR_SOLVER_STAG
ERROR_SOLVER_SOLSTAG = _haznics.ERROR_SOLVER_SOLSTAG
ERROR_SOLVER_TOLSMALL = _haznics.ERROR_SOLVER_TOLSMALL
ERROR_SOLVER_MISC = _haznics.ERROR_SOLVER_MISC
ERROR_SOLVER_MAXIT = _haznics.ERROR_SOLVER_MAXIT
ERROR_SOLVER_EXIT = _haznics.ERROR_SOLVER_EXIT
ERROR_LIC_TYPE = _haznics.ERROR_LIC_TYPE
ERROR_UNKNOWN = _haznics.ERROR_UNKNOWN
TRUE = _haznics.TRUE
FALSE = _haznics.FALSE
ON = _haznics.ON
OFF = _haznics.OFF
PRINT_NONE = _haznics.PRINT_NONE
PRINT_MIN = _haznics.PRINT_MIN
PRINT_SOME = _haznics.PRINT_SOME
PRINT_MORE = _haznics.PRINT_MORE
PRINT_MOST = _haznics.PRINT_MOST
PRINT_ALL = _haznics.PRINT_ALL
NONLINEAR_NEWTON = _haznics.NONLINEAR_NEWTON
NONLINEAR_PICARD = _haznics.NONLINEAR_PICARD
SOLVER_DEFAULT = _haznics.SOLVER_DEFAULT
SOLVER_CG = _haznics.SOLVER_CG
SOLVER_MinRes = _haznics.SOLVER_MinRes
SOLVER_VGMRES = _haznics.SOLVER_VGMRES
SOLVER_VFGMRES = _haznics.SOLVER_VFGMRES
SOLVER_GCG = _haznics.SOLVER_GCG
SOLVER_GCR = _haznics.SOLVER_GCR
SOLVER_AMG = _haznics.SOLVER_AMG
SOLVER_UMFPACK = _haznics.SOLVER_UMFPACK
STOP_REL_RES = _haznics.STOP_REL_RES
STOP_REL_PRECRES = _haznics.STOP_REL_PRECRES
STOP_MOD_REL_RES = _haznics.STOP_MOD_REL_RES
PREC_NULL = _haznics.PREC_NULL
PREC_DIAG = _haznics.PREC_DIAG
PREC_AMG = _haznics.PREC_AMG
PREC_HX_CURL_A = _haznics.PREC_HX_CURL_A
PREC_HX_CURL_M = _haznics.PREC_HX_CURL_M
PREC_HX_DIV_A = _haznics.PREC_HX_DIV_A
PREC_HX_DIV_M = _haznics.PREC_HX_DIV_M
UA_AMG = _haznics.UA_AMG
SA_AMG = _haznics.SA_AMG
VMB = _haznics.VMB
MIS = _haznics.MIS
MWM = _haznics.MWM
HEC = _haznics.HEC
V_CYCLE = _haznics.V_CYCLE
W_CYCLE = _haznics.W_CYCLE
AMLI_CYCLE = _haznics.AMLI_CYCLE
NL_AMLI_CYCLE = _haznics.NL_AMLI_CYCLE
ADD_CYCLE = _haznics.ADD_CYCLE
SCHWARZ_FORWARD = _haznics.SCHWARZ_FORWARD
SCHWARZ_BACKWARD = _haznics.SCHWARZ_BACKWARD
SCHWARZ_SYMMETRIC = _haznics.SCHWARZ_SYMMETRIC
SMOOTHER_JACOBI = _haznics.SMOOTHER_JACOBI
SMOOTHER_GS = _haznics.SMOOTHER_GS
SMOOTHER_SGS = _haznics.SMOOTHER_SGS
SMOOTHER_CG = _haznics.SMOOTHER_CG
SMOOTHER_SOR = _haznics.SMOOTHER_SOR
SMOOTHER_SSOR = _haznics.SMOOTHER_SSOR
SMOOTHER_GSOR = _haznics.SMOOTHER_GSOR
SMOOTHER_SGSOR = _haznics.SMOOTHER_SGSOR
SMOOTHER_POLY = _haznics.SMOOTHER_POLY
SMOOTHER_L1DIAG = _haznics.SMOOTHER_L1DIAG
SMOOTHER_FJACOBI = _haznics.SMOOTHER_FJACOBI
SMOOTHER_FGS = _haznics.SMOOTHER_FGS
SMOOTHER_FSGS = _haznics.SMOOTHER_FSGS
SMOOTHER_USERDEF = _haznics.SMOOTHER_USERDEF
UNPT = _haznics.UNPT
USERDEFINED = _haznics.USERDEFINED
ASCEND = _haznics.ASCEND
DESCEND = _haznics.DESCEND
ONENORM = _haznics.ONENORM
TWONORM = _haznics.TWONORM
class coordinates(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_haznics.coordinates_x_get, _haznics.coordinates_x_set)
    y = property(_haznics.coordinates_y_get, _haznics.coordinates_y_set)
    z = property(_haznics.coordinates_z_get, _haznics.coordinates_z_set)
    n = property(_haznics.coordinates_n_get, _haznics.coordinates_n_set)

    def __init__(self):
        _haznics.coordinates_swiginit(self, _haznics.new_coordinates())
    __swig_destroy__ = _haznics.delete_coordinates

# Register coordinates in _haznics:
_haznics.coordinates_swigregister(coordinates)

class mesh_struct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dim = property(_haznics.mesh_struct_dim_get, _haznics.mesh_struct_dim_set)
    nelm = property(_haznics.mesh_struct_nelm_get, _haznics.mesh_struct_nelm_set)
    nv = property(_haznics.mesh_struct_nv_get, _haznics.mesh_struct_nv_set)
    v_per_elm = property(_haznics.mesh_struct_v_per_elm_get, _haznics.mesh_struct_v_per_elm_set)
    nedge = property(_haznics.mesh_struct_nedge_get, _haznics.mesh_struct_nedge_set)
    ed_per_elm = property(_haznics.mesh_struct_ed_per_elm_get, _haznics.mesh_struct_ed_per_elm_set)
    nface = property(_haznics.mesh_struct_nface_get, _haznics.mesh_struct_nface_set)
    f_per_elm = property(_haznics.mesh_struct_f_per_elm_get, _haznics.mesh_struct_f_per_elm_set)
    nconn_reg = property(_haznics.mesh_struct_nconn_reg_get, _haznics.mesh_struct_nconn_reg_set)
    nconn_bdry = property(_haznics.mesh_struct_nconn_bdry_get, _haznics.mesh_struct_nconn_bdry_set)
    v_component = property(_haznics.mesh_struct_v_component_get, _haznics.mesh_struct_v_component_set)
    cv = property(_haznics.mesh_struct_cv_get, _haznics.mesh_struct_cv_set)
    nbv = property(_haznics.mesh_struct_nbv_get, _haznics.mesh_struct_nbv_set)
    nbedge = property(_haznics.mesh_struct_nbedge_get, _haznics.mesh_struct_nbedge_set)
    nbface = property(_haznics.mesh_struct_nbface_get, _haznics.mesh_struct_nbface_set)
    el_v = property(_haznics.mesh_struct_el_v_get, _haznics.mesh_struct_el_v_set)
    el_ed = property(_haznics.mesh_struct_el_ed_get, _haznics.mesh_struct_el_ed_set)
    el_f = property(_haznics.mesh_struct_el_f_get, _haznics.mesh_struct_el_f_set)
    ed_v = property(_haznics.mesh_struct_ed_v_get, _haznics.mesh_struct_ed_v_set)
    f_v = property(_haznics.mesh_struct_f_v_get, _haznics.mesh_struct_f_v_set)
    f_ed = property(_haznics.mesh_struct_f_ed_get, _haznics.mesh_struct_f_ed_set)
    el_vol = property(_haznics.mesh_struct_el_vol_get, _haznics.mesh_struct_el_vol_set)
    el_mid = property(_haznics.mesh_struct_el_mid_get, _haznics.mesh_struct_el_mid_set)
    ed_len = property(_haznics.mesh_struct_ed_len_get, _haznics.mesh_struct_ed_len_set)
    ed_tau = property(_haznics.mesh_struct_ed_tau_get, _haznics.mesh_struct_ed_tau_set)
    ed_mid = property(_haznics.mesh_struct_ed_mid_get, _haznics.mesh_struct_ed_mid_set)
    f_area = property(_haznics.mesh_struct_f_area_get, _haznics.mesh_struct_f_area_set)
    f_norm = property(_haznics.mesh_struct_f_norm_get, _haznics.mesh_struct_f_norm_set)
    f_mid = property(_haznics.mesh_struct_f_mid_get, _haznics.mesh_struct_f_mid_set)
    v_flag = property(_haznics.mesh_struct_v_flag_get, _haznics.mesh_struct_v_flag_set)
    ed_flag = property(_haznics.mesh_struct_ed_flag_get, _haznics.mesh_struct_ed_flag_set)
    f_flag = property(_haznics.mesh_struct_f_flag_get, _haznics.mesh_struct_f_flag_set)
    el_flag = property(_haznics.mesh_struct_el_flag_get, _haznics.mesh_struct_el_flag_set)
    dwork = property(_haznics.mesh_struct_dwork_get, _haznics.mesh_struct_dwork_set)
    iwork = property(_haznics.mesh_struct_iwork_get, _haznics.mesh_struct_iwork_set)

    def __init__(self):
        _haznics.mesh_struct_swiginit(self, _haznics.new_mesh_struct())
    __swig_destroy__ = _haznics.delete_mesh_struct

# Register mesh_struct in _haznics:
_haznics.mesh_struct_swigregister(mesh_struct)

MAXFILENAMESIZE = _haznics.MAXFILENAMESIZE
DEFAULT_GRID_DATA_ = _haznics.DEFAULT_GRID_DATA_
class scomplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nbig = property(_haznics.scomplex_nbig_get, _haznics.scomplex_nbig_set)
    n = property(_haznics.scomplex_n_get, _haznics.scomplex_n_set)
    nv = property(_haznics.scomplex_nv_get, _haznics.scomplex_nv_set)
    ns = property(_haznics.scomplex_ns_get, _haznics.scomplex_ns_set)
    level = property(_haznics.scomplex_level_get, _haznics.scomplex_level_set)
    marked = property(_haznics.scomplex_marked_get, _haznics.scomplex_marked_set)
    gen = property(_haznics.scomplex_gen_get, _haznics.scomplex_gen_set)
    nbr = property(_haznics.scomplex_nbr_get, _haznics.scomplex_nbr_set)
    parent = property(_haznics.scomplex_parent_get, _haznics.scomplex_parent_set)
    child0 = property(_haznics.scomplex_child0_get, _haznics.scomplex_child0_set)
    childn = property(_haznics.scomplex_childn_get, _haznics.scomplex_childn_set)
    bndry = property(_haznics.scomplex_bndry_get, _haznics.scomplex_bndry_set)
    csys = property(_haznics.scomplex_csys_get, _haznics.scomplex_csys_set)
    nodes = property(_haznics.scomplex_nodes_get, _haznics.scomplex_nodes_set)
    flags = property(_haznics.scomplex_flags_get, _haznics.scomplex_flags_set)
    x = property(_haznics.scomplex_x_get, _haznics.scomplex_x_set)
    vols = property(_haznics.scomplex_vols_get, _haznics.scomplex_vols_set)
    fval = property(_haznics.scomplex_fval_get, _haznics.scomplex_fval_set)
    factorial = property(_haznics.scomplex_factorial_get, _haznics.scomplex_factorial_set)
    el2fnum = property(_haznics.scomplex_el2fnum_get, _haznics.scomplex_el2fnum_set)
    bcodesf = property(_haznics.scomplex_bcodesf_get, _haznics.scomplex_bcodesf_set)
    isbface = property(_haznics.scomplex_isbface_get, _haznics.scomplex_isbface_set)
    bfs = property(_haznics.scomplex_bfs_get, _haznics.scomplex_bfs_set)
    etree = property(_haznics.scomplex_etree_get, _haznics.scomplex_etree_set)
    cc = property(_haznics.scomplex_cc_get, _haznics.scomplex_cc_set)
    bndry_cc = property(_haznics.scomplex_bndry_cc_get, _haznics.scomplex_bndry_cc_set)

    def __init__(self):
        _haznics.scomplex_swiginit(self, _haznics.new_scomplex())
    __swig_destroy__ = _haznics.delete_scomplex

# Register scomplex in _haznics:
_haznics.scomplex_swigregister(scomplex)

class coordsystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_haznics.coordsystem_type_get, _haznics.coordsystem_type_set)
    o = property(_haznics.coordsystem_o_get, _haznics.coordsystem_o_set)
    parent = property(_haznics.coordsystem_parent_get, _haznics.coordsystem_parent_set)

    def __init__(self):
        _haznics.coordsystem_swiginit(self, _haznics.new_coordsystem())
    __swig_destroy__ = _haznics.delete_coordsystem

# Register coordsystem in _haznics:
_haznics.coordsystem_swigregister(coordsystem)

class input_grid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    title = property(_haznics.input_grid_title_get, _haznics.input_grid_title_set)
    dim = property(_haznics.input_grid_dim_get, _haznics.input_grid_dim_set)
    print_level = property(_haznics.input_grid_print_level_get, _haznics.input_grid_print_level_set)
    fgrid = property(_haznics.input_grid_fgrid_get, _haznics.input_grid_fgrid_set)
    fvtu = property(_haznics.input_grid_fvtu_get, _haznics.input_grid_fvtu_set)
    ncsys = property(_haznics.input_grid_ncsys_get, _haznics.input_grid_ncsys_set)
    ox = property(_haznics.input_grid_ox_get, _haznics.input_grid_ox_set)
    systypes = property(_haznics.input_grid_systypes_get, _haznics.input_grid_systypes_set)
    syslabels = property(_haznics.input_grid_syslabels_get, _haznics.input_grid_syslabels_set)
    nv = property(_haznics.input_grid_nv_get, _haznics.input_grid_nv_set)
    xv = property(_haznics.input_grid_xv_get, _haznics.input_grid_xv_set)
    csysv = property(_haznics.input_grid_csysv_get, _haznics.input_grid_csysv_set)
    labelsv = property(_haznics.input_grid_labelsv_get, _haznics.input_grid_labelsv_set)
    bcodesv = property(_haznics.input_grid_bcodesv_get, _haznics.input_grid_bcodesv_set)
    ne = property(_haznics.input_grid_ne_get, _haznics.input_grid_ne_set)
    xe = property(_haznics.input_grid_xe_get, _haznics.input_grid_xe_set)
    seg = property(_haznics.input_grid_seg_get, _haznics.input_grid_seg_set)
    nel = property(_haznics.input_grid_nel_get, _haznics.input_grid_nel_set)
    mnodes = property(_haznics.input_grid_mnodes_get, _haznics.input_grid_mnodes_set)
    nf = property(_haznics.input_grid_nf_get, _haznics.input_grid_nf_set)
    mfaces = property(_haznics.input_grid_mfaces_get, _haznics.input_grid_mfaces_set)
    nref = property(_haznics.input_grid_nref_get, _haznics.input_grid_nref_set)
    ref_type = property(_haznics.input_grid_ref_type_get, _haznics.input_grid_ref_type_set)
    mark_type = property(_haznics.input_grid_mark_type_get, _haznics.input_grid_mark_type_set)
    err_stop = property(_haznics.input_grid_err_stop_get, _haznics.input_grid_err_stop_set)

    def __init__(self):
        _haznics.input_grid_swiginit(self, _haznics.new_input_grid())
    __swig_destroy__ = _haznics.delete_input_grid

# Register input_grid in _haznics:
_haznics.input_grid_swigregister(input_grid)

class subscomplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nbig = property(_haznics.subscomplex_nbig_get, _haznics.subscomplex_nbig_set)
    n = property(_haznics.subscomplex_n_get, _haznics.subscomplex_n_set)
    ns = property(_haznics.subscomplex_ns_get, _haznics.subscomplex_ns_set)
    elf = property(_haznics.subscomplex_elf_get, _haznics.subscomplex_elf_set)
    nodes = property(_haznics.subscomplex_nodes_get, _haznics.subscomplex_nodes_set)
    flags = property(_haznics.subscomplex_flags_get, _haznics.subscomplex_flags_set)
    normals = property(_haznics.subscomplex_normals_get, _haznics.subscomplex_normals_set)
    areas = property(_haznics.subscomplex_areas_get, _haznics.subscomplex_areas_set)
    parent = property(_haznics.subscomplex_parent_get, _haznics.subscomplex_parent_set)

    def __init__(self):
        _haznics.subscomplex_swiginit(self, _haznics.new_subscomplex())
    __swig_destroy__ = _haznics.delete_subscomplex

# Register subscomplex in _haznics:
_haznics.subscomplex_swigregister(subscomplex)

class unigrid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_haznics.unigrid_n_get, _haznics.unigrid_n_set)
    ugtype = property(_haznics.unigrid_ugtype_get, _haznics.unigrid_ugtype_set)
    nall = property(_haznics.unigrid_nall_get, _haznics.unigrid_nall_set)
    ndiv = property(_haznics.unigrid_ndiv_get, _haznics.unigrid_ndiv_set)
    nvcube = property(_haznics.unigrid_nvcube_get, _haznics.unigrid_nvcube_set)
    bits = property(_haznics.unigrid_bits_get, _haznics.unigrid_bits_set)
    xo = property(_haznics.unigrid_xo_get, _haznics.unigrid_xo_set)
    xn = property(_haznics.unigrid_xn_get, _haznics.unigrid_xn_set)
    dx = property(_haznics.unigrid_dx_get, _haznics.unigrid_dx_set)
    data = property(_haznics.unigrid_data_get, _haznics.unigrid_data_set)
    dataid = property(_haznics.unigrid_dataid_get, _haznics.unigrid_dataid_set)
    fp = property(_haznics.unigrid_fp_get, _haznics.unigrid_fp_set)

    def __init__(self):
        _haznics.unigrid_swiginit(self, _haznics.new_unigrid())
    __swig_destroy__ = _haznics.delete_unigrid

# Register unigrid in _haznics:
_haznics.unigrid_swigregister(unigrid)

class cube2simp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n = property(_haznics.cube2simp_n_get, _haznics.cube2simp_n_set)
    nvcube = property(_haznics.cube2simp_nvcube_get, _haznics.cube2simp_nvcube_set)
    nvface = property(_haznics.cube2simp_nvface_get, _haznics.cube2simp_nvface_set)
    ns = property(_haznics.cube2simp_ns_get, _haznics.cube2simp_ns_set)
    ne = property(_haznics.cube2simp_ne_get, _haznics.cube2simp_ne_set)
    nf = property(_haznics.cube2simp_nf_get, _haznics.cube2simp_nf_set)
    bits = property(_haznics.cube2simp_bits_get, _haznics.cube2simp_bits_set)
    edges = property(_haznics.cube2simp_edges_get, _haznics.cube2simp_edges_set)
    faces = property(_haznics.cube2simp_faces_get, _haznics.cube2simp_faces_set)
    nodes = property(_haznics.cube2simp_nodes_get, _haznics.cube2simp_nodes_set)
    perms = property(_haznics.cube2simp_perms_get, _haznics.cube2simp_perms_set)

    def __init__(self):
        _haznics.cube2simp_swiginit(self, _haznics.new_cube2simp())
    __swig_destroy__ = _haznics.delete_cube2simp

# Register cube2simp in _haznics:
_haznics.cube2simp_swigregister(cube2simp)

class macrocomplex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nel = property(_haznics.macrocomplex_nel_get, _haznics.macrocomplex_nel_set)
    nf = property(_haznics.macrocomplex_nf_get, _haznics.macrocomplex_nf_set)
    nfi = property(_haznics.macrocomplex_nfi_get, _haznics.macrocomplex_nfi_set)
    nfb = property(_haznics.macrocomplex_nfb_get, _haznics.macrocomplex_nfb_set)
    nd = property(_haznics.macrocomplex_nd_get, _haznics.macrocomplex_nd_set)
    elneib = property(_haznics.macrocomplex_elneib_get, _haznics.macrocomplex_elneib_set)
    el2fnum = property(_haznics.macrocomplex_el2fnum_get, _haznics.macrocomplex_el2fnum_set)
    iindex = property(_haznics.macrocomplex_iindex_get, _haznics.macrocomplex_iindex_set)
    fullel2el = property(_haznics.macrocomplex_fullel2el_get, _haznics.macrocomplex_fullel2el_set)
    bcodesf = property(_haznics.macrocomplex_bcodesf_get, _haznics.macrocomplex_bcodesf_set)
    isbface = property(_haznics.macrocomplex_isbface_get, _haznics.macrocomplex_isbface_set)
    flags = property(_haznics.macrocomplex_flags_get, _haznics.macrocomplex_flags_set)
    cc = property(_haznics.macrocomplex_cc_get, _haznics.macrocomplex_cc_set)
    bndry_cc = property(_haznics.macrocomplex_bndry_cc_get, _haznics.macrocomplex_bndry_cc_set)
    bfs = property(_haznics.macrocomplex_bfs_get, _haznics.macrocomplex_bfs_set)
    etree = property(_haznics.macrocomplex_etree_get, _haznics.macrocomplex_etree_set)

    def __init__(self):
        _haznics.macrocomplex_swiginit(self, _haznics.new_macrocomplex())
    __swig_destroy__ = _haznics.delete_macrocomplex

# Register macrocomplex in _haznics:
_haznics.macrocomplex_swigregister(macrocomplex)

class features(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nbig = property(_haznics.features_nbig_get, _haznics.features_nbig_set)
    n = property(_haznics.features_n_get, _haznics.features_n_set)
    nf = property(_haznics.features_nf_get, _haznics.features_nf_set)
    x = property(_haznics.features_x_get, _haznics.features_x_set)
    fill = property(_haznics.features_fill_get, _haznics.features_fill_set)
    fpf = property(_haznics.features_fpf_get, _haznics.features_fpf_set)

    def __init__(self):
        _haznics.features_swiginit(self, _haznics.new_features())
    __swig_destroy__ = _haznics.delete_features

# Register features in _haznics:
_haznics.features_swigregister(features)

class dCSRmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row = property(_haznics.dCSRmat_row_get, _haznics.dCSRmat_row_set)
    col = property(_haznics.dCSRmat_col_get, _haznics.dCSRmat_col_set)
    nnz = property(_haznics.dCSRmat_nnz_get, _haznics.dCSRmat_nnz_set)
    IA = property(_haznics.dCSRmat_IA_get, _haznics.dCSRmat_IA_set)
    JA = property(_haznics.dCSRmat_JA_get, _haznics.dCSRmat_JA_set)
    val = property(_haznics.dCSRmat_val_get, _haznics.dCSRmat_val_set)
    __swig_destroy__ = _haznics.delete_dCSRmat

    def __init__(self):
        _haznics.dCSRmat_swiginit(self, _haznics.new_dCSRmat())

# Register dCSRmat in _haznics:
_haznics.dCSRmat_swigregister(dCSRmat)

class iCSRmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row = property(_haznics.iCSRmat_row_get, _haznics.iCSRmat_row_set)
    col = property(_haznics.iCSRmat_col_get, _haznics.iCSRmat_col_set)
    nnz = property(_haznics.iCSRmat_nnz_get, _haznics.iCSRmat_nnz_set)
    IA = property(_haznics.iCSRmat_IA_get, _haznics.iCSRmat_IA_set)
    JA = property(_haznics.iCSRmat_JA_get, _haznics.iCSRmat_JA_set)
    val = property(_haznics.iCSRmat_val_get, _haznics.iCSRmat_val_set)

    def __init__(self):
        _haznics.iCSRmat_swiginit(self, _haznics.new_iCSRmat())
    __swig_destroy__ = _haznics.delete_iCSRmat

# Register iCSRmat in _haznics:
_haznics.iCSRmat_swigregister(iCSRmat)

class dCOOmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row = property(_haznics.dCOOmat_row_get, _haznics.dCOOmat_row_set)
    col = property(_haznics.dCOOmat_col_get, _haznics.dCOOmat_col_set)
    nnz = property(_haznics.dCOOmat_nnz_get, _haznics.dCOOmat_nnz_set)
    rowind = property(_haznics.dCOOmat_rowind_get, _haznics.dCOOmat_rowind_set)
    colind = property(_haznics.dCOOmat_colind_get, _haznics.dCOOmat_colind_set)
    val = property(_haznics.dCOOmat_val_get, _haznics.dCOOmat_val_set)

    def __init__(self):
        _haznics.dCOOmat_swiginit(self, _haznics.new_dCOOmat())
    __swig_destroy__ = _haznics.delete_dCOOmat

# Register dCOOmat in _haznics:
_haznics.dCOOmat_swigregister(dCOOmat)

class iCOOmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row = property(_haznics.iCOOmat_row_get, _haznics.iCOOmat_row_set)
    col = property(_haznics.iCOOmat_col_get, _haznics.iCOOmat_col_set)
    nnz = property(_haznics.iCOOmat_nnz_get, _haznics.iCOOmat_nnz_set)
    rowind = property(_haznics.iCOOmat_rowind_get, _haznics.iCOOmat_rowind_set)
    colind = property(_haznics.iCOOmat_colind_get, _haznics.iCOOmat_colind_set)
    val = property(_haznics.iCOOmat_val_get, _haznics.iCOOmat_val_set)

    def __init__(self):
        _haznics.iCOOmat_swiginit(self, _haznics.new_iCOOmat())
    __swig_destroy__ = _haznics.delete_iCOOmat

# Register iCOOmat in _haznics:
_haznics.iCOOmat_swigregister(iCOOmat)

class block_dCSRmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    brow = property(_haznics.block_dCSRmat_brow_get, _haznics.block_dCSRmat_brow_set)
    bcol = property(_haznics.block_dCSRmat_bcol_get, _haznics.block_dCSRmat_bcol_set)
    blocks = property(_haznics.block_dCSRmat_blocks_get, _haznics.block_dCSRmat_blocks_set)

    def init(self, n: "int", m: "int") -> "void":
        return _haznics.block_dCSRmat_init(self, n, m)

    def debugPrint(self) -> "void":
        return _haznics.block_dCSRmat_debugPrint(self)

    def get(self, i: "int", j: "int") -> "dCSRmat *":
        return _haznics.block_dCSRmat_get(self, i, j)

    def set(self, i: "int", j: "int", mat: "dCSRmat") -> "void":
        return _haznics.block_dCSRmat_set(self, i, j, mat)

    def __init__(self):
        _haznics.block_dCSRmat_swiginit(self, _haznics.new_block_dCSRmat())
    __swig_destroy__ = _haznics.delete_block_dCSRmat

# Register block_dCSRmat in _haznics:
_haznics.block_dCSRmat_swigregister(block_dCSRmat)

class block_iCSRmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    brow = property(_haznics.block_iCSRmat_brow_get, _haznics.block_iCSRmat_brow_set)
    bcol = property(_haznics.block_iCSRmat_bcol_get, _haznics.block_iCSRmat_bcol_set)
    blocks = property(_haznics.block_iCSRmat_blocks_get, _haznics.block_iCSRmat_blocks_set)

    def __init__(self):
        _haznics.block_iCSRmat_swiginit(self, _haznics.new_block_iCSRmat())
    __swig_destroy__ = _haznics.delete_block_iCSRmat

# Register block_iCSRmat in _haznics:
_haznics.block_iCSRmat_swigregister(block_iCSRmat)

class dDENSEmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row = property(_haznics.dDENSEmat_row_get, _haznics.dDENSEmat_row_set)
    col = property(_haznics.dDENSEmat_col_get, _haznics.dDENSEmat_col_set)
    val = property(_haznics.dDENSEmat_val_get, _haznics.dDENSEmat_val_set)

    def __init__(self):
        _haznics.dDENSEmat_swiginit(self, _haznics.new_dDENSEmat())
    __swig_destroy__ = _haznics.delete_dDENSEmat

# Register dDENSEmat in _haznics:
_haznics.dDENSEmat_swigregister(dDENSEmat)

class iDENSEmat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row = property(_haznics.iDENSEmat_row_get, _haznics.iDENSEmat_row_set)
    col = property(_haznics.iDENSEmat_col_get, _haznics.iDENSEmat_col_set)
    val = property(_haznics.iDENSEmat_val_get, _haznics.iDENSEmat_val_set)

    def __init__(self):
        _haznics.iDENSEmat_swiginit(self, _haznics.new_iDENSEmat())
    __swig_destroy__ = _haznics.delete_iDENSEmat

# Register iDENSEmat in _haznics:
_haznics.iDENSEmat_swigregister(iDENSEmat)

class dvector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row = property(_haznics.dvector_row_get, _haznics.dvector_row_set)
    val = property(_haznics.dvector_val_get, _haznics.dvector_val_set)
    __swig_destroy__ = _haznics.delete_dvector

    def __init__(self):
        _haznics.dvector_swiginit(self, _haznics.new_dvector())

# Register dvector in _haznics:
_haznics.dvector_swigregister(dvector)

class ivector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row = property(_haznics.ivector_row_get, _haznics.ivector_row_set)
    val = property(_haznics.ivector_val_get, _haznics.ivector_val_set)

    def __init__(self):
        _haznics.ivector_swiginit(self, _haznics.new_ivector())
    __swig_destroy__ = _haznics.delete_ivector

# Register ivector in _haznics:
_haznics.ivector_swigregister(ivector)

MARKER_DIRICHLET = _haznics.MARKER_DIRICHLET
MARKER_NEUMANN = _haznics.MARKER_NEUMANN
MARKER_ROBIN = _haznics.MARKER_ROBIN
MARKER_BOUNDARY_NO = _haznics.MARKER_BOUNDARY_NO
class qcoordinates(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_haznics.qcoordinates_x_get, _haznics.qcoordinates_x_set)
    y = property(_haznics.qcoordinates_y_get, _haznics.qcoordinates_y_set)
    z = property(_haznics.qcoordinates_z_get, _haznics.qcoordinates_z_set)
    w = property(_haznics.qcoordinates_w_get, _haznics.qcoordinates_w_set)
    n = property(_haznics.qcoordinates_n_get, _haznics.qcoordinates_n_set)
    nq_per_elm = property(_haznics.qcoordinates_nq_per_elm_get, _haznics.qcoordinates_nq_per_elm_set)
    nq1d = property(_haznics.qcoordinates_nq1d_get, _haznics.qcoordinates_nq1d_set)

    def __init__(self):
        _haznics.qcoordinates_swiginit(self, _haznics.new_qcoordinates())
    __swig_destroy__ = _haznics.delete_qcoordinates

# Register qcoordinates in _haznics:
_haznics.qcoordinates_swigregister(qcoordinates)

class fespace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FEtype = property(_haznics.fespace_FEtype_get, _haznics.fespace_FEtype_set)
    scal_or_vec = property(_haznics.fespace_scal_or_vec_get, _haznics.fespace_scal_or_vec_set)
    nelm = property(_haznics.fespace_nelm_get, _haznics.fespace_nelm_set)
    cdof = property(_haznics.fespace_cdof_get, _haznics.fespace_cdof_set)
    ndof = property(_haznics.fespace_ndof_get, _haznics.fespace_ndof_set)
    nbdof = property(_haznics.fespace_nbdof_get, _haznics.fespace_nbdof_set)
    dof_per_elm = property(_haznics.fespace_dof_per_elm_get, _haznics.fespace_dof_per_elm_set)
    el_dof = property(_haznics.fespace_el_dof_get, _haznics.fespace_el_dof_set)
    ed_dof = property(_haznics.fespace_ed_dof_get, _haznics.fespace_ed_dof_set)
    dof_per_face = property(_haznics.fespace_dof_per_face_get, _haznics.fespace_dof_per_face_set)
    f_dof = property(_haznics.fespace_f_dof_get, _haznics.fespace_f_dof_set)
    dirichlet = property(_haznics.fespace_dirichlet_get, _haznics.fespace_dirichlet_set)
    dof_flag = property(_haznics.fespace_dof_flag_get, _haznics.fespace_dof_flag_set)
    periodic = property(_haznics.fespace_periodic_get, _haznics.fespace_periodic_set)
    phi = property(_haznics.fespace_phi_get, _haznics.fespace_phi_set)
    dphi = property(_haznics.fespace_dphi_get, _haznics.fespace_dphi_set)

    def __init__(self):
        _haznics.fespace_swiginit(self, _haznics.new_fespace())
    __swig_destroy__ = _haznics.delete_fespace

# Register fespace in _haznics:
_haznics.fespace_swigregister(fespace)

class block_fespace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nspaces = property(_haznics.block_fespace_nspaces_get, _haznics.block_fespace_nspaces_set)
    nun = property(_haznics.block_fespace_nun_get, _haznics.block_fespace_nun_set)
    ndof = property(_haznics.block_fespace_ndof_get, _haznics.block_fespace_ndof_set)
    nbdof = property(_haznics.block_fespace_nbdof_get, _haznics.block_fespace_nbdof_set)
    var_spaces = property(_haznics.block_fespace_var_spaces_get, _haznics.block_fespace_var_spaces_set)
    dirichlet = property(_haznics.block_fespace_dirichlet_get, _haznics.block_fespace_dirichlet_set)
    dof_flag = property(_haznics.block_fespace_dof_flag_get, _haznics.block_fespace_dof_flag_set)

    def __init__(self):
        _haznics.block_fespace_swiginit(self, _haznics.new_block_fespace())
    __swig_destroy__ = _haznics.delete_block_fespace

# Register block_fespace in _haznics:
_haznics.block_fespace_swigregister(block_fespace)

class precond(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_haznics.precond_data_get, _haznics.precond_data_set)
    fct = property(_haznics.precond_fct_get, _haznics.precond_fct_set)

    def apply(self, lhs: "dvector", rhs: "dvector") -> "void":
        return _haznics.precond_apply(self, lhs, rhs)

    def precond_data(self) -> "precond_data *":
        return _haznics.precond_precond_data(self)

    def __init__(self):
        _haznics.precond_swiginit(self, _haznics.new_precond())
    __swig_destroy__ = _haznics.delete_precond

# Register precond in _haznics:
_haznics.precond_swigregister(precond)

class Schwarz_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    A = property(_haznics.Schwarz_data_A_get, _haznics.Schwarz_data_A_set)
    nblk = property(_haznics.Schwarz_data_nblk_get, _haznics.Schwarz_data_nblk_set)
    iblock = property(_haznics.Schwarz_data_iblock_get, _haznics.Schwarz_data_iblock_set)
    jblock = property(_haznics.Schwarz_data_jblock_get, _haznics.Schwarz_data_jblock_set)
    rhsloc = property(_haznics.Schwarz_data_rhsloc_get, _haznics.Schwarz_data_rhsloc_set)
    rhsloc1 = property(_haznics.Schwarz_data_rhsloc1_get, _haznics.Schwarz_data_rhsloc1_set)
    xloc1 = property(_haznics.Schwarz_data_xloc1_get, _haznics.Schwarz_data_xloc1_set)
    au = property(_haznics.Schwarz_data_au_get, _haznics.Schwarz_data_au_set)
    al = property(_haznics.Schwarz_data_al_get, _haznics.Schwarz_data_al_set)
    Schwarz_type = property(_haznics.Schwarz_data_Schwarz_type_get, _haznics.Schwarz_data_Schwarz_type_set)
    blk_solver = property(_haznics.Schwarz_data_blk_solver_get, _haznics.Schwarz_data_blk_solver_set)
    memt = property(_haznics.Schwarz_data_memt_get, _haznics.Schwarz_data_memt_set)
    mask = property(_haznics.Schwarz_data_mask_get, _haznics.Schwarz_data_mask_set)
    maxbs = property(_haznics.Schwarz_data_maxbs_get, _haznics.Schwarz_data_maxbs_set)
    maxa = property(_haznics.Schwarz_data_maxa_get, _haznics.Schwarz_data_maxa_set)
    blk_data = property(_haznics.Schwarz_data_blk_data_get, _haznics.Schwarz_data_blk_data_set)
    numeric = property(_haznics.Schwarz_data_numeric_get, _haznics.Schwarz_data_numeric_set)
    swzparam = property(_haznics.Schwarz_data_swzparam_get, _haznics.Schwarz_data_swzparam_set)

    def __init__(self):
        _haznics.Schwarz_data_swiginit(self, _haznics.new_Schwarz_data())
    __swig_destroy__ = _haznics.delete_Schwarz_data

# Register Schwarz_data in _haznics:
_haznics.Schwarz_data_swigregister(Schwarz_data)

class AMG_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max_levels = property(_haznics.AMG_data_max_levels_get, _haznics.AMG_data_max_levels_set)
    num_levels = property(_haznics.AMG_data_num_levels_get, _haznics.AMG_data_num_levels_set)
    A = property(_haznics.AMG_data_A_get, _haznics.AMG_data_A_set)
    R = property(_haznics.AMG_data_R_get, _haznics.AMG_data_R_set)
    P = property(_haznics.AMG_data_P_get, _haznics.AMG_data_P_set)
    b = property(_haznics.AMG_data_b_get, _haznics.AMG_data_b_set)
    x = property(_haznics.AMG_data_x_get, _haznics.AMG_data_x_set)
    M = property(_haznics.AMG_data_M_get, _haznics.AMG_data_M_set)
    Numeric = property(_haznics.AMG_data_Numeric_get, _haznics.AMG_data_Numeric_set)
    near_kernel_dim = property(_haznics.AMG_data_near_kernel_dim_get, _haznics.AMG_data_near_kernel_dim_set)
    near_kernel_basis = property(_haznics.AMG_data_near_kernel_basis_get, _haznics.AMG_data_near_kernel_basis_set)
    Schwarz_levels = property(_haznics.AMG_data_Schwarz_levels_get, _haznics.AMG_data_Schwarz_levels_set)
    Schwarz = property(_haznics.AMG_data_Schwarz_get, _haznics.AMG_data_Schwarz_set)
    w = property(_haznics.AMG_data_w_get, _haznics.AMG_data_w_set)
    cycle_type = property(_haznics.AMG_data_cycle_type_get, _haznics.AMG_data_cycle_type_set)
    wdata = property(_haznics.AMG_data_wdata_get, _haznics.AMG_data_wdata_set)

    def __init__(self):
        _haznics.AMG_data_swiginit(self, _haznics.new_AMG_data())
    __swig_destroy__ = _haznics.delete_AMG_data

# Register AMG_data in _haznics:
_haznics.AMG_data_swigregister(AMG_data)

class MG_blk_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fine_level_mesh = property(_haznics.MG_blk_data_fine_level_mesh_get, _haznics.MG_blk_data_fine_level_mesh_set)
    gmg_type = property(_haznics.MG_blk_data_gmg_type_get, _haznics.MG_blk_data_gmg_type_set)
    max_levels = property(_haznics.MG_blk_data_max_levels_get, _haznics.MG_blk_data_max_levels_set)
    num_levels = property(_haznics.MG_blk_data_num_levels_get, _haznics.MG_blk_data_num_levels_set)
    num_spaces = property(_haznics.MG_blk_data_num_spaces_get, _haznics.MG_blk_data_num_spaces_set)
    FE = property(_haznics.MG_blk_data_FE_get, _haznics.MG_blk_data_FE_set)
    set_bdry_flags = property(_haznics.MG_blk_data_set_bdry_flags_get, _haznics.MG_blk_data_set_bdry_flags_set)
    dirichlet = property(_haznics.MG_blk_data_dirichlet_get, _haznics.MG_blk_data_dirichlet_set)
    dirichlet_blk = property(_haznics.MG_blk_data_dirichlet_blk_get, _haznics.MG_blk_data_dirichlet_blk_set)
    A = property(_haznics.MG_blk_data_A_get, _haznics.MG_blk_data_A_set)
    A_noBC = property(_haznics.MG_blk_data_A_noBC_get, _haznics.MG_blk_data_A_noBC_set)
    R = property(_haznics.MG_blk_data_R_get, _haznics.MG_blk_data_R_set)
    P = property(_haznics.MG_blk_data_P_get, _haznics.MG_blk_data_P_set)
    b = property(_haznics.MG_blk_data_b_get, _haznics.MG_blk_data_b_set)
    x = property(_haznics.MG_blk_data_x_get, _haznics.MG_blk_data_x_set)
    Ac = property(_haznics.MG_blk_data_Ac_get, _haznics.MG_blk_data_Ac_set)
    Numeric = property(_haznics.MG_blk_data_Numeric_get, _haznics.MG_blk_data_Numeric_set)
    near_kernel_dim = property(_haznics.MG_blk_data_near_kernel_dim_get, _haznics.MG_blk_data_near_kernel_dim_set)
    near_kernel_basis = property(_haznics.MG_blk_data_near_kernel_basis_get, _haznics.MG_blk_data_near_kernel_basis_set)
    A_diag = property(_haznics.MG_blk_data_A_diag_get, _haznics.MG_blk_data_A_diag_set)
    mgl = property(_haznics.MG_blk_data_mgl_get, _haznics.MG_blk_data_mgl_set)
    Schwarz_levels = property(_haznics.MG_blk_data_Schwarz_levels_get, _haznics.MG_blk_data_Schwarz_levels_set)
    Schwarz = property(_haznics.MG_blk_data_Schwarz_get, _haznics.MG_blk_data_Schwarz_set)
    w = property(_haznics.MG_blk_data_w_get, _haznics.MG_blk_data_w_set)
    cycle_type = property(_haznics.MG_blk_data_cycle_type_get, _haznics.MG_blk_data_cycle_type_set)
    periodic_BC = property(_haznics.MG_blk_data_periodic_BC_get, _haznics.MG_blk_data_periodic_BC_set)
    A_periodic = property(_haznics.MG_blk_data_A_periodic_get, _haznics.MG_blk_data_A_periodic_set)
    P_periodic = property(_haznics.MG_blk_data_P_periodic_get, _haznics.MG_blk_data_P_periodic_set)
    R_periodic = property(_haznics.MG_blk_data_R_periodic_get, _haznics.MG_blk_data_R_periodic_set)
    R_periodic_scaled = property(_haznics.MG_blk_data_R_periodic_scaled_get, _haznics.MG_blk_data_R_periodic_scaled_set)
    As = property(_haznics.MG_blk_data_As_get, _haznics.MG_blk_data_As_set)
    nAs = property(_haznics.MG_blk_data_nAs_get, _haznics.MG_blk_data_nAs_set)
    FES = property(_haznics.MG_blk_data_FES_get, _haznics.MG_blk_data_FES_set)

    def __init__(self):
        _haznics.MG_blk_data_swiginit(self, _haznics.new_MG_blk_data())
    __swig_destroy__ = _haznics.delete_MG_blk_data

# Register MG_blk_data in _haznics:
_haznics.MG_blk_data_swigregister(MG_blk_data)

class precond_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AMG_type = property(_haznics.precond_data_AMG_type_get, _haznics.precond_data_AMG_type_set)
    print_level = property(_haznics.precond_data_print_level_get, _haznics.precond_data_print_level_set)
    maxit = property(_haznics.precond_data_maxit_get, _haznics.precond_data_maxit_set)
    max_levels = property(_haznics.precond_data_max_levels_get, _haznics.precond_data_max_levels_set)
    tol = property(_haznics.precond_data_tol_get, _haznics.precond_data_tol_set)
    cycle_type = property(_haznics.precond_data_cycle_type_get, _haznics.precond_data_cycle_type_set)
    smoother = property(_haznics.precond_data_smoother_get, _haznics.precond_data_smoother_set)
    presmooth_iter = property(_haznics.precond_data_presmooth_iter_get, _haznics.precond_data_presmooth_iter_set)
    postsmooth_iter = property(_haznics.precond_data_postsmooth_iter_get, _haznics.precond_data_postsmooth_iter_set)
    relaxation = property(_haznics.precond_data_relaxation_get, _haznics.precond_data_relaxation_set)
    polynomial_degree = property(_haznics.precond_data_polynomial_degree_get, _haznics.precond_data_polynomial_degree_set)
    coarse_solver = property(_haznics.precond_data_coarse_solver_get, _haznics.precond_data_coarse_solver_set)
    coarse_scaling = property(_haznics.precond_data_coarse_scaling_get, _haznics.precond_data_coarse_scaling_set)
    amli_degree = property(_haznics.precond_data_amli_degree_get, _haznics.precond_data_amli_degree_set)
    nl_amli_krylov_type = property(_haznics.precond_data_nl_amli_krylov_type_get, _haznics.precond_data_nl_amli_krylov_type_set)
    amli_coef = property(_haznics.precond_data_amli_coef_get, _haznics.precond_data_amli_coef_set)
    mgl_data = property(_haznics.precond_data_mgl_data_get, _haznics.precond_data_mgl_data_set)
    fpwr = property(_haznics.precond_data_fpwr_get, _haznics.precond_data_fpwr_set)
    A = property(_haznics.precond_data_A_get, _haznics.precond_data_A_set)
    A_nk = property(_haznics.precond_data_A_nk_get, _haznics.precond_data_A_nk_set)
    P_nk = property(_haznics.precond_data_P_nk_get, _haznics.precond_data_P_nk_set)
    R_nk = property(_haznics.precond_data_R_nk_get, _haznics.precond_data_R_nk_set)
    r = property(_haznics.precond_data_r_get, _haznics.precond_data_r_set)
    w = property(_haznics.precond_data_w_get, _haznics.precond_data_w_set)

    def __init__(self):
        _haznics.precond_data_swiginit(self, _haznics.new_precond_data())
    __swig_destroy__ = _haznics.delete_precond_data

# Register precond_data in _haznics:
_haznics.precond_data_swigregister(precond_data)

class HX_curl_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    A = property(_haznics.HX_curl_data_A_get, _haznics.HX_curl_data_A_set)
    smooth_type = property(_haznics.HX_curl_data_smooth_type_get, _haznics.HX_curl_data_smooth_type_set)
    smooth_iter = property(_haznics.HX_curl_data_smooth_iter_get, _haznics.HX_curl_data_smooth_iter_set)
    P_curl = property(_haznics.HX_curl_data_P_curl_get, _haznics.HX_curl_data_P_curl_set)
    Pt_curl = property(_haznics.HX_curl_data_Pt_curl_get, _haznics.HX_curl_data_Pt_curl_set)
    A_vgrad = property(_haznics.HX_curl_data_A_vgrad_get, _haznics.HX_curl_data_A_vgrad_set)
    amgparam_vgrad = property(_haznics.HX_curl_data_amgparam_vgrad_get, _haznics.HX_curl_data_amgparam_vgrad_set)
    mgl_vgrad = property(_haznics.HX_curl_data_mgl_vgrad_get, _haznics.HX_curl_data_mgl_vgrad_set)
    Grad = property(_haznics.HX_curl_data_Grad_get, _haznics.HX_curl_data_Grad_set)
    Gradt = property(_haznics.HX_curl_data_Gradt_get, _haznics.HX_curl_data_Gradt_set)
    A_grad = property(_haznics.HX_curl_data_A_grad_get, _haznics.HX_curl_data_A_grad_set)
    amgparam_grad = property(_haznics.HX_curl_data_amgparam_grad_get, _haznics.HX_curl_data_amgparam_grad_set)
    mgl_grad = property(_haznics.HX_curl_data_mgl_grad_get, _haznics.HX_curl_data_mgl_grad_set)
    backup_r = property(_haznics.HX_curl_data_backup_r_get, _haznics.HX_curl_data_backup_r_set)
    w = property(_haznics.HX_curl_data_w_get, _haznics.HX_curl_data_w_set)

    def __init__(self):
        _haznics.HX_curl_data_swiginit(self, _haznics.new_HX_curl_data())
    __swig_destroy__ = _haznics.delete_HX_curl_data

# Register HX_curl_data in _haznics:
_haznics.HX_curl_data_swigregister(HX_curl_data)

class HX_div_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    A = property(_haznics.HX_div_data_A_get, _haznics.HX_div_data_A_set)
    smooth_type = property(_haznics.HX_div_data_smooth_type_get, _haznics.HX_div_data_smooth_type_set)
    smooth_iter = property(_haznics.HX_div_data_smooth_iter_get, _haznics.HX_div_data_smooth_iter_set)
    P_curl = property(_haznics.HX_div_data_P_curl_get, _haznics.HX_div_data_P_curl_set)
    Pt_curl = property(_haznics.HX_div_data_Pt_curl_get, _haznics.HX_div_data_Pt_curl_set)
    P_div = property(_haznics.HX_div_data_P_div_get, _haznics.HX_div_data_P_div_set)
    Pt_div = property(_haznics.HX_div_data_Pt_div_get, _haznics.HX_div_data_Pt_div_set)
    A_curlgrad = property(_haznics.HX_div_data_A_curlgrad_get, _haznics.HX_div_data_A_curlgrad_set)
    A_divgrad = property(_haznics.HX_div_data_A_divgrad_get, _haznics.HX_div_data_A_divgrad_set)
    amgparam_curlgrad = property(_haznics.HX_div_data_amgparam_curlgrad_get, _haznics.HX_div_data_amgparam_curlgrad_set)
    mgl_curlgrad = property(_haznics.HX_div_data_mgl_curlgrad_get, _haznics.HX_div_data_mgl_curlgrad_set)
    amgparam_divgrad = property(_haznics.HX_div_data_amgparam_divgrad_get, _haznics.HX_div_data_amgparam_divgrad_set)
    mgl_divgrad = property(_haznics.HX_div_data_mgl_divgrad_get, _haznics.HX_div_data_mgl_divgrad_set)
    Curl = property(_haznics.HX_div_data_Curl_get, _haznics.HX_div_data_Curl_set)
    Curlt = property(_haznics.HX_div_data_Curlt_get, _haznics.HX_div_data_Curlt_set)
    A_grad = property(_haznics.HX_div_data_A_grad_get, _haznics.HX_div_data_A_grad_set)
    A_curl = property(_haznics.HX_div_data_A_curl_get, _haznics.HX_div_data_A_curl_set)
    amgparam_grad = property(_haznics.HX_div_data_amgparam_grad_get, _haznics.HX_div_data_amgparam_grad_set)
    mgl_grad = property(_haznics.HX_div_data_mgl_grad_get, _haznics.HX_div_data_mgl_grad_set)
    backup_r = property(_haznics.HX_div_data_backup_r_get, _haznics.HX_div_data_backup_r_set)
    w = property(_haznics.HX_div_data_w_get, _haznics.HX_div_data_w_set)

    def __init__(self):
        _haznics.HX_div_data_swiginit(self, _haznics.new_HX_div_data())
    __swig_destroy__ = _haznics.delete_HX_div_data

# Register HX_div_data in _haznics:
_haznics.HX_div_data_swigregister(HX_div_data)

class precond_block_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Abcsr = property(_haznics.precond_block_data_Abcsr_get, _haznics.precond_block_data_Abcsr_set)
    A_diag = property(_haznics.precond_block_data_A_diag_get, _haznics.precond_block_data_A_diag_set)
    r = property(_haznics.precond_block_data_r_get, _haznics.precond_block_data_r_set)
    LU_diag = property(_haznics.precond_block_data_LU_diag_get, _haznics.precond_block_data_LU_diag_set)
    diag = property(_haznics.precond_block_data_diag_get, _haznics.precond_block_data_diag_set)
    mgl = property(_haznics.precond_block_data_mgl_get, _haznics.precond_block_data_mgl_set)
    amgparam = property(_haznics.precond_block_data_amgparam_get, _haznics.precond_block_data_amgparam_set)
    bmgl = property(_haznics.precond_block_data_bmgl_get, _haznics.precond_block_data_bmgl_set)
    hxcurldata = property(_haznics.precond_block_data_hxcurldata_get, _haznics.precond_block_data_hxcurldata_set)
    hxdivdata = property(_haznics.precond_block_data_hxdivdata_get, _haznics.precond_block_data_hxdivdata_set)
    el_vol = property(_haznics.precond_block_data_el_vol_get, _haznics.precond_block_data_el_vol_set)
    G = property(_haznics.precond_block_data_G_get, _haznics.precond_block_data_G_set)
    K = property(_haznics.precond_block_data_K_get, _haznics.precond_block_data_K_set)
    Gt = property(_haznics.precond_block_data_Gt_get, _haznics.precond_block_data_Gt_set)
    Kt = property(_haznics.precond_block_data_Kt_get, _haznics.precond_block_data_Kt_set)
    scaled_M = property(_haznics.precond_block_data_scaled_M_get, _haznics.precond_block_data_scaled_M_set)
    diag_scaled_M = property(_haznics.precond_block_data_diag_scaled_M_get, _haznics.precond_block_data_diag_scaled_M_set)
    scaled_alpha = property(_haznics.precond_block_data_scaled_alpha_get, _haznics.precond_block_data_scaled_alpha_set)
    scaled_beta = property(_haznics.precond_block_data_scaled_beta_get, _haznics.precond_block_data_scaled_beta_set)
    poles = property(_haznics.precond_block_data_poles_get, _haznics.precond_block_data_poles_set)
    residues = property(_haznics.precond_block_data_residues_get, _haznics.precond_block_data_residues_set)

    def __init__(self):
        _haznics.precond_block_data_swiginit(self, _haznics.new_precond_block_data())
    __swig_destroy__ = _haznics.delete_precond_block_data

# Register precond_block_data in _haznics:
_haznics.precond_block_data_swigregister(precond_block_data)

class precond_ra_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LU_diag = property(_haznics.precond_ra_data_LU_diag_get, _haznics.precond_ra_data_LU_diag_set)
    mgl = property(_haznics.precond_ra_data_mgl_get, _haznics.precond_ra_data_mgl_set)
    amgparam = property(_haznics.precond_ra_data_amgparam_get, _haznics.precond_ra_data_amgparam_set)
    scaled_A = property(_haznics.precond_ra_data_scaled_A_get, _haznics.precond_ra_data_scaled_A_set)
    scaled_M = property(_haznics.precond_ra_data_scaled_M_get, _haznics.precond_ra_data_scaled_M_set)
    diag_scaled_M = property(_haznics.precond_ra_data_diag_scaled_M_get, _haznics.precond_ra_data_diag_scaled_M_set)
    scaled_alpha = property(_haznics.precond_ra_data_scaled_alpha_get, _haznics.precond_ra_data_scaled_alpha_set)
    scaled_beta = property(_haznics.precond_ra_data_scaled_beta_get, _haznics.precond_ra_data_scaled_beta_set)
    s_power = property(_haznics.precond_ra_data_s_power_get, _haznics.precond_ra_data_s_power_set)
    t_power = property(_haznics.precond_ra_data_t_power_get, _haznics.precond_ra_data_t_power_set)
    poles = property(_haznics.precond_ra_data_poles_get, _haznics.precond_ra_data_poles_set)
    residues = property(_haznics.precond_ra_data_residues_get, _haznics.precond_ra_data_residues_set)
    r = property(_haznics.precond_ra_data_r_get, _haznics.precond_ra_data_r_set)
    w = property(_haznics.precond_ra_data_w_get, _haznics.precond_ra_data_w_set)

    def __init__(self):
        _haznics.precond_ra_data_swiginit(self, _haznics.new_precond_ra_data())
    __swig_destroy__ = _haznics.delete_precond_ra_data

# Register precond_ra_data in _haznics:
_haznics.precond_ra_data_swigregister(precond_ra_data)

class matvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_haznics.matvec_data_get, _haznics.matvec_data_set)
    fct = property(_haznics.matvec_fct_get, _haznics.matvec_fct_set)

    def __init__(self):
        _haznics.matvec_swiginit(self, _haznics.new_matvec())
    __swig_destroy__ = _haznics.delete_matvec

# Register matvec in _haznics:
_haznics.matvec_swigregister(matvec)

class solve_stats(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iteration_count = property(_haznics.solve_stats_iteration_count_get, _haznics.solve_stats_iteration_count_set)
    time_setup = property(_haznics.solve_stats_time_setup_get, _haznics.solve_stats_time_setup_set)
    time_precondition_setup = property(_haznics.solve_stats_time_precondition_setup_get, _haznics.solve_stats_time_precondition_setup_set)
    time_solve = property(_haznics.solve_stats_time_solve_get, _haznics.solve_stats_time_solve_set)
    rho1 = property(_haznics.solve_stats_rho1_get, _haznics.solve_stats_rho1_set)
    rho2 = property(_haznics.solve_stats_rho2_get, _haznics.solve_stats_rho2_set)
    As = property(_haznics.solve_stats_As_get, _haznics.solve_stats_As_set)
    nAs = property(_haznics.solve_stats_nAs_get, _haznics.solve_stats_nAs_set)
    FES = property(_haznics.solve_stats_FES_get, _haznics.solve_stats_FES_set)

    def __init__(self):
        _haznics.solve_stats_swiginit(self, _haznics.new_solve_stats())
    __swig_destroy__ = _haznics.delete_solve_stats

# Register solve_stats in _haznics:
_haznics.solve_stats_swigregister(solve_stats)

class smoother_matvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_haznics.smoother_matvec_type_get, _haznics.smoother_matvec_type_set)
    data = property(_haznics.smoother_matvec_data_get, _haznics.smoother_matvec_data_set)
    fct = property(_haznics.smoother_matvec_fct_get, _haznics.smoother_matvec_fct_set)

    def __init__(self):
        _haznics.smoother_matvec_swiginit(self, _haznics.new_smoother_matvec())
    __swig_destroy__ = _haznics.delete_smoother_matvec

# Register smoother_matvec in _haznics:
_haznics.smoother_matvec_swigregister(smoother_matvec)

class smoother_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    istart = property(_haznics.smoother_data_istart_get, _haznics.smoother_data_istart_set)
    iend = property(_haznics.smoother_data_iend_get, _haznics.smoother_data_iend_set)
    istep = property(_haznics.smoother_data_istep_get, _haznics.smoother_data_istep_set)
    nsweeps = property(_haznics.smoother_data_nsweeps_get, _haznics.smoother_data_nsweeps_set)
    relax = property(_haznics.smoother_data_relax_get, _haznics.smoother_data_relax_set)
    A = property(_haznics.smoother_data_A_get, _haznics.smoother_data_A_set)

    def __init__(self):
        _haznics.smoother_data_swiginit(self, _haznics.new_smoother_data())
    __swig_destroy__ = _haznics.delete_smoother_data

# Register smoother_data in _haznics:
_haznics.smoother_data_swigregister(smoother_data)

class newton(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isblock = property(_haznics.newton_isblock_get, _haznics.newton_isblock_set)
    max_steps = property(_haznics.newton_max_steps_get, _haznics.newton_max_steps_set)
    current_step = property(_haznics.newton_current_step_get, _haznics.newton_current_step_set)
    tol_type = property(_haznics.newton_tol_type_get, _haznics.newton_tol_type_set)
    tol = property(_haznics.newton_tol_get, _haznics.newton_tol_set)
    step_length = property(_haznics.newton_step_length_get, _haznics.newton_step_length_set)
    Jac = property(_haznics.newton_Jac_get, _haznics.newton_Jac_set)
    Jac_block = property(_haznics.newton_Jac_block_get, _haznics.newton_Jac_block_set)
    sol_prev = property(_haznics.newton_sol_prev_get, _haznics.newton_sol_prev_set)
    sol = property(_haznics.newton_sol_get, _haznics.newton_sol_set)
    update = property(_haznics.newton_update_get, _haznics.newton_update_set)
    rhs = property(_haznics.newton_rhs_get, _haznics.newton_rhs_set)
    res_norm = property(_haznics.newton_res_norm_get, _haznics.newton_res_norm_set)
    update_norm = property(_haznics.newton_update_norm_get, _haznics.newton_update_norm_set)

    def __init__(self):
        _haznics.newton_swiginit(self, _haznics.new_newton())
    __swig_destroy__ = _haznics.delete_newton

# Register newton in _haznics:
_haznics.newton_swigregister(newton)

class timestepper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tsteps = property(_haznics.timestepper_tsteps_get, _haznics.timestepper_tsteps_set)
    dt = property(_haznics.timestepper_dt_get, _haznics.timestepper_dt_set)
    time_scheme = property(_haznics.timestepper_time_scheme_get, _haznics.timestepper_time_scheme_set)
    time_scheme_str = property(_haznics.timestepper_time_scheme_str_get, _haznics.timestepper_time_scheme_str_set)
    old_steps = property(_haznics.timestepper_old_steps_get, _haznics.timestepper_old_steps_set)
    rhs_timedep = property(_haznics.timestepper_rhs_timedep_get, _haznics.timestepper_rhs_timedep_set)
    current_step = property(_haznics.timestepper_current_step_get, _haznics.timestepper_current_step_set)
    time = property(_haznics.timestepper_time_get, _haznics.timestepper_time_set)
    M = property(_haznics.timestepper_M_get, _haznics.timestepper_M_set)
    A = property(_haznics.timestepper_A_get, _haznics.timestepper_A_set)
    L = property(_haznics.timestepper_L_get, _haznics.timestepper_L_set)
    Ldata = property(_haznics.timestepper_Ldata_get, _haznics.timestepper_Ldata_set)
    At = property(_haznics.timestepper_At_get, _haznics.timestepper_At_set)
    At_noBC = property(_haznics.timestepper_At_noBC_get, _haznics.timestepper_At_noBC_set)
    sol_prev = property(_haznics.timestepper_sol_prev_get, _haznics.timestepper_sol_prev_set)
    sol = property(_haznics.timestepper_sol_get, _haznics.timestepper_sol_set)
    rhs = property(_haznics.timestepper_rhs_get, _haznics.timestepper_rhs_set)
    rhs_prev = property(_haznics.timestepper_rhs_prev_get, _haznics.timestepper_rhs_prev_set)
    rhs_time = property(_haznics.timestepper_rhs_time_get, _haznics.timestepper_rhs_time_set)

    def __init__(self):
        _haznics.timestepper_swiginit(self, _haznics.new_timestepper())
    __swig_destroy__ = _haznics.delete_timestepper

# Register timestepper in _haznics:
_haznics.timestepper_swigregister(timestepper)

class block_timestepper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tsteps = property(_haznics.block_timestepper_tsteps_get, _haznics.block_timestepper_tsteps_set)
    dt = property(_haznics.block_timestepper_dt_get, _haznics.block_timestepper_dt_set)
    time_scheme = property(_haznics.block_timestepper_time_scheme_get, _haznics.block_timestepper_time_scheme_set)
    time_scheme_str = property(_haznics.block_timestepper_time_scheme_str_get, _haznics.block_timestepper_time_scheme_str_set)
    old_steps = property(_haznics.block_timestepper_old_steps_get, _haznics.block_timestepper_old_steps_set)
    rhs_timedep = property(_haznics.block_timestepper_rhs_timedep_get, _haznics.block_timestepper_rhs_timedep_set)
    current_step = property(_haznics.block_timestepper_current_step_get, _haznics.block_timestepper_current_step_set)
    time = property(_haznics.block_timestepper_time_get, _haznics.block_timestepper_time_set)
    M = property(_haznics.block_timestepper_M_get, _haznics.block_timestepper_M_set)
    A = property(_haznics.block_timestepper_A_get, _haznics.block_timestepper_A_set)
    L = property(_haznics.block_timestepper_L_get, _haznics.block_timestepper_L_set)
    Ldata = property(_haznics.block_timestepper_Ldata_get, _haznics.block_timestepper_Ldata_set)
    At = property(_haznics.block_timestepper_At_get, _haznics.block_timestepper_At_set)
    At_noBC = property(_haznics.block_timestepper_At_noBC_get, _haznics.block_timestepper_At_noBC_set)
    sol_prev = property(_haznics.block_timestepper_sol_prev_get, _haznics.block_timestepper_sol_prev_set)
    sol = property(_haznics.block_timestepper_sol_get, _haznics.block_timestepper_sol_set)
    rhs = property(_haznics.block_timestepper_rhs_get, _haznics.block_timestepper_rhs_set)
    rhs_prev = property(_haznics.block_timestepper_rhs_prev_get, _haznics.block_timestepper_rhs_prev_set)
    rhs_time = property(_haznics.block_timestepper_rhs_time_get, _haznics.block_timestepper_rhs_time_set)

    def __init__(self):
        _haznics.block_timestepper_swiginit(self, _haznics.new_block_timestepper())
    __swig_destroy__ = _haznics.delete_block_timestepper

# Register block_timestepper in _haznics:
_haznics.block_timestepper_swigregister(block_timestepper)

class input_param(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    print_level = property(_haznics.input_param_print_level_get, _haznics.input_param_print_level_set)
    inifile = property(_haznics.input_param_inifile_get, _haznics.input_param_inifile_set)
    gridfile = property(_haznics.input_param_gridfile_get, _haznics.input_param_gridfile_set)
    output_dir = property(_haznics.input_param_output_dir_get, _haznics.input_param_output_dir_set)
    nquad = property(_haznics.input_param_nquad_get, _haznics.input_param_nquad_set)
    FE_type = property(_haznics.input_param_FE_type_get, _haznics.input_param_FE_type_set)
    Mass_lump = property(_haznics.input_param_Mass_lump_get, _haznics.input_param_Mass_lump_set)
    time_start = property(_haznics.input_param_time_start_get, _haznics.input_param_time_start_set)
    time_step_type = property(_haznics.input_param_time_step_type_get, _haznics.input_param_time_step_type_set)
    time_steps = property(_haznics.input_param_time_steps_get, _haznics.input_param_time_steps_set)
    time_step_size = property(_haznics.input_param_time_step_size_get, _haznics.input_param_time_step_size_set)
    rhs_time_dep = property(_haznics.input_param_rhs_time_dep_get, _haznics.input_param_rhs_time_dep_set)
    nonlinear_itsolver_type = property(_haznics.input_param_nonlinear_itsolver_type_get, _haznics.input_param_nonlinear_itsolver_type_set)
    nonlinear_itsolver_maxit = property(_haznics.input_param_nonlinear_itsolver_maxit_get, _haznics.input_param_nonlinear_itsolver_maxit_set)
    nonlinear_itsolver_tol = property(_haznics.input_param_nonlinear_itsolver_tol_get, _haznics.input_param_nonlinear_itsolver_tol_set)
    nonlinear_itsolver_toltype = property(_haznics.input_param_nonlinear_itsolver_toltype_get, _haznics.input_param_nonlinear_itsolver_toltype_set)
    linear_itsolver_type = property(_haznics.input_param_linear_itsolver_type_get, _haznics.input_param_linear_itsolver_type_set)
    linear_itsolver_maxit = property(_haznics.input_param_linear_itsolver_maxit_get, _haznics.input_param_linear_itsolver_maxit_set)
    linear_itsolver_tol = property(_haznics.input_param_linear_itsolver_tol_get, _haznics.input_param_linear_itsolver_tol_set)
    linear_stop_type = property(_haznics.input_param_linear_stop_type_get, _haznics.input_param_linear_stop_type_set)
    linear_restart = property(_haznics.input_param_linear_restart_get, _haznics.input_param_linear_restart_set)
    linear_precond_type = property(_haznics.input_param_linear_precond_type_get, _haznics.input_param_linear_precond_type_set)
    Schwarz_mmsize = property(_haznics.input_param_Schwarz_mmsize_get, _haznics.input_param_Schwarz_mmsize_set)
    Schwarz_maxlvl = property(_haznics.input_param_Schwarz_maxlvl_get, _haznics.input_param_Schwarz_maxlvl_set)
    Schwarz_type = property(_haznics.input_param_Schwarz_type_get, _haznics.input_param_Schwarz_type_set)
    Schwarz_blksolver = property(_haznics.input_param_Schwarz_blksolver_get, _haznics.input_param_Schwarz_blksolver_set)
    AMG_type = property(_haznics.input_param_AMG_type_get, _haznics.input_param_AMG_type_set)
    AMG_levels = property(_haznics.input_param_AMG_levels_get, _haznics.input_param_AMG_levels_set)
    AMG_cycle_type = property(_haznics.input_param_AMG_cycle_type_get, _haznics.input_param_AMG_cycle_type_set)
    AMG_smoother = property(_haznics.input_param_AMG_smoother_get, _haznics.input_param_AMG_smoother_set)
    AMG_relaxation = property(_haznics.input_param_AMG_relaxation_get, _haznics.input_param_AMG_relaxation_set)
    AMG_presmooth_iter = property(_haznics.input_param_AMG_presmooth_iter_get, _haznics.input_param_AMG_presmooth_iter_set)
    AMG_postsmooth_iter = property(_haznics.input_param_AMG_postsmooth_iter_get, _haznics.input_param_AMG_postsmooth_iter_set)
    AMG_polynomial_degree = property(_haznics.input_param_AMG_polynomial_degree_get, _haznics.input_param_AMG_polynomial_degree_set)
    AMG_coarse_dof = property(_haznics.input_param_AMG_coarse_dof_get, _haznics.input_param_AMG_coarse_dof_set)
    AMG_tol = property(_haznics.input_param_AMG_tol_get, _haznics.input_param_AMG_tol_set)
    AMG_maxit = property(_haznics.input_param_AMG_maxit_get, _haznics.input_param_AMG_maxit_set)
    AMG_coarse_solver = property(_haznics.input_param_AMG_coarse_solver_get, _haznics.input_param_AMG_coarse_solver_set)
    AMG_coarse_scaling = property(_haznics.input_param_AMG_coarse_scaling_get, _haznics.input_param_AMG_coarse_scaling_set)
    AMG_amli_degree = property(_haznics.input_param_AMG_amli_degree_get, _haznics.input_param_AMG_amli_degree_set)
    AMG_nl_amli_krylov_type = property(_haznics.input_param_AMG_nl_amli_krylov_type_get, _haznics.input_param_AMG_nl_amli_krylov_type_set)
    AMG_Schwarz_levels = property(_haznics.input_param_AMG_Schwarz_levels_get, _haznics.input_param_AMG_Schwarz_levels_set)
    AMG_fpwr = property(_haznics.input_param_AMG_fpwr_get, _haznics.input_param_AMG_fpwr_set)
    AMG_aggregation_type = property(_haznics.input_param_AMG_aggregation_type_get, _haznics.input_param_AMG_aggregation_type_set)
    AMG_strong_coupled = property(_haznics.input_param_AMG_strong_coupled_get, _haznics.input_param_AMG_strong_coupled_set)
    AMG_max_aggregation = property(_haznics.input_param_AMG_max_aggregation_get, _haznics.input_param_AMG_max_aggregation_set)
    AMG_smooth_filter = property(_haznics.input_param_AMG_smooth_filter_get, _haznics.input_param_AMG_smooth_filter_set)
    AMG_tentative_smooth = property(_haznics.input_param_AMG_tentative_smooth_get, _haznics.input_param_AMG_tentative_smooth_set)
    HX_smooth_iter = property(_haznics.input_param_HX_smooth_iter_get, _haznics.input_param_HX_smooth_iter_set)
    BSR_alpha = property(_haznics.input_param_BSR_alpha_get, _haznics.input_param_BSR_alpha_set)
    BSR_omega = property(_haznics.input_param_BSR_omega_get, _haznics.input_param_BSR_omega_set)

    def __init__(self):
        _haznics.input_param_swiginit(self, _haznics.new_input_param())
    __swig_destroy__ = _haznics.delete_input_param

# Register input_param in _haznics:
_haznics.input_param_swigregister(input_param)

class linear_itsolver_param(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    linear_itsolver_type = property(_haznics.linear_itsolver_param_linear_itsolver_type_get, _haznics.linear_itsolver_param_linear_itsolver_type_set)
    linear_precond_type = property(_haznics.linear_itsolver_param_linear_precond_type_get, _haznics.linear_itsolver_param_linear_precond_type_set)
    linear_stop_type = property(_haznics.linear_itsolver_param_linear_stop_type_get, _haznics.linear_itsolver_param_linear_stop_type_set)
    linear_maxit = property(_haznics.linear_itsolver_param_linear_maxit_get, _haznics.linear_itsolver_param_linear_maxit_set)
    linear_tol = property(_haznics.linear_itsolver_param_linear_tol_get, _haznics.linear_itsolver_param_linear_tol_set)
    linear_restart = property(_haznics.linear_itsolver_param_linear_restart_get, _haznics.linear_itsolver_param_linear_restart_set)
    linear_print_level = property(_haznics.linear_itsolver_param_linear_print_level_get, _haznics.linear_itsolver_param_linear_print_level_set)
    HX_smooth_iter = property(_haznics.linear_itsolver_param_HX_smooth_iter_get, _haznics.linear_itsolver_param_HX_smooth_iter_set)
    AL_scaling_param = property(_haznics.linear_itsolver_param_AL_scaling_param_get, _haznics.linear_itsolver_param_AL_scaling_param_set)

    def __init__(self):
        _haznics.linear_itsolver_param_swiginit(self, _haznics.new_linear_itsolver_param())
    __swig_destroy__ = _haznics.delete_linear_itsolver_param

# Register linear_itsolver_param in _haznics:
_haznics.linear_itsolver_param_swigregister(linear_itsolver_param)

class AMG_param(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AMG_type = property(_haznics.AMG_param_AMG_type_get, _haznics.AMG_param_AMG_type_set)
    print_level = property(_haznics.AMG_param_print_level_get, _haznics.AMG_param_print_level_set)
    maxit = property(_haznics.AMG_param_maxit_get, _haznics.AMG_param_maxit_set)
    tol = property(_haznics.AMG_param_tol_get, _haznics.AMG_param_tol_set)
    max_levels = property(_haznics.AMG_param_max_levels_get, _haznics.AMG_param_max_levels_set)
    coarse_dof = property(_haznics.AMG_param_coarse_dof_get, _haznics.AMG_param_coarse_dof_set)
    cycle_type = property(_haznics.AMG_param_cycle_type_get, _haznics.AMG_param_cycle_type_set)
    smoother = property(_haznics.AMG_param_smoother_get, _haznics.AMG_param_smoother_set)
    presmooth_iter = property(_haznics.AMG_param_presmooth_iter_get, _haznics.AMG_param_presmooth_iter_set)
    postsmooth_iter = property(_haznics.AMG_param_postsmooth_iter_get, _haznics.AMG_param_postsmooth_iter_set)
    relaxation = property(_haznics.AMG_param_relaxation_get, _haznics.AMG_param_relaxation_set)
    polynomial_degree = property(_haznics.AMG_param_polynomial_degree_get, _haznics.AMG_param_polynomial_degree_set)
    coarse_solver = property(_haznics.AMG_param_coarse_solver_get, _haznics.AMG_param_coarse_solver_set)
    coarse_scaling = property(_haznics.AMG_param_coarse_scaling_get, _haznics.AMG_param_coarse_scaling_set)
    amli_degree = property(_haznics.AMG_param_amli_degree_get, _haznics.AMG_param_amli_degree_set)
    amli_coef = property(_haznics.AMG_param_amli_coef_get, _haznics.AMG_param_amli_coef_set)
    nl_amli_krylov_type = property(_haznics.AMG_param_nl_amli_krylov_type_get, _haznics.AMG_param_nl_amli_krylov_type_set)
    aggregation_type = property(_haznics.AMG_param_aggregation_type_get, _haznics.AMG_param_aggregation_type_set)
    strong_coupled = property(_haznics.AMG_param_strong_coupled_get, _haznics.AMG_param_strong_coupled_set)
    max_aggregation = property(_haznics.AMG_param_max_aggregation_get, _haznics.AMG_param_max_aggregation_set)
    smooth_filter = property(_haznics.AMG_param_smooth_filter_get, _haznics.AMG_param_smooth_filter_set)
    tentative_smooth = property(_haznics.AMG_param_tentative_smooth_get, _haznics.AMG_param_tentative_smooth_set)
    Schwarz_levels = property(_haznics.AMG_param_Schwarz_levels_get, _haznics.AMG_param_Schwarz_levels_set)
    Schwarz_mmsize = property(_haznics.AMG_param_Schwarz_mmsize_get, _haznics.AMG_param_Schwarz_mmsize_set)
    Schwarz_maxlvl = property(_haznics.AMG_param_Schwarz_maxlvl_get, _haznics.AMG_param_Schwarz_maxlvl_set)
    Schwarz_type = property(_haznics.AMG_param_Schwarz_type_get, _haznics.AMG_param_Schwarz_type_set)
    Schwarz_blksolver = property(_haznics.AMG_param_Schwarz_blksolver_get, _haznics.AMG_param_Schwarz_blksolver_set)
    HAZDIR = property(_haznics.AMG_param_HAZDIR_get, _haznics.AMG_param_HAZDIR_set)
    Schwarz_on_blk = property(_haznics.AMG_param_Schwarz_on_blk_get, _haznics.AMG_param_Schwarz_on_blk_set)
    Schwarz_patch_type = property(_haznics.AMG_param_Schwarz_patch_type_get, _haznics.AMG_param_Schwarz_patch_type_set)
    damping_param = property(_haznics.AMG_param_damping_param_get, _haznics.AMG_param_damping_param_set)
    BSR_alpha = property(_haznics.AMG_param_BSR_alpha_get, _haznics.AMG_param_BSR_alpha_set)
    BSR_omega = property(_haznics.AMG_param_BSR_omega_get, _haznics.AMG_param_BSR_omega_set)
    fpwr = property(_haznics.AMG_param_fpwr_get, _haznics.AMG_param_fpwr_set)
    smoother_function = property(_haznics.AMG_param_smoother_function_get, _haznics.AMG_param_smoother_function_set)

    def __init__(self):
        _haznics.AMG_param_swiginit(self, _haznics.new_AMG_param())
    __swig_destroy__ = _haznics.delete_AMG_param

# Register AMG_param in _haznics:
_haznics.AMG_param_swigregister(AMG_param)

class GMG_param(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AMG_type = property(_haznics.GMG_param_AMG_type_get, _haznics.GMG_param_AMG_type_set)
    print_level = property(_haznics.GMG_param_print_level_get, _haznics.GMG_param_print_level_set)
    maxit = property(_haznics.GMG_param_maxit_get, _haznics.GMG_param_maxit_set)
    tol = property(_haznics.GMG_param_tol_get, _haznics.GMG_param_tol_set)
    max_levels = property(_haznics.GMG_param_max_levels_get, _haznics.GMG_param_max_levels_set)
    coarse_dof = property(_haznics.GMG_param_coarse_dof_get, _haznics.GMG_param_coarse_dof_set)
    cycle_type = property(_haznics.GMG_param_cycle_type_get, _haznics.GMG_param_cycle_type_set)
    smoother = property(_haznics.GMG_param_smoother_get, _haznics.GMG_param_smoother_set)
    presmooth_iter = property(_haznics.GMG_param_presmooth_iter_get, _haznics.GMG_param_presmooth_iter_set)
    postsmooth_iter = property(_haznics.GMG_param_postsmooth_iter_get, _haznics.GMG_param_postsmooth_iter_set)
    relaxation = property(_haznics.GMG_param_relaxation_get, _haznics.GMG_param_relaxation_set)
    polynomial_degree = property(_haznics.GMG_param_polynomial_degree_get, _haznics.GMG_param_polynomial_degree_set)
    coarse_solver = property(_haznics.GMG_param_coarse_solver_get, _haznics.GMG_param_coarse_solver_set)
    coarse_scaling = property(_haznics.GMG_param_coarse_scaling_get, _haznics.GMG_param_coarse_scaling_set)
    amli_degree = property(_haznics.GMG_param_amli_degree_get, _haznics.GMG_param_amli_degree_set)
    amli_coef = property(_haznics.GMG_param_amli_coef_get, _haznics.GMG_param_amli_coef_set)
    nl_amli_krylov_type = property(_haznics.GMG_param_nl_amli_krylov_type_get, _haznics.GMG_param_nl_amli_krylov_type_set)
    aggregation_type = property(_haznics.GMG_param_aggregation_type_get, _haznics.GMG_param_aggregation_type_set)
    strong_coupled = property(_haznics.GMG_param_strong_coupled_get, _haznics.GMG_param_strong_coupled_set)
    max_aggregation = property(_haznics.GMG_param_max_aggregation_get, _haznics.GMG_param_max_aggregation_set)
    smooth_filter = property(_haznics.GMG_param_smooth_filter_get, _haznics.GMG_param_smooth_filter_set)
    tentative_smooth = property(_haznics.GMG_param_tentative_smooth_get, _haznics.GMG_param_tentative_smooth_set)
    Schwarz_levels = property(_haznics.GMG_param_Schwarz_levels_get, _haznics.GMG_param_Schwarz_levels_set)
    Schwarz_mmsize = property(_haznics.GMG_param_Schwarz_mmsize_get, _haznics.GMG_param_Schwarz_mmsize_set)
    Schwarz_maxlvl = property(_haznics.GMG_param_Schwarz_maxlvl_get, _haznics.GMG_param_Schwarz_maxlvl_set)
    Schwarz_type = property(_haznics.GMG_param_Schwarz_type_get, _haznics.GMG_param_Schwarz_type_set)
    Schwarz_blksolver = property(_haznics.GMG_param_Schwarz_blksolver_get, _haznics.GMG_param_Schwarz_blksolver_set)

    def __init__(self):
        _haznics.GMG_param_swiginit(self, _haznics.new_GMG_param())
    __swig_destroy__ = _haznics.delete_GMG_param

# Register GMG_param in _haznics:
_haznics.GMG_param_swigregister(GMG_param)

class Schwarz_param(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    print_level = property(_haznics.Schwarz_param_print_level_get, _haznics.Schwarz_param_print_level_set)
    Schwarz_type = property(_haznics.Schwarz_param_Schwarz_type_get, _haznics.Schwarz_param_Schwarz_type_set)
    Schwarz_maxlvl = property(_haznics.Schwarz_param_Schwarz_maxlvl_get, _haznics.Schwarz_param_Schwarz_maxlvl_set)
    Schwarz_mmsize = property(_haznics.Schwarz_param_Schwarz_mmsize_get, _haznics.Schwarz_param_Schwarz_mmsize_set)
    Schwarz_blksolver = property(_haznics.Schwarz_param_Schwarz_blksolver_get, _haznics.Schwarz_param_Schwarz_blksolver_set)
    patch_type_gmg = property(_haznics.Schwarz_param_patch_type_gmg_get, _haznics.Schwarz_param_patch_type_gmg_set)

    def __init__(self):
        _haznics.Schwarz_param_swiginit(self, _haznics.new_Schwarz_param())
    __swig_destroy__ = _haznics.delete_Schwarz_param

# Register Schwarz_param in _haznics:
_haznics.Schwarz_param_swigregister(Schwarz_param)

class weights(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    val = property(_haznics.weights_val_get, _haznics.weights_val_set)
    id = property(_haznics.weights_id_get, _haznics.weights_id_set)

    def __init__(self):
        _haznics.weights_swiginit(self, _haznics.new_weights())
    __swig_destroy__ = _haznics.delete_weights

# Register weights in _haznics:
_haznics.weights_swigregister(weights)

class iweights(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mask = property(_haznics.iweights_mask_get, _haznics.iweights_mask_set)
    val = property(_haznics.iweights_val_get, _haznics.iweights_val_set)
    id = property(_haznics.iweights_id_get, _haznics.iweights_id_set)

    def __init__(self):
        _haznics.iweights_swiginit(self, _haznics.new_iweights())
    __swig_destroy__ = _haznics.delete_iweights

# Register iweights in _haznics:
_haznics.iweights_swigregister(iweights)


def assemble_global(A: "dCSRmat", b: "dvector", local_assembly: "void (*)(double *,fespace *,mesh_struct *,qcoordinates *,int *,int *,int,void (*)(double *,double *,double,void *),double)", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", rhs: "void (*)(double *,double *,double,void *)", coeff: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.assemble_global(A, b, local_assembly, FE, mesh, cq, rhs, coeff, time)

def assemble_global_withBC(A: "dCSRmat", b: "dvector", local_assembly: "void (*)(double *,fespace *,mesh_struct *,qcoordinates *,int *,int *,int,void (*)(double *,double *,double,void *),double)", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", rhs: "void (*)(double *,double *,double,void *)", bc: "void (*)(double *,double *,double,void *)", coeff: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.assemble_global_withBC(A, b, local_assembly, FE, mesh, cq, rhs, bc, coeff, time)

def assemble_global_FE1FE2(A: "dCSRmat", b: "dvector", local_assembly: "void (*)(double *,fespace *,fespace *,mesh_struct *,qcoordinates *,int *,int *,int *,int,void (*)(double *,double *,double,void *),double)", FE1: "fespace", FE2: "fespace", mesh: "mesh_struct", cq: "qcoordinates", rhs: "void (*)(double *,double *,double,void *)", coeff: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.assemble_global_FE1FE2(A, b, local_assembly, FE1, FE2, mesh, cq, rhs, coeff, time)

def assemble_global_block(A: "block_dCSRmat", b: "dvector", local_assembly: "void (*)(double *,block_fespace *,mesh_struct *,qcoordinates *,int *,int *,int,double)", local_rhs_assembly: "void (*)(double *,block_fespace *,mesh_struct *,qcoordinates *,int *,int *,int,void (*)(double *,double *,double,void *),double)", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates", rhs: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.assemble_global_block(A, b, local_assembly, local_rhs_assembly, FE, mesh, cq, rhs, time)

def assemble_global_Jacobian(A: "block_dCSRmat", b: "dvector", old_sol: "dvector", local_assembly: "void (*)(double *,double *,dvector *,block_fespace *,mesh_struct *,qcoordinates *,int *,int *,int,void (*)(double *,double *,double,void *),double)", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates", rhs: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.assemble_global_Jacobian(A, b, old_sol, local_assembly, FE, mesh, cq, rhs, time)

def assemble_global_RHS(b: "dvector", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", rhs: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.assemble_global_RHS(b, FE, mesh, cq, rhs, time)

def assemble_global_RHS_block(b: "dvector", local_rhs_assembly: "void (*)(double *,block_fespace *,mesh_struct *,qcoordinates *,int *,int *,int,void (*)(double *,double *,double,void *),double)", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates", rhs: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.assemble_global_RHS_block(b, local_rhs_assembly, FE, mesh, cq, rhs, time)

def assemble_global_RHS_Jacobian(b: "dvector", old_sol: "dvector", local_rhs_assembly: "void (*)(double *,dvector *,block_fespace *,mesh_struct *,qcoordinates *,int *,int *,int,void (*)(double *,double *,double,void *),double)", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates", rhs: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.assemble_global_RHS_Jacobian(b, old_sol, local_rhs_assembly, FE, mesh, cq, rhs, time)

def assemble_global_face(A: "dCSRmat", b: "dvector", old_sol: "dvector", local_assembly_face: "void (*)(double *,dvector *,fespace *,mesh_struct *,qcoordinates *,int *,int *,int *,int,int,void (*)(double *,double *,double,void *),double)", local_rhs_assembly_face: "void (*)(double *,dvector *,fespace *,mesh_struct *,qcoordinates *,int *,int *,int *,int,int,void (*)(double *,double *,double,void *),double)", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", coeff: "void (*)(double *,double *,double,void *)", rhs: "void (*)(double *,double *,double,void *)", time: "double", flag0: "int", flag1: "int") -> "void":
    return _haznics.assemble_global_face(A, b, old_sol, local_assembly_face, local_rhs_assembly_face, FE, mesh, cq, coeff, rhs, time, flag0, flag1)

def assemble_global_RHS_face(b: "dvector", old_sol: "dvector", local_rhs_assembly_face: "void (*)(double *,dvector *,fespace *,mesh_struct *,qcoordinates *,int *,int *,int *,int,int,int,void (*)(double *,double *,double,void *),double)", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", rhs: "void (*)(double *,double *,double,void *)", time: "double", flag0: "int", flag1: "int") -> "void":
    return _haznics.assemble_global_RHS_face(b, old_sol, local_rhs_assembly_face, FE, mesh, cq, rhs, time, flag0, flag1)

def assemble_global_face_block(A: "block_dCSRmat", b: "dvector", old_sol: "dvector", local_assembly_face: "void (*)(double *,dvector *,block_fespace *,mesh_struct *,qcoordinates *,int *,int *,int *,int,int,int,void (*)(double *,double *,double,void *),double)", local_rhs_assembly_face: "void (*)(double *,dvector *,block_fespace *,mesh_struct *,qcoordinates *,int *,int *,int *,int,int,int,void (*)(double *,double *,double,void *),double)", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates", coeff: "void (*)(double *,double *,double,void *)", rhs: "void (*)(double *,double *,double,void *)", time: "double", flag0: "int", flag1: "int") -> "void":
    return _haznics.assemble_global_face_block(A, b, old_sol, local_assembly_face, local_rhs_assembly_face, FE, mesh, cq, coeff, rhs, time, flag0, flag1)

def assemble_global_RHS_face_block(b: "dvector", old_sol: "dvector", local_rhs_assembly_face: "void (*)(double *,dvector *,block_fespace *,mesh_struct *,qcoordinates *,int *,int *,int *,int,int,int,void (*)(double *,double *,double,void *),double)", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates", rhs: "void (*)(double *,double *,double,void *)", time: "double", flag0: "int", flag1: "int") -> "void":
    return _haznics.assemble_global_RHS_face_block(b, old_sol, local_rhs_assembly_face, FE, mesh, cq, rhs, time, flag0, flag1)

def assemble_global_Ned_GradH1_RHS(b: "dvector", FE_H1: "fespace", FE_Ned: "fespace", mesh: "mesh_struct", cq: "qcoordinates", u: "dvector") -> "void":
    return _haznics.assemble_global_Ned_GradH1_RHS(b, FE_H1, FE_Ned, mesh, cq, u)

def assemble_DuDv_local(ALoc: "double *", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", dof_on_elm: "int *", v_on_elm: "int *", elm: "int", coeff: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.assemble_DuDv_local(ALoc, FE, mesh, cq, dof_on_elm, v_on_elm, elm, coeff, time)

def assemble_mass_local(MLoc: "double *", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", dof_on_elm: "int *", v_on_elm: "int *", elm: "int", coeff: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.assemble_mass_local(MLoc, FE, mesh, cq, dof_on_elm, v_on_elm, elm, coeff, time)

def assemble_DuDvplusmass_local(ALoc: "double *", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", dof_on_elm: "int *", v_on_elm: "int *", elm: "int", coeff: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.assemble_DuDvplusmass_local(ALoc, FE, mesh, cq, dof_on_elm, v_on_elm, elm, coeff, time)

def assemble_symmetricDuDv_local(ALoc: "double *", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates", dof_on_elm: "int *", v_on_elm: "int *", elm: "int", time: "double") -> "void":
    return _haznics.assemble_symmetricDuDv_local(ALoc, FE, mesh, cq, dof_on_elm, v_on_elm, elm, time)

def boundary_mass_local(MLoc: "double *", old_sol: "dvector", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", dof_on_f: "int *", dof_on_elm: "int *", v_on_elm: "int *", face: "int", elm: "int", coeff: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.boundary_mass_local(MLoc, old_sol, FE, mesh, cq, dof_on_f, dof_on_elm, v_on_elm, face, elm, coeff, time)

def FEM_RHS_Local(bLoc: "double *", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", dof_on_elm: "int *", v_on_elm: "int *", elm: "int", rhs: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.FEM_RHS_Local(bLoc, FE, mesh, cq, dof_on_elm, v_on_elm, elm, rhs, time)

def FEM_Block_RHS_Local(bLoc: "double *", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates", dof_on_elm: "int *", v_on_elm: "int *", elm: "int", rhs: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.FEM_Block_RHS_Local(bLoc, FE, mesh, cq, dof_on_elm, v_on_elm, elm, rhs, time)

def Ned_GradH1_RHS_local(bLoc: "double *", FE_H1: "fespace", FE_Ned: "fespace", mesh: "mesh_struct", cq: "qcoordinates", ed_on_elm: "int *", v_on_elm: "int *", elm: "int", u: "dvector") -> "void":
    return _haznics.Ned_GradH1_RHS_local(bLoc, FE_H1, FE_Ned, mesh, cq, ed_on_elm, v_on_elm, elm, u)

def FEM_RHS_Local_face(bLoc: "double *", old_sol: "dvector", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", dof_on_f: "int *", dof_on_elm: "int *", v_on_elm: "int *", dof_per_face: "int", face: "int", elm: "int", rhs: "void (*)(double *,double *,double,void *)", time: "double") -> "void":
    return _haznics.FEM_RHS_Local_face(bLoc, old_sol, FE, mesh, cq, dof_on_f, dof_on_elm, v_on_elm, dof_per_face, face, elm, rhs, time)

def create_CSR_rows(A: "dCSRmat", FE: "fespace") -> "void":
    return _haznics.create_CSR_rows(A, FE)

def create_CSR_rows_FE1FE2(A: "dCSRmat", FE1: "fespace", FE2: "fespace") -> "void":
    return _haznics.create_CSR_rows_FE1FE2(A, FE1, FE2)

def create_CSR_rows_withBC(A: "dCSRmat", FE: "fespace") -> "void":
    return _haznics.create_CSR_rows_withBC(A, FE)

def create_CSR_rows_flag(A: "dCSRmat", FE: "fespace", flag0: "int", flag1: "int") -> "void":
    return _haznics.create_CSR_rows_flag(A, FE, flag0, flag1)

def create_CSR_cols(A: "dCSRmat", FE: "fespace") -> "void":
    return _haznics.create_CSR_cols(A, FE)

def create_CSR_cols_FE1FE2(A: "dCSRmat", FE1: "fespace", FE2: "fespace") -> "void":
    return _haznics.create_CSR_cols_FE1FE2(A, FE1, FE2)

def create_CSR_cols_withBC(A: "dCSRmat", FE: "fespace") -> "void":
    return _haznics.create_CSR_cols_withBC(A, FE)

def create_CSR_cols_flag(A: "dCSRmat", FE: "fespace", flag0: "int", flag1: "int") -> "void":
    return _haznics.create_CSR_cols_flag(A, FE, flag0, flag1)

def LocaltoGlobal(dof_on_elm: "int *", FE: "fespace", b: "dvector", A: "dCSRmat", ALoc: "double *", bLoc: "double *") -> "void":
    return _haznics.LocaltoGlobal(dof_on_elm, FE, b, A, ALoc, bLoc)

def LocaltoGlobal_FE1FE2(dof_on_elm1: "int *", FE1: "fespace", dof_on_elm2: "int *", FE2: "fespace", b: "dvector", A: "dCSRmat", ALoc: "double *", bLoc: "double *") -> "void":
    return _haznics.LocaltoGlobal_FE1FE2(dof_on_elm1, FE1, dof_on_elm2, FE2, b, A, ALoc, bLoc)

def block_LocaltoGlobal(dof_on_elm: "int *", FE: "block_fespace", b: "dvector", A: "block_dCSRmat", ALoc: "double *", bLoc: "double *") -> "void":
    return _haznics.block_LocaltoGlobal(dof_on_elm, FE, b, A, ALoc, bLoc)

def LocaltoGlobal_withBC(dof_on_elm: "int *", FE: "fespace", b: "dvector", A: "dCSRmat", ALoc: "double *", bLoc: "double *") -> "void":
    return _haznics.LocaltoGlobal_withBC(dof_on_elm, FE, b, A, ALoc, bLoc)

def LocaltoGlobal_face(dof_on_f: "int *", dof_per_f: "int", FE: "fespace", b: "dvector", A: "dCSRmat", ALoc: "double *", bLoc: "double *", flag0: "int", flag1: "int") -> "void":
    return _haznics.LocaltoGlobal_face(dof_on_f, dof_per_f, FE, b, A, ALoc, bLoc, flag0, flag1)

def block_LocaltoGlobal_face(dof_on_f: "int *", dof_per_f: "int", dof_per_face_blk: "int *", FE: "block_fespace", b: "dvector", A: "block_dCSRmat", ALoc: "double *", bLoc: "double *", flag0: "int", flag1: "int") -> "void":
    return _haznics.block_LocaltoGlobal_face(dof_on_f, dof_per_f, dof_per_face_blk, FE, b, A, ALoc, bLoc, flag0, flag1)

def eliminate_DirichletBC(bc: "void (*)(double *,double *,double,void *)", FE: "fespace", mesh: "mesh_struct", b: "dvector", A: "dCSRmat", time: "double") -> "void":
    return _haznics.eliminate_DirichletBC(bc, FE, mesh, b, A, time)

def eliminate_DirichletBC_RHS(bc: "void (*)(double *,double *,double,void *)", FE: "fespace", mesh: "mesh_struct", b: "dvector", A: "dCSRmat", time: "double") -> "void":
    return _haznics.eliminate_DirichletBC_RHS(bc, FE, mesh, b, A, time)

def block_eliminate_DirichletBC(bc: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", b: "dvector", A: "void *", Atype: "int", time: "double") -> "void":
    return _haznics.block_eliminate_DirichletBC(bc, FE, mesh, b, A, Atype, time)

def block_eliminate_DirichletBC_RHS(bc: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", b: "dvector", A: "void *", Atype: "int", time: "double") -> "void":
    return _haznics.block_eliminate_DirichletBC_RHS(bc, FE, mesh, b, A, Atype, time)

def eliminate_DirichletBC_blockFE(bc: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", b: "dvector", A: "dCSRmat", time: "double") -> "void":
    return _haznics.eliminate_DirichletBC_blockFE(bc, FE, mesh, b, A, time)

def eliminate_DirichletBC_RHS_blockFE(bc: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", b: "dvector", A: "dCSRmat", time: "double") -> "void":
    return _haznics.eliminate_DirichletBC_RHS_blockFE(bc, FE, mesh, b, A, time)

def eliminate_DirichletBC_blockFE_blockA(bc: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", b: "dvector", A: "block_dCSRmat", time: "double") -> "void":
    return _haznics.eliminate_DirichletBC_blockFE_blockA(bc, FE, mesh, b, A, time)

def eliminate_DirichletBC_RHS_blockFE_blockA(bc: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", b: "dvector", A: "block_dCSRmat", time: "double") -> "void":
    return _haznics.eliminate_DirichletBC_RHS_blockFE_blockA(bc, FE, mesh, b, A, time)

def generate_periodic_P(FE: "fespace", P_periodic: "dCSRmat") -> "void":
    return _haznics.generate_periodic_P(FE, P_periodic)

def generate_periodic_R_scaled(P_periodic: "dCSRmat", R_periodic_scaled: "dCSRmat") -> "void":
    return _haznics.generate_periodic_R_scaled(P_periodic, R_periodic_scaled)

def eliminate_PeriodicBC(P_periodic: "dCSRmat", A: "dCSRmat", b: "dvector") -> "void":
    return _haznics.eliminate_PeriodicBC(P_periodic, A, b)

def eliminate_PeriodicBC_nonoverwrite(P_periodic: "dCSRmat", A: "dCSRmat", b: "dvector", PTAP: "dCSRmat", PTb: "dvector") -> "void":
    return _haznics.eliminate_PeriodicBC_nonoverwrite(P_periodic, A, b, PTAP, PTb)

def apply_PeriodicBC(P_periodic: "dCSRmat", u: "dvector") -> "void":
    return _haznics.apply_PeriodicBC(P_periodic, u)

def apply_PeriodicBC_nonoverwrite(P_periodic: "dCSRmat", u_periodic: "dvector", u: "dvector") -> "void":
    return _haznics.apply_PeriodicBC_nonoverwrite(P_periodic, u_periodic, u)

def generate_periodic_P_blockFE(FE: "block_fespace", P_periodic: "block_dCSRmat") -> "void":
    return _haznics.generate_periodic_P_blockFE(FE, P_periodic)

def generate_periodic_R_scaled_blockFE(P_periodic: "block_dCSRmat", R_periodic_scaled: "block_dCSRmat") -> "void":
    return _haznics.generate_periodic_R_scaled_blockFE(P_periodic, R_periodic_scaled)

def eliminate_PeriodicBC_blockFE(P_periodic: "block_dCSRmat", A: "block_dCSRmat", b: "dvector") -> "void":
    return _haznics.eliminate_PeriodicBC_blockFE(P_periodic, A, b)

def eliminate_PeriodicBC_blockFE_nonoverwrite(P_periodic: "block_dCSRmat", A: "block_dCSRmat", b: "dvector", PTAP: "block_dCSRmat", PTb: "dvector") -> "void":
    return _haznics.eliminate_PeriodicBC_blockFE_nonoverwrite(P_periodic, A, b, PTAP, PTb)

def apply_PeriodicBC_blockFE(P_periodic: "block_dCSRmat", u: "dvector") -> "void":
    return _haznics.apply_PeriodicBC_blockFE(P_periodic, u)

def apply_PeriodicBC_blockFE_nonoverwrite(P_periodic: "block_dCSRmat", u_periodic: "dvector", u: "dvector") -> "void":
    return _haznics.apply_PeriodicBC_blockFE_nonoverwrite(P_periodic, u_periodic, u)

def PX_H1_basis(p: "double *", dp: "double *", x: "double *", dof: "int *", porder: "int", mesh: "mesh_struct") -> "void":
    return _haznics.PX_H1_basis(p, dp, x, dof, porder, mesh)

def quad_tri_2D_2der(p: "double *", dpx: "double *", dpy: "double *", dpxx: "double *", dpyy: "double *", dpxy: "double *", x: "double", y: "double", z: "double", dof: "int *", porder: "int", mesh: "mesh_struct") -> "void":
    return _haznics.quad_tri_2D_2der(p, dpx, dpy, dpxx, dpyy, dpxy, x, y, z, dof, porder, mesh)

def ned_basis(phi: "double *", cphi: "double *", x: "double *", v_on_elm: "int *", dof: "int *", mesh: "mesh_struct") -> "void":
    return _haznics.ned_basis(phi, cphi, x, v_on_elm, dof, mesh)

def rt_basis(phi: "double *", dphi: "double *", x: "double *", v_on_elm: "int *", dof: "int *", mesh: "mesh_struct") -> "void":
    return _haznics.rt_basis(phi, dphi, x, v_on_elm, dof, mesh)

def bdm1_basis(phi: "double *", dphix: "double *", dphiy: "double *", x: "double *", v_on_elm: "int *", dof: "int *", mesh: "mesh_struct") -> "void":
    return _haznics.bdm1_basis(phi, dphix, dphiy, x, v_on_elm, dof, mesh)

def bubble_face_basis(phi: "double *", dphi: "double *", x: "double *", v_on_elm: "int *", dof: "int *", mesh: "mesh_struct") -> "void":
    return _haznics.bubble_face_basis(phi, dphi, x, v_on_elm, dof, mesh)

def get_FEM_basis(phi: "double *", dphi: "double *", x: "double *", v_on_elm: "int *", dof: "int *", mesh: "mesh_struct", FE: "fespace") -> "void":
    return _haznics.get_FEM_basis(phi, dphi, x, v_on_elm, dof, mesh, FE)

def L2norm(u: "double *", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates") -> "double":
    return _haznics.L2norm(u, FE, mesh, cq)

def L2norm_block(norm: "double *", u: "double *", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates") -> "void":
    return _haznics.L2norm_block(norm, u, FE, mesh, cq)

def L2_InnerProduct(u: "double *", v: "double *", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates") -> "double":
    return _haznics.L2_InnerProduct(u, v, FE, mesh, cq)

def L2_InnerProduct_block(prod: "double *", u: "double *", v: "double *", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates") -> "void":
    return _haznics.L2_InnerProduct_block(prod, u, v, FE, mesh, cq)

def L2error(u: "double *", truesol: "void (*)(double *,double *,double,void *)", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", time: "double") -> "double":
    return _haznics.L2error(u, truesol, FE, mesh, cq, time)

def L2error_block(err: "double *", u: "double *", truesol: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates", time: "double") -> "void":
    return _haznics.L2error_block(err, u, truesol, FE, mesh, cq, time)

def L2error_mass(u: "double *", truesol: "void (*)(double *,double *,double,void *)", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", time: "double") -> "double":
    return _haznics.L2error_mass(u, truesol, FE, mesh, cq, time)

def L2error_block_mass(err: "double *", u: "double *", truesol: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates", time: "double") -> "void":
    return _haznics.L2error_block_mass(err, u, truesol, FE, mesh, cq, time)

def HDseminorm(u: "double *", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates") -> "double":
    return _haznics.HDseminorm(u, FE, mesh, cq)

def HDseminorm_block(norm: "double *", u: "double *", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates") -> "void":
    return _haznics.HDseminorm_block(norm, u, FE, mesh, cq)

def HDsemierror(u: "double *", D_truesol: "void (*)(double *,double *,double,void *)", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", time: "double") -> "double":
    return _haznics.HDsemierror(u, D_truesol, FE, mesh, cq, time)

def HDsemierror_block(err: "double *", u: "double *", D_truesol: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates", time: "double") -> "void":
    return _haznics.HDsemierror_block(err, u, D_truesol, FE, mesh, cq, time)

def HDsemierror_stiff(u: "double *", truesol: "void (*)(double *,double *,double,void *)", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", time: "double") -> "double":
    return _haznics.HDsemierror_stiff(u, truesol, FE, mesh, cq, time)

def HDsemierror_block_stiff(err: "double *", u: "double *", truesol: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates", time: "double") -> "void":
    return _haznics.HDsemierror_block_stiff(err, u, truesol, FE, mesh, cq, time)

def HDnorm(u: "double *", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates") -> "double":
    return _haznics.HDnorm(u, FE, mesh, cq)

def HDnorm_block(norm: "double *", u: "double *", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates") -> "void":
    return _haznics.HDnorm_block(norm, u, FE, mesh, cq)

def HDerror(u: "double *", truesol: "void (*)(double *,double *,double,void *)", D_truesol: "void (*)(double *,double *,double,void *)", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", time: "double") -> "double":
    return _haznics.HDerror(u, truesol, D_truesol, FE, mesh, cq, time)

def HDerror_block(err: "double *", u: "double *", truesol: "void (*)(double *,double *,double,void *)", D_truesol: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates", time: "double") -> "void":
    return _haznics.HDerror_block(err, u, truesol, D_truesol, FE, mesh, cq, time)

def energynorm_discrete(u: "double *", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates", coeff: "void (*)(double *,double *,double,void *)", local_assembly_routine: "void (*)(double *,fespace *,mesh_struct *,qcoordinates *,int *,int *,int,void (*)(double *,double *,double,void *),double)", param: "double") -> "double":
    return _haznics.energynorm_discrete(u, FE, mesh, cq, coeff, local_assembly_routine, param)

def initialize_fespace(FE: "fespace") -> "void":
    return _haznics.initialize_fespace(FE)

def create_fespace(FE: "fespace", mesh: "mesh_struct", FEtype: "int") -> "void":
    return _haznics.create_fespace(FE, mesh, FEtype)

def free_fespace(FE: "fespace") -> "void":
    return _haznics.free_fespace(FE)

def free_blockfespace(FE: "block_fespace") -> "void":
    return _haznics.free_blockfespace(FE)

def get_P2(FE: "fespace", mesh: "mesh_struct") -> "void":
    return _haznics.get_P2(FE, mesh)

def dump_el_dof(fid: "FILE *", el_dof: "iCSRmat") -> "void":
    return _haznics.dump_el_dof(fid, el_dof)

def dump_fespace(FE: "fespace", varname: "char *", dir: "char *") -> "void":
    return _haznics.dump_fespace(FE, varname, dir)

def set_dirichlet_bdry(FE: "fespace", mesh: "mesh_struct", flag0: "int const", flag1: "int const") -> "void":
    return _haznics.set_dirichlet_bdry(FE, mesh, flag0, flag1)

def set_dirichlet_bdry_block(FE: "block_fespace", mesh: "mesh_struct") -> "void":
    return _haznics.set_dirichlet_bdry_block(FE, mesh)

def set_periodic_bdry(FE: "fespace", mesh: "mesh_struct", minx: "double const", maxx: "double const", miny: "double const", maxy: "double const", minz: "double const", maxz: "double const") -> "void":
    return _haznics.set_periodic_bdry(FE, mesh, minx, maxx, miny, maxy, minz, maxz)

def get_incidence_row(row: "int", fem_map: "iCSRmat", thisrow: "int *") -> "void":
    return _haznics.get_incidence_row(row, fem_map, thisrow)

def get_coords(x: "double *", dof: "int", cdof: "coordinates", dim: "int") -> "void":
    return _haznics.get_coords(x, dof, cdof, dim)

def FE_Interpolation(val: "double *", u: "double *", x: "double *", dof_on_elm: "int *", v_on_elm: "int *", FE: "fespace", mesh: "mesh_struct") -> "void":
    return _haznics.FE_Interpolation(val, u, x, dof_on_elm, v_on_elm, FE, mesh)

def FE_DerivativeInterpolation(val: "double *", u: "double *", x: "double *", dof_on_elm: "int *", v_on_elm: "int *", FE: "fespace", mesh: "mesh_struct") -> "void":
    return _haznics.FE_DerivativeInterpolation(val, u, x, dof_on_elm, v_on_elm, FE, mesh)

def blockFE_Interpolation(val: "double *", u: "double *", x: "double *", dof_on_elm: "int *", v_on_elm: "int *", FE: "block_fespace", mesh: "mesh_struct") -> "void":
    return _haznics.blockFE_Interpolation(val, u, x, dof_on_elm, v_on_elm, FE, mesh)

def blockFE_DerivativeInterpolation(val: "double *", u: "double *", x: "double *", dof_on_elm: "int *", v_on_elm: "int *", FE: "block_fespace", mesh: "mesh_struct") -> "void":
    return _haznics.blockFE_DerivativeInterpolation(val, u, x, dof_on_elm, v_on_elm, FE, mesh)

def FE_Evaluate_DOF(expr: "void (*)(double *,double *,double,void *)", FE: "fespace", mesh: "mesh_struct", time: "double", DOF: "int") -> "double":
    return _haznics.FE_Evaluate_DOF(expr, FE, mesh, time, DOF)

def FE_Evaluate(val: "double *", expr: "void (*)(double *,double *,double,void *)", FE: "fespace", mesh: "mesh_struct", time: "double") -> "void":
    return _haznics.FE_Evaluate(val, expr, FE, mesh, time)

def blockFE_Evaluate_DOF(expr: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", time: "double", comp: "int", DOF: "int") -> "double":
    return _haznics.blockFE_Evaluate_DOF(expr, FE, mesh, time, comp, DOF)

def blockFE_Evaluate(val: "double *", expr: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", time: "double") -> "void":
    return _haznics.blockFE_Evaluate(val, expr, FE, mesh, time)

def blockFE_EvaluateBoundary(val: "double *", expr: "void (*)(double *,double *,double,void *)", FE: "block_fespace", mesh: "mesh_struct", time: "double") -> "void":
    return _haznics.blockFE_EvaluateBoundary(val, expr, FE, mesh, time)

def Project_to_Vertices(u_on_V: "double *", u: "double *", FE: "fespace", mesh: "mesh_struct") -> "void":
    return _haznics.Project_to_Vertices(u_on_V, u, FE, mesh)

def get_unknown_component(u: "dvector", ublock: "dvector", FE: "block_fespace", comp: "int") -> "void":
    return _haznics.get_unknown_component(u, ublock, FE, comp)

def set_unknown_component(u: "dvector", ublock: "dvector", FE: "block_fespace", comp: "int") -> "void":
    return _haznics.set_unknown_component(u, ublock, FE, comp)

def get_grad_H1toNed(Grad: "dCSRmat", mesh: "mesh_struct") -> "void":
    return _haznics.get_grad_H1toNed(Grad, mesh)

def get_curl_NedtoRT(Curl: "dCSRmat", mesh: "mesh_struct") -> "void":
    return _haznics.get_curl_NedtoRT(Curl, mesh)

def get_div_RTtoL2(Div: "dCSRmat", mesh: "mesh_struct") -> "void":
    return _haznics.get_div_RTtoL2(Div, mesh)

def get_Pigrad_H1toNed(Pgrad: "dCSRmat", mesh: "mesh_struct") -> "void":
    return _haznics.get_Pigrad_H1toNed(Pgrad, mesh)

def get_Pigrad_H1toRT(Pdiv: "dCSRmat", Pcurl: "dCSRmat", Curl: "dCSRmat", mesh: "mesh_struct") -> "void":
    return _haznics.get_Pigrad_H1toRT(Pdiv, Pcurl, Curl, mesh)

def ProjectOut_Grad(u: "dvector", FE_H1: "fespace", FE_Ned: "fespace", mesh: "mesh_struct", cq: "qcoordinates", G: "dCSRmat") -> "void":
    return _haznics.ProjectOut_Grad(u, FE_H1, FE_Ned, mesh, cq, G)

def allocateqcoords(nq1d: "int", nelm: "int", mydim: "int") -> "struct qcoordinates *":
    return _haznics.allocateqcoords(nq1d, nelm, mydim)

def allocateqcoords_bdry(nq1d: "int", nregion: "int", dim: "int", ed_or_f: "int") -> "struct qcoordinates *":
    return _haznics.allocateqcoords_bdry(nq1d, nregion, dim, ed_or_f)

def free_qcoords(A: "qcoordinates") -> "void":
    return _haznics.free_qcoords(A)

def get_quadrature(mesh: "mesh_struct", nq1d: "int") -> "qcoordinates *":
    return _haznics.get_quadrature(mesh, nq1d)

def quad_elm(cqelm: "qcoordinates", mesh: "mesh_struct", nq1d: "int", elm: "int") -> "void":
    return _haznics.quad_elm(cqelm, mesh, nq1d, elm)

def get_quadrature_boundary(mesh: "mesh_struct", nq1d: "int", ed_or_f: "int") -> "qcoordinates *":
    return _haznics.get_quadrature_boundary(mesh, nq1d, ed_or_f)

def quad_edge(cqbdry: "qcoordinates", mesh: "mesh_struct", nq1d: "int", dof: "int") -> "void":
    return _haznics.quad_edge(cqbdry, mesh, nq1d, dof)

def quad_face(cqbdry: "qcoordinates", mesh: "mesh_struct", nq1d: "int", dof: "int") -> "void":
    return _haznics.quad_face(cqbdry, mesh, nq1d, dof)

def dump_qcoords(q: "qcoordinates") -> "void":
    return _haznics.dump_qcoords(q)

def integrate_elm(expr: "void (*)(double *,double *,double,void *)", nun: "int", comp: "int", nq1d: "int", cq: "qcoordinates", mesh: "mesh_struct", time: "double", elm: "int") -> "double":
    return _haznics.integrate_elm(expr, nun, comp, nq1d, cq, mesh, time, elm)

def integrate_domain(expr: "void (*)(double *,double *,double,void *)", nun: "int", comp: "int", nq1d: "int", cq: "qcoordinates", mesh: "mesh_struct", time: "double") -> "double":
    return _haznics.integrate_domain(expr, nun, comp, nq1d, cq, mesh, time)

def integrate_face(expr: "void (*)(double *,double *,double,void *)", nun: "int", comp: "int", nq1d: "int", cq: "qcoordinates", mesh: "mesh_struct", time: "double", face: "int") -> "double":
    return _haznics.integrate_face(expr, nun, comp, nq1d, cq, mesh, time, face)

def integrate_edge(expr: "void (*)(double *,double *,double,void *)", nun: "int", comp: "int", nq1d: "int", cq: "qcoordinates", mesh: "mesh_struct", time: "double", edge: "int") -> "double":
    return _haznics.integrate_edge(expr, nun, comp, nq1d, cq, mesh, time, edge)

def integrate_edge_vector_tangent(expr: "void (*)(double *,double *,double,void *)", nun: "int", comp: "int", nq1d: "int", cq: "qcoordinates", mesh: "mesh_struct", time: "double", edge: "int") -> "double":
    return _haznics.integrate_edge_vector_tangent(expr, nun, comp, nq1d, cq, mesh, time, edge)

def integrate_face_vector_normal(expr: "void (*)(double *,double *,double,void *)", nun: "int", comp: "int", nq1d: "int", cq: "qcoordinates", mesh: "mesh_struct", time: "double", face: "int") -> "double":
    return _haznics.integrate_face_vector_normal(expr, nun, comp, nq1d, cq, mesh, time, face)

def quad1d(gaussp: "double *", gaussc: "double *", ng1d: "int") -> "void":
    return _haznics.quad1d(gaussp, gaussc, ng1d)

def triquad_(gp: "double *", gc: "double *", ng1d: "int") -> "void":
    return _haznics.triquad_(gp, gc, ng1d)

def tetquad_(gp: "double *", gc: "double *", ng1d: "int") -> "void":
    return _haznics.tetquad_(gp, gc, ng1d)

def initialize_mesh(mesh: "mesh_struct") -> "void":
    return _haznics.initialize_mesh(mesh)

def creategrid_fread(gfid: "FILE *", file_type: "int", mesh: "mesh_struct") -> "void":
    return _haznics.creategrid_fread(gfid, file_type, mesh)

def build_mesh_all(mesh: "mesh_struct") -> "void":
    return _haznics.build_mesh_all(mesh)

def allocatecoords(ndof: "int", mydim: "int") -> "struct coordinates *":
    return _haznics.allocatecoords(ndof, mydim)

def free_coords(A: "coordinates") -> "void":
    return _haznics.free_coords(A)

def dump_coords(fid: "FILE *", c: "coordinates") -> "void":
    return _haznics.dump_coords(fid, c)

def free_mesh(mesh: "mesh_struct") -> "void":
    return _haznics.free_mesh(mesh)

def read_grid_haz(gfid: "FILE *", mesh: "mesh_struct") -> "void":
    return _haznics.read_grid_haz(gfid, mesh)

def read_grid_vtk(gfid: "FILE *", mesh: "mesh_struct") -> "void":
    return _haznics.read_grid_vtk(gfid, mesh)

def dump_mesh_haz(namehaz: "char *", mesh: "mesh_struct") -> "void":
    return _haznics.dump_mesh_haz(namehaz, mesh)

def dump_mesh_vtk(namevtk: "char *", mesh: "mesh_struct") -> "void":
    return _haznics.dump_mesh_vtk(namevtk, mesh)

def create1Dgrid_Line(mesh: "mesh_struct", left_end: "double", right_end: "double", nelm: "int") -> "void":
    return _haznics.create1Dgrid_Line(mesh, left_end, right_end, nelm)

def convert_elmnode(element_vertex: "int *", nelm: "int", nv: "int", nve: "int") -> "iCSRmat":
    return _haznics.convert_elmnode(element_vertex, nelm, nv, nve)

def get_edge_v(nedge: "int *", el_v: "iCSRmat") -> "iCSRmat":
    return _haznics.get_edge_v(nedge, el_v)

def boundary_f_ed(f_ed: "iCSRmat", ed_v: "iCSRmat", nedge: "int", nface: "int", f_flag: "int *", v_flag: "int *", nbedge: "int *", ed_flag: "int *", dim: "int") -> "void":
    return _haznics.boundary_f_ed(f_ed, ed_v, nedge, nface, f_flag, v_flag, nbedge, ed_flag, dim)

def get_el_ed(el_v: "iCSRmat", ed_v: "iCSRmat") -> "iCSRmat":
    return _haznics.get_el_ed(el_v, ed_v)

def edge_stats_all(ed_len: "double *", ed_tau: "double *", ed_mid: "double *", cv: "coordinates", ed_v: "iCSRmat", dim: "int") -> "void":
    return _haznics.edge_stats_all(ed_len, ed_tau, ed_mid, cv, ed_v, dim)

def get_face_ordering(el_order: "int", dim: "int", f_order: "int", fel_order: "int *") -> "void":
    return _haznics.get_face_ordering(el_order, dim, f_order, fel_order)

def get_face_maps(el_v: "iCSRmat", el_order: "int", ed_v: "iCSRmat", nface: "int", dim: "int", f_order: "int", el_f: "iCSRmat", f_bdry: "int *", nbface: "int *", f_v: "iCSRmat", f_ed: "iCSRmat", fel_order: "int *") -> "void":
    return _haznics.get_face_maps(el_v, el_order, ed_v, nface, dim, f_order, el_f, f_bdry, nbface, f_v, f_ed, fel_order)

def find_facenumber(el_v: "iCSRmat", elm: "int", nd: "int *", dim: "int", f_num: "int *") -> "void":
    return _haznics.find_facenumber(el_v, elm, nd, dim, f_num)

def face_stats(f_area: "double *", f_mid: "double *", f_norm: "double *", f_v: "iCSRmat", mesh: "mesh_struct") -> "void":
    return _haznics.face_stats(f_area, f_mid, f_norm, f_v, mesh)

def sync_facenode(f_v: "iCSRmat", f_norm: "double *", mesh: "mesh_struct") -> "void":
    return _haznics.sync_facenode(f_v, f_norm, mesh)

def get_el_mid(el_mid: "double *", el_v: "iCSRmat", cv: "coordinates", dim: "int") -> "void":
    return _haznics.get_el_mid(el_mid, el_v, cv, dim)

def get_el_vol(el_vol: "double *", el_v: "iCSRmat", cv: "coordinates", dim: "int", v_per_elm: "int") -> "void":
    return _haznics.get_el_vol(el_vol, el_v, cv, dim, v_per_elm)

def compute_Voronoi_nodes(mesh: "mesh_struct", cv_vor: "coordinates") -> "void":
    return _haznics.compute_Voronoi_nodes(mesh, cv_vor)

def compute_Voronoi_edges(mesh: "mesh_struct", cv_vor: "coordinates", vor_edge_length: "dvector") -> "void":
    return _haznics.compute_Voronoi_edges(mesh, cv_vor, vor_edge_length)

def neighbor_elm(mesh: "mesh_struct", n: "int", m: "int", ind: "int *", f: "int *") -> "void":
    return _haznics.neighbor_elm(mesh, n, m, ind, f)

def compute_Voronoi_faces(mesh: "mesh_struct", cv_vor: "coordinates", pt_on_face: "double *", vor_face_area: "dvector") -> "void":
    return _haznics.compute_Voronoi_faces(mesh, cv_vor, pt_on_face, vor_face_area)

def compute_Voronoi_volumes(mesh: "mesh_struct", cv_vor: "coordinates", vor_face_area: "dvector", pt_on_face: "double *", vor_el_vol: "dvector") -> "void":
    return _haznics.compute_Voronoi_volumes(mesh, cv_vor, vor_face_area, pt_on_face, vor_el_vol)

def initialize_newton(n_it: "newton", inparam: "input_param", ndof: "int", blksize: "int") -> "void":
    return _haznics.initialize_newton(n_it, inparam, ndof, blksize)

def free_newton(n_it: "newton") -> "void":
    return _haznics.free_newton(n_it)

def update_newtonstep(n_it: "newton") -> "void":
    return _haznics.update_newtonstep(n_it)

def update_sol_newton(n_it: "newton") -> "void":
    return _haznics.update_sol_newton(n_it)

def check_newton_convergence(n_it: "newton") -> "int":
    return _haznics.check_newton_convergence(n_it)

def get_residual_norm(n_it: "newton") -> "void":
    return _haznics.get_residual_norm(n_it)

def get_update_norm(n_it: "newton", FE: "fespace", mesh: "mesh_struct", cq: "qcoordinates") -> "void":
    return _haznics.get_update_norm(n_it, FE, mesh, cq)

def get_blockupdate_norm(n_it: "newton", FE: "block_fespace", mesh: "mesh_struct", cq: "qcoordinates") -> "void":
    return _haznics.get_blockupdate_norm(n_it, FE, mesh, cq)

def form_boolean_p(vertices: "ivector", tentp: "dCSRmat", levelNum: "int", num_aggregations: "int") -> "void":
    return _haznics.form_boolean_p(vertices, tentp, levelNum, num_aggregations)

def amg_setup_ua(mgl: "AMG_data", param: "AMG_param") -> "short":
    return _haznics.amg_setup_ua(mgl, param)

def amg_setup_sa(mgl: "AMG_data", param: "AMG_param") -> "short":
    return _haznics.amg_setup_sa(mgl, param)

def famg_setup_ua(mgl: "AMG_data", param: "AMG_param") -> "short":
    return _haznics.famg_setup_ua(mgl, param)

def famg_setup_sa(mgl: "AMG_data", param: "AMG_param") -> "short":
    return _haznics.famg_setup_sa(mgl, param)

def amg_solve(mgl: "AMG_data", param: "AMG_param") -> "int":
    return _haznics.amg_solve(mgl, param)

def amg_solve_amli(mgl: "AMG_data", param: "AMG_param") -> "int":
    return _haznics.amg_solve_amli(mgl, param)

def amg_solve_nl_amli(mgl: "AMG_data", param: "AMG_param") -> "int":
    return _haznics.amg_solve_nl_amli(mgl, param)

def mg_solve_blk(mgl: "MG_blk_data", param: "AMG_param", rho1: "double *", rho2: "double *") -> "int":
    return _haznics.mg_solve_blk(mgl, param, rho1, rho2)

def directsolve_UMF(A: "dCSRmat", f: "dvector", x: "dvector", print_level: "int") -> "int":
    return _haznics.directsolve_UMF(A, f, x, print_level)

def factorize_UMF(A: "dCSRmat", print_level: "int") -> "void *":
    return _haznics.factorize_UMF(A, print_level)

def solve_UMF(A: "dCSRmat", f: "dvector", x: "dvector", Numeric: "void *", print_level: "int") -> "int":
    return _haznics.solve_UMF(A, f, x, Numeric, print_level)

def block_directsolve_UMF(bA: "block_dCSRmat", f: "dvector", x: "dvector", print_level: "int") -> "int":
    return _haznics.block_directsolve_UMF(bA, f, x, print_level)

def block_factorize_UMF(bA: "block_dCSRmat", print_level: "int") -> "void *":
    return _haznics.block_factorize_UMF(bA, print_level)

def block_solve_UMF(bA: "block_dCSRmat", f: "dvector", x: "dvector", Numeric: "void *", print_level: "int") -> "int":
    return _haznics.block_solve_UMF(bA, f, x, Numeric, print_level)

def umfpack_factorize(ptrA: "dCSRmat", prtlvl: "short const") -> "void *":
    return _haznics.umfpack_factorize(ptrA, prtlvl)

def umfpack_solve(ptrA: "dCSRmat", b: "dvector", u: "dvector", Numeric: "void *", prtlvl: "short const") -> "int":
    return _haznics.umfpack_solve(ptrA, b, u, Numeric, prtlvl)

def umfpack_free_numeric(Numeric: "void *") -> "int":
    return _haznics.umfpack_free_numeric(Numeric)

def famg_solve(mgl: "AMG_data", param: "AMG_param") -> "int":
    return _haznics.famg_solve(mgl, param)

def amg_solve_famli(mgl: "AMG_data", param: "AMG_param") -> "int":
    return _haznics.amg_solve_famli(mgl, param)

def fmgcycle(mgl: "AMG_data", param: "AMG_param") -> "void":
    return _haznics.fmgcycle(mgl, param)

def fmgcycle_add_update(mgl: "AMG_data", param: "AMG_param") -> "void":
    return _haznics.fmgcycle_add_update(mgl, param)

def famli(mgl: "AMG_data", param: "AMG_param", level: "int") -> "void":
    return _haznics.famli(mgl, param, level)

def smoother_dcsr_fjacobi(u: "dvector", i_1: "int const", i_n: "int const", s: "int const", A: "dCSRmat", b: "dvector", M: "dCSRmat", p: "double const", w: "double const", L: "int") -> "void":
    return _haznics.smoother_dcsr_fjacobi(u, i_1, i_n, s, A, b, M, p, w, L)

def smoother_dcsr_fgs(u: "dvector", i_1: "int const", i_n: "int const", s: "int const", A: "dCSRmat", b: "dvector", M: "dCSRmat", p: "double const", L: "int") -> "void":
    return _haznics.smoother_dcsr_fgs(u, i_1, i_n, s, A, b, M, p, L)

def smoother_dcsr_fsgs(u: "dvector", A: "dCSRmat", b: "dvector", M: "dCSRmat", p: "double const", L: "int") -> "void":
    return _haznics.smoother_dcsr_fsgs(u, A, b, M, p, L)

def build_linear_R(R: "dCSRmat", nf1d: "int", nc1d: "int") -> "void":
    return _haznics.build_linear_R(R, nf1d, nc1d)

def build_constant_R(R: "dCSRmat", nf1d: "int", nc1d: "int") -> "void":
    return _haznics.build_constant_R(R, nf1d, nc1d)

def build_face_R(R: "dCSRmat", fmesh: "mesh_struct", cmesh: "mesh_struct", nf1d: "int", nc1d: "int") -> "void":
    return _haznics.build_face_R(R, fmesh, cmesh, nf1d, nc1d)

def build_bubble_R(R: "dCSRmat", Rblx: "dCSRmat", Rbly: "dCSRmat", fmesh: "mesh_struct", cmesh: "mesh_struct", nf1d: "int", nc1d: "int") -> "void":
    return _haznics.build_bubble_R(R, Rblx, Rbly, fmesh, cmesh, nf1d, nc1d)

def gmg_setup_RT0(fine_level_mesh: "mesh_struct") -> "int":
    return _haznics.gmg_setup_RT0(fine_level_mesh)

def gmg_div_free_interp(P: "block_dCSRmat", fmesh: "mesh_struct", cmesh: "mesh_struct", sol: "double *", rhs: "double *") -> "void":
    return _haznics.gmg_div_free_interp(P, fmesh, cmesh, sol, rhs)

def gmg_div_free_R(R: "dCSRmat", fmesh: "mesh_struct", cmesh: "mesh_struct") -> "void":
    return _haznics.gmg_div_free_R(R, fmesh, cmesh)

def gmg_load_coarse_grids_from_file(mgl: "MG_blk_data", param: "AMG_param") -> "short":
    return _haznics.gmg_load_coarse_grids_from_file(mgl, param)

def gmg_build_coarse_FE_spaces(mgl: "MG_blk_data", param: "AMG_param") -> "short":
    return _haznics.gmg_build_coarse_FE_spaces(mgl, param)

def gmg_apply_periodic_BC(mgl: "MG_blk_data", param: "AMG_param", NoBBL: "int") -> "short":
    return _haznics.gmg_apply_periodic_BC(mgl, param, NoBBL)

def gmg_blk_setup_generic(mgl: "MG_blk_data", param: "AMG_param") -> "short":
    return _haznics.gmg_blk_setup_generic(mgl, param)

def gmg_blk_setup_biot_bubble(mgl: "MG_blk_data", param: "AMG_param") -> "short":
    return _haznics.gmg_blk_setup_biot_bubble(mgl, param)

def smoother_setup_biot_monolithic(bmgl: "MG_blk_data", param: "AMG_param") -> "void":
    return _haznics.smoother_setup_biot_monolithic(bmgl, param)

def smoother_block_setup(bmgl: "MG_blk_data", param: "AMG_param") -> "void":
    return _haznics.smoother_block_setup(bmgl, param)

def solver_dcsr_linear_itsolver(A: "dCSRmat", b: "dvector", x: "dvector", pc: "precond", itparam: "linear_itsolver_param") -> "int":
    return _haznics.solver_dcsr_linear_itsolver(A, b, x, pc, itparam)

def solver_bdcsr_linear_itsolver(A: "block_dCSRmat", b: "dvector", x: "dvector", pc: "precond", itparam: "linear_itsolver_param") -> "int":
    return _haznics.solver_bdcsr_linear_itsolver(A, b, x, pc, itparam)

def solver_general_linear_itsolver(mxv: "matvec", b: "dvector", x: "dvector", pc: "precond", itparam: "linear_itsolver_param") -> "int":
    return _haznics.solver_general_linear_itsolver(mxv, b, x, pc, itparam)

def linear_solver_amg(A: "dCSRmat", b: "dvector", x: "dvector", param: "AMG_param") -> "int":
    return _haznics.linear_solver_amg(A, b, x, param)

def linear_solver_frac_rational_approx(A: "dCSRmat", b: "dvector", x: "dvector", M: "dCSRmat", amgparam: "AMG_param", itparam: "linear_itsolver_param", poles: "dvector", residues: "dvector") -> "int":
    return _haznics.linear_solver_frac_rational_approx(A, b, x, M, amgparam, itparam, poles, residues)

def linear_solver_bdcsr_gmg(A: "block_dCSRmat", b: "dvector", x: "dvector", param: "AMG_param", gmg_type: "int *", mesh: "mesh_struct", FE: "block_fespace", set_bdry_flags: "void (*)(mesh_struct *)", A_diag: "dCSRmat", A_noBC: "block_dCSRmat", itparam: "linear_itsolver_param", solve_info: "solve_stats") -> "int":
    return _haznics.linear_solver_bdcsr_gmg(A, b, x, param, gmg_type, mesh, FE, set_bdry_flags, A_diag, A_noBC, itparam, solve_info)

def linear_solver_dcsr_krylov(A: "dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param") -> "int":
    return _haznics.linear_solver_dcsr_krylov(A, b, x, itparam)

def linear_solver_dcsr_krylov_diag(A: "dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param") -> "int":
    return _haznics.linear_solver_dcsr_krylov_diag(A, b, x, itparam)

def linear_solver_dcsr_krylov_amg(A: "dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", amgparam: "AMG_param") -> "int":
    return _haznics.linear_solver_dcsr_krylov_amg(A, b, x, itparam, amgparam)

def linear_solver_dcsr_krylov_famg(A_frac: "dCSRmat", bb: "dvector", x: "dvector", M: "dCSRmat", A: "dCSRmat", itparam: "linear_itsolver_param", amgparam: "AMG_param") -> "int":
    return _haznics.linear_solver_dcsr_krylov_famg(A_frac, bb, x, M, A, itparam, amgparam)

def linear_solver_dcsr_krylov_famg2(A_frac: "dCSRmat", bb: "dvector", x: "dvector", M: "dCSRmat", A: "dCSRmat", Grad: "dCSRmat", itparam: "linear_itsolver_param", amgparam: "AMG_param") -> "int":
    return _haznics.linear_solver_dcsr_krylov_famg2(A_frac, bb, x, M, A, Grad, itparam, amgparam)

def linear_solver_dcsr_krylov_famg_sum(A_frac: "dCSRmat", bb: "dvector", x: "dvector", M: "dCSRmat", A: "dCSRmat", falpha: "double const", fbeta: "double const", itparam: "linear_itsolver_param", amgparam: "AMG_param", famgparam: "AMG_param") -> "int":
    return _haznics.linear_solver_dcsr_krylov_famg_sum(A_frac, bb, x, M, A, falpha, fbeta, itparam, amgparam, famgparam)

def linear_solver_dcsr_krylov_famg_sum2(A_frac: "dCSRmat", bb: "dvector", x: "dvector", MS: "dCSRmat", AS: "dCSRmat", Mdiv: "dCSRmat", Adiv: "dCSRmat", Adivfrac: "dCSRmat", Grad: "dCSRmat", falpha: "double const", fbeta: "double const", itparam: "linear_itsolver_param", amgparam: "AMG_param", famgparam: "AMG_param") -> "int":
    return _haznics.linear_solver_dcsr_krylov_famg_sum2(A_frac, bb, x, MS, AS, Mdiv, Adiv, Adivfrac, Grad, falpha, fbeta, itparam, amgparam, famgparam)

def linear_solver_dcsr_krylov_hx_curl(A: "dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", amgparam: "AMG_param", P_curl: "dCSRmat", Grad: "dCSRmat") -> "int":
    return _haznics.linear_solver_dcsr_krylov_hx_curl(A, b, x, itparam, amgparam, P_curl, Grad)

def linear_solver_dcsr_krylov_hx_div(A: "dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", amgparam: "AMG_param", P_curl: "dCSRmat", P_div: "dCSRmat", Curl: "dCSRmat") -> "int":
    return _haznics.linear_solver_dcsr_krylov_hx_div(A, b, x, itparam, amgparam, P_curl, P_div, Curl)

def linear_solver_bdcsr_krylov(A: "block_dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param") -> "int":
    return _haznics.linear_solver_bdcsr_krylov(A, b, x, itparam)

def linear_solver_bdcsr_krylov_block_2(A: "block_dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", amgparam: "AMG_param", A_diag: "dCSRmat") -> "int":
    return _haznics.linear_solver_bdcsr_krylov_block_2(A, b, x, itparam, amgparam, A_diag)

def linear_solver_bdcsr_krylov_block_3(A: "block_dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", amgparam: "AMG_param", A_diag: "dCSRmat") -> "int":
    return _haznics.linear_solver_bdcsr_krylov_block_3(A, b, x, itparam, amgparam, A_diag)

def linear_solver_bdcsr_krylov_block_4(A: "block_dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", amgparam: "AMG_param", A_diag: "dCSRmat") -> "int":
    return _haznics.linear_solver_bdcsr_krylov_block_4(A, b, x, itparam, amgparam, A_diag)

def linear_solver_bdcsr_krylov_block_5(A: "block_dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", amgparam: "AMG_param", A_diag: "dCSRmat") -> "int":
    return _haznics.linear_solver_bdcsr_krylov_block_5(A, b, x, itparam, amgparam, A_diag)

def linear_solver_bdcsr_krylov_block(A: "block_dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", amgparam: "AMG_param", A_diag: "dCSRmat") -> "int":
    return _haznics.linear_solver_bdcsr_krylov_block(A, b, x, itparam, amgparam, A_diag)

def linear_solver_bdcsr_krylov_mixed_darcy(A: "block_dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", amgparam: "AMG_param", P_div: "dCSRmat", Curl: "dCSRmat", P_curl: "dCSRmat", el_vol: "dvector") -> "int":
    return _haznics.linear_solver_bdcsr_krylov_mixed_darcy(A, b, x, itparam, amgparam, P_div, Curl, P_curl, el_vol)

def linear_solver_bdcsr_krylov_biot_2field(A: "block_dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", amgparam: "AMG_param", Mp: "dCSRmat") -> "int":
    return _haznics.linear_solver_bdcsr_krylov_biot_2field(A, b, x, itparam, amgparam, Mp)

def linear_solver_bdcsr_krylov_maxwell(A: "block_dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", amgparam: "AMG_param", A_diag: "dCSRmat", P_curl: "dCSRmat", Grad: "dCSRmat", Gb: "dCSRmat", Kb: "dCSRmat", Gtb: "dCSRmat", Ktb: "dCSRmat") -> "int":
    return _haznics.linear_solver_bdcsr_krylov_maxwell(A, b, x, itparam, amgparam, A_diag, P_curl, Grad, Gb, Kb, Gtb, Ktb)

def linear_solver_bdcsr_krylov_bubble_stokes(A: "block_dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", amgparam: "AMG_param", Mp: "dCSRmat") -> "int":
    return _haznics.linear_solver_bdcsr_krylov_bubble_stokes(A, b, x, itparam, amgparam, Mp)

def linear_solver_bdcsr_krylov_biot_3field(A: "block_dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", amgparam: "AMG_param", A_diag: "dCSRmat", P_curl: "dCSRmat", P_div: "dCSRmat", Curl: "dCSRmat", solve_info: "solve_stats") -> "int":
    return _haznics.linear_solver_bdcsr_krylov_biot_3field(A, b, x, itparam, amgparam, A_diag, P_curl, P_div, Curl, solve_info)

def linear_solver_bdcsr_krylov_gmg(A: "block_dCSRmat", b: "dvector", x: "dvector", itparam: "linear_itsolver_param", param: "AMG_param", gmg_type: "int *", mesh: "mesh_struct", FE: "block_fespace", set_bdry_flags: "void (*)(mesh_struct *)", A_diag: "dCSRmat", A_noBC: "block_dCSRmat") -> "int":
    return _haznics.linear_solver_bdcsr_krylov_gmg(A, b, x, itparam, param, gmg_type, mesh, FE, set_bdry_flags, A_diag, A_noBC)

def linear_solver_bdcsr_babuska_block_2(A: "block_dCSRmat", b: "dvector", x: "dvector", AS: "dCSRmat", MS: "dCSRmat", itparam: "linear_itsolver_param", amgparam1: "AMG_param", amgparam2: "AMG_param", s_frac_power: "double", t_frac_power: "double", alpha: "double", beta: "double", scaling_a: "double", scaling_m: "double") -> "int":
    return _haznics.linear_solver_bdcsr_babuska_block_2(A, b, x, AS, MS, itparam, amgparam1, amgparam2, s_frac_power, t_frac_power, alpha, beta, scaling_a, scaling_m)

def dcsr_pcg(A: "dCSRmat", b: "dvector", u: "dvector", pc: "precond", tol: "double const", MaxIt: "int const", stop_type: "short const", prtlvl: "short const") -> "int":
    return _haznics.dcsr_pcg(A, b, u, pc, tol, MaxIt, stop_type, prtlvl)

def bdcsr_pcg(A: "block_dCSRmat", b: "dvector", u: "dvector", pc: "precond", tol: "double const", MaxIt: "int const", stop_type: "short const", prtlvl: "short const") -> "int":
    return _haznics.bdcsr_pcg(A, b, u, pc, tol, MaxIt, stop_type, prtlvl)

def general_pcg(mxv: "matvec", b: "dvector", u: "dvector", pc: "precond", tol: "double const", MaxIt: "int const", stop_type: "short const", prtlvl: "short const") -> "int":
    return _haznics.general_pcg(mxv, b, u, pc, tol, MaxIt, stop_type, prtlvl)

def dcsr_pgcg(A: "dCSRmat", b: "dvector", u: "dvector", pc: "precond", tol: "double const", MaxIt: "int const", stop_type: "short const", print_level: "short const") -> "int":
    return _haznics.dcsr_pgcg(A, b, u, pc, tol, MaxIt, stop_type, print_level)

def dcsr_pminres(A: "dCSRmat", b: "dvector", u: "dvector", pc: "precond", tol: "double const", MaxIt: "int const", stop_type: "short const", prtlvl: "short const") -> "int":
    return _haznics.dcsr_pminres(A, b, u, pc, tol, MaxIt, stop_type, prtlvl)

def bdcsr_pminres(A: "block_dCSRmat", b: "dvector", u: "dvector", pc: "precond", tol: "double const", MaxIt: "int const", stop_type: "short const", prtlvl: "short const") -> "int":
    return _haznics.bdcsr_pminres(A, b, u, pc, tol, MaxIt, stop_type, prtlvl)

def general_pminres(mxv: "matvec", b: "dvector", u: "dvector", pc: "precond", tol: "double const", MaxIt: "int const", stop_type: "short const", prtlvl: "short const") -> "int":
    return _haznics.general_pminres(mxv, b, u, pc, tol, MaxIt, stop_type, prtlvl)

def dcsr_pvgmres(A: "dCSRmat", b: "dvector", x: "dvector", pc: "precond", tol: "double const", MaxIt: "int const", restart: "short const", stop_type: "short const", prtlvl: "short const") -> "int":
    return _haznics.dcsr_pvgmres(A, b, x, pc, tol, MaxIt, restart, stop_type, prtlvl)

def bdcsr_pvgmres(A: "block_dCSRmat", b: "dvector", x: "dvector", pc: "precond", tol: "double const", MaxIt: "int const", restart: "short const", stop_type: "short const", prtlvl: "short const") -> "int":
    return _haznics.bdcsr_pvgmres(A, b, x, pc, tol, MaxIt, restart, stop_type, prtlvl)

def general_pvgmres(mxv: "matvec", b: "dvector", x: "dvector", pc: "precond", tol: "double const", MaxIt: "int const", restart: "short const", stop_type: "short const", prtlvl: "short const") -> "int":
    return _haznics.general_pvgmres(mxv, b, x, pc, tol, MaxIt, restart, stop_type, prtlvl)

def dcsr_pvfgmres(A: "dCSRmat", b: "dvector", x: "dvector", pc: "precond", tol: "double const", MaxIt: "int const", restart: "short const", stop_type: "short const", prtlvl: "short const") -> "int":
    return _haznics.dcsr_pvfgmres(A, b, x, pc, tol, MaxIt, restart, stop_type, prtlvl)

def bdcsr_pvfgmres(A: "block_dCSRmat", b: "dvector", x: "dvector", pc: "precond", tol: "double const", MaxIt: "int const", restart: "short const", stop_type: "short const", prtlvl: "short const") -> "int":
    return _haznics.bdcsr_pvfgmres(A, b, x, pc, tol, MaxIt, restart, stop_type, prtlvl)

def general_pvfgmres(mxv: "matvec", b: "dvector", x: "dvector", pc: "precond", tol: "double const", MaxIt: "int const", restart: "short const", stop_type: "short const", prtlvl: "short const") -> "int":
    return _haznics.general_pvfgmres(mxv, b, x, pc, tol, MaxIt, restart, stop_type, prtlvl)

def mgcycle(mgl: "AMG_data", param: "AMG_param") -> "void":
    return _haznics.mgcycle(mgl, param)

def amli(mgl: "AMG_data", param: "AMG_param", level: "int") -> "void":
    return _haznics.amli(mgl, param, level)

def nl_amli(mgl: "AMG_data", param: "AMG_param", level: "int", num_levels: "int") -> "void":
    return _haznics.nl_amli(mgl, param, level, num_levels)

def mgcycle_add(mgl: "AMG_data", param: "AMG_param") -> "void":
    return _haznics.mgcycle_add(mgl, param)

def mgcycle_add_update(mgl: "AMG_data", param: "AMG_param") -> "void":
    return _haznics.mgcycle_add_update(mgl, param)

def mgcycle_block(bmgl: "MG_blk_data", param: "AMG_param") -> "void":
    return _haznics.mgcycle_block(bmgl, param)

def cascadic_eigen(mgl: "AMG_data", param: "AMG_param", level: "int", num_eigen: "int const") -> "void":
    return _haznics.cascadic_eigen(mgl, param, level, num_eigen)

def precond_diag(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_diag(r, z, data)

def precond_amg(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_amg(r, z, data)

def precond_famg(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_famg(r, z, data)

def precond_amli(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_amli(r, z, data)

def precond_famli(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_famli(r, z, data)

def precond_nl_amli(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_nl_amli(r, z, data)

def precond_amg_add(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_amg_add(r, z, data)

def precond_famg_add(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_famg_add(r, z, data)

def precond_famg_add2(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_famg_add2(r, z, data)

def precond_sum_famg_add(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_sum_famg_add(r, z, data)

def precond_sum_famg_add2(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_sum_famg_add2(r, z, data)

def precond_hx_curl_additive(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_hx_curl_additive(r, z, data)

def precond_hx_curl_multiplicative(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_hx_curl_multiplicative(r, z, data)

def precond_hx_div_additive_2D(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_hx_div_additive_2D(r, z, data)

def precond_hx_div_multiplicative_2D(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_hx_div_multiplicative_2D(r, z, data)

def precond_hx_div_additive(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_hx_div_additive(r, z, data)

def precond_hx_div_multiplicative(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_hx_div_multiplicative(r, z, data)

def precond_block_diag_2(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_2(r, z, data)

def precond_block_diag_2_amg(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_2_amg(r, z, data)

def precond_block_diag_2_amg_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_2_amg_krylov(r, z, data)

def precond_block_lower_2(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_2(r, z, data)

def precond_block_lower_2_amg(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_2_amg(r, z, data)

def precond_block_lower_2_amg_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_2_amg_krylov(r, z, data)

def precond_block_upper_2(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_2(r, z, data)

def precond_block_upper_2_amg(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_2_amg(r, z, data)

def precond_block_upper_2_amg_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_2_amg_krylov(r, z, data)

def precond_block_diag_3(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_3(r, z, data)

def precond_block_diag_3_amg(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_3_amg(r, z, data)

def precond_block_diag_3_amg_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_3_amg_krylov(r, z, data)

def precond_block_lower_3(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_3(r, z, data)

def precond_block_lower_3_amg(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_3_amg(r, z, data)

def precond_block_lower_3_amg_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_3_amg_krylov(r, z, data)

def precond_block_upper_3(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_3(r, z, data)

def precond_block_upper_3_amg(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_3_amg(r, z, data)

def precond_block_upper_3_amg_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_3_amg_krylov(r, z, data)

def precond_block_diag_4(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_4(r, z, data)

def precond_block_lower_4(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_4(r, z, data)

def precond_block_upper_4(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_4(r, z, data)

def precond_block_diag_5_amg_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_5_amg_krylov(r, z, data)

def precond_block_diag(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag(r, z, data)

def precond_block_diag_mixed_darcy(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_mixed_darcy(r, z, data)

def precond_block_lower_mixed_darcy(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_mixed_darcy(r, z, data)

def precond_block_upper_mixed_darcy(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_mixed_darcy(r, z, data)

def precond_block_diag_mixed_darcy_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_mixed_darcy_krylov(r, z, data)

def precond_block_lower_mixed_darcy_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_mixed_darcy_krylov(r, z, data)

def precond_block_upper_mixed_darcy_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_mixed_darcy_krylov(r, z, data)

def precond_block_diag_mixed_darcy_lap(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_mixed_darcy_lap(r, z, data)

def precond_block_diag_mixed_darcy_krylov_HX(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_mixed_darcy_krylov_HX(r, z, data)

def precond_block_lower_mixed_darcy_krylov_HX(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_mixed_darcy_krylov_HX(r, z, data)

def precond_block_upper_mixed_darcy_krylov_HX(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_mixed_darcy_krylov_HX(r, z, data)

def precond_block_lower_mixed_darcy_lap(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_mixed_darcy_lap(r, z, data)

def precond_block_upper_mixed_darcy_lap(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_mixed_darcy_lap(r, z, data)

def precond_block_ilu_mixed_darcy_lap(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_ilu_mixed_darcy_lap(r, z, data)

def precond_block_diag_mixed_darcy_lap_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_mixed_darcy_lap_krylov(r, z, data)

def precond_block_lower_mixed_darcy_lap_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_mixed_darcy_lap_krylov(r, z, data)

def precond_block_upper_mixed_darcy_lap_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_mixed_darcy_lap_krylov(r, z, data)

def precond_block_ilu_mixed_darcy_lap_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_ilu_mixed_darcy_lap_krylov(r, z, data)

def precond_block_ilu_mixed_darcy_graph_lap_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_ilu_mixed_darcy_graph_lap_krylov(r, z, data)

def precond_block_diag_biot_2field(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_biot_2field(r, z, data)

def precond_block_lower_biot_2field(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_biot_2field(r, z, data)

def precond_block_upper_biot_2field(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_biot_2field(r, z, data)

def precond_block_diag_biot_2field_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_biot_2field_krylov(r, z, data)

def precond_block_lower_biot_2field_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_biot_2field_krylov(r, z, data)

def precond_block_upper_biot_2field_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_biot_2field_krylov(r, z, data)

def precond_block_diag_biot_3field(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_biot_3field(r, z, data)

def precond_block_lower_biot_3field(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_biot_3field(r, z, data)

def precond_block_upper_biot_3field(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_biot_3field(r, z, data)

def precond_block_diag_biot_3field_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_biot_3field_krylov(r, z, data)

def precond_block_lower_biot_3field_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_biot_3field_krylov(r, z, data)

def precond_block_upper_biot_3field_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_biot_3field_krylov(r, z, data)

def precond_block_diag_maxwell(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_maxwell(r, z, data)

def precond_block_lower_maxwell(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_maxwell(r, z, data)

def precond_block_upper_maxwell(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_maxwell(r, z, data)

def precond_block_diag_maxwell_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_maxwell_krylov(r, z, data)

def precond_block_lower_maxwell_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_maxwell_krylov(r, z, data)

def precond_block_upper_maxwell_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_upper_maxwell_krylov(r, z, data)

def precond_block_lower_diag_maxwell(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_diag_maxwell(r, z, data)

def precond_block_diag_upper_maxwell(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_upper_maxwell(r, z, data)

def precond_block_lower_diag_upper_maxwell(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_diag_upper_maxwell(r, z, data)

def precond_block_lower_diag_maxwell_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_diag_maxwell_krylov(r, z, data)

def precond_block_diag_upper_maxwell_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_upper_maxwell_krylov(r, z, data)

def precond_block_lower_diag_upper_maxwell_krylov(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_lower_diag_upper_maxwell_krylov(r, z, data)

def precond_block_diag_bubble_stokes(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_bubble_stokes(r, z, data)

def precond_block_monolithic_mg(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_monolithic_mg(r, z, data)

def precond_elasticity(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_elasticity(r, z, data)

def precond_block_diag_3d1d(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block_diag_3d1d(r, z, data)

def precond_block2_babuska_diag(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block2_babuska_diag(r, z, data)

def precond_block2_babuska_lower(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block2_babuska_lower(r, z, data)

def precond_block2_babuska_upper(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_block2_babuska_upper(r, z, data)

def precond_rational_approx(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_rational_approx(r, z, data)

def precond_rational_approx_fenics(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_rational_approx_fenics(r, z, data)

def precond_ra_fenics(r: "double *", z: "double *", data: "void *") -> "void":
    return _haznics.precond_ra_fenics(r, z, data)

def Schwarz_get_block_matrix(Schwarz: "Schwarz_data", nblk: "int", iblock: "int *", jblock: "int *", mask: "int *") -> "void":
    return _haznics.Schwarz_get_block_matrix(Schwarz, nblk, iblock, jblock, mask)

def Schwarz_setup(Schwarz: "Schwarz_data", param: "Schwarz_param") -> "int":
    return _haznics.Schwarz_setup(Schwarz, param)

def Schwarz_get_patch_geometric(Schwarz: "Schwarz_data", mesh: "mesh_struct", patchTypeIN: "int", patchTypeOUT: "int") -> "void":
    return _haznics.Schwarz_get_patch_geometric(Schwarz, mesh, patchTypeIN, patchTypeOUT)

def Schwarz_get_patch_geometric_multiple_DOFtype(Schwarz: "Schwarz_data", mesh: "mesh_struct", patchTypeIN: "int", patchTypeOUT: "int *", nptype: "int") -> "void":
    return _haznics.Schwarz_get_patch_geometric_multiple_DOFtype(Schwarz, mesh, patchTypeIN, patchTypeOUT, nptype)

def Schwarz_setup_geometric(Schwarz: "Schwarz_data", param: "Schwarz_param", mesh: "mesh_struct") -> "int":
    return _haznics.Schwarz_setup_geometric(Schwarz, param, mesh)

def smoother_dcsr_jacobi(u: "dvector", i_1: "int const", i_n: "int const", s: "int const", A: "dCSRmat", b: "dvector", L: "int") -> "void":
    return _haznics.smoother_dcsr_jacobi(u, i_1, i_n, s, A, b, L)

def smoother_dcsr_gs(u: "dvector", i_1: "int const", i_n: "int const", s: "int const", A: "dCSRmat", b: "dvector", L: "int") -> "void":
    return _haznics.smoother_dcsr_gs(u, i_1, i_n, s, A, b, L)

def smoother_dcsr_sgs(u: "dvector", A: "dCSRmat", b: "dvector", L: "int") -> "void":
    return _haznics.smoother_dcsr_sgs(u, A, b, L)

def smoother_dcsr_sor(u: "dvector", i_1: "int const", i_n: "int const", s: "int const", A: "dCSRmat", b: "dvector", L: "int", w: "double const") -> "void":
    return _haznics.smoother_dcsr_sor(u, i_1, i_n, s, A, b, L, w)

def smoother_dcsr_L1diag(u: "dvector", i_1: "int const", i_n: "int const", s: "int const", A: "dCSRmat", b: "dvector", L: "int") -> "void":
    return _haznics.smoother_dcsr_L1diag(u, i_1, i_n, s, A, b, L)

def smoother_dcsr_Schwarz_forward(Schwarz: "Schwarz_data", param: "Schwarz_param", x: "dvector", b: "dvector") -> "void":
    return _haznics.smoother_dcsr_Schwarz_forward(Schwarz, param, x, b)

def smoother_dcsr_Schwarz_forward_additive(Schwarz: "Schwarz_data", param: "Schwarz_param", x: "dvector", b: "dvector", w: "double") -> "void":
    return _haznics.smoother_dcsr_Schwarz_forward_additive(Schwarz, param, x, b, w)

def smoother_dcsr_Schwarz_backward(Schwarz: "Schwarz_data", param: "Schwarz_param", x: "dvector", b: "dvector") -> "void":
    return _haznics.smoother_dcsr_Schwarz_backward(Schwarz, param, x, b)

def smoother_dcsr_Schwarz_backward_additive(Schwarz: "Schwarz_data", param: "Schwarz_param", x: "dvector", b: "dvector", w: "double") -> "void":
    return _haznics.smoother_dcsr_Schwarz_backward_additive(Schwarz, param, x, b, w)

def smoother_bdcsr_jacobi(u: "dvector", s: "int const", A: "block_dCSRmat", b: "dvector", L: "int") -> "void":
    return _haznics.smoother_bdcsr_jacobi(u, s, A, b, L)

def smoother_bdcsr_bsr(u: "dvector", b: "dvector", alpha: "double", w: "double", A: "block_dCSRmat", C: "dCSRmat", B: "dCSRmat", BT: "dCSRmat", M: "dCSRmat", L: "int") -> "void":
    return _haznics.smoother_bdcsr_bsr(u, b, alpha, w, A, C, B, BT, M, L)

def smoother_bdcsr_bsr_biot3(u: "dvector", b: "dvector", alpha: "double", w: "double", A: "block_dCSRmat", L: "int", mgl_disp: "AMG_data", bmgl: "MG_blk_data") -> "void":
    return _haznics.smoother_bdcsr_bsr_biot3(u, b, alpha, w, A, L, mgl_disp, bmgl)

def smoother_bdcsr_uzawa(u: "dvector", b: "dvector", alpha: "double", w: "double", A: "block_dCSRmat", C: "dCSRmat", B: "dCSRmat", M: "dCSRmat", L: "int") -> "void":
    return _haznics.smoother_bdcsr_uzawa(u, b, alpha, w, A, C, B, M, L)

def smoother_block_biot_3field(lvl: "int const", bmgl: "MG_blk_data", param: "AMG_param", pre_post: "int") -> "void":
    return _haznics.smoother_block_biot_3field(lvl, bmgl, param, pre_post)

def smoother_dcsr_gs_graph_eigen(u: "dvector", A: "dCSRmat", b: "dvector", i_1: "int const", i_n: "int const", s: "int const", nsmooth: "int const", num_eigen: "int const") -> "void":
    return _haznics.smoother_dcsr_gs_graph_eigen(u, A, b, i_1, i_n, s, nsmooth, num_eigen)

def smoother_dcsr_sgs_graph_eigen(u: "dvector", A: "dCSRmat", b: "dvector", nsmooth: "int const", num_eigen: "int const") -> "void":
    return _haznics.smoother_dcsr_sgs_graph_eigen(u, A, b, nsmooth, num_eigen)

def smoother_block_elasticity(lvl: "int const", bmgl: "MG_blk_data", param: "AMG_param", pre_post: "int") -> "void":
    return _haznics.smoother_block_elasticity(lvl, bmgl, param, pre_post)

def aresame(a: "int *", b: "int *", n: "int") -> "int":
    return _haznics.aresame(a, b, n)

def aresamep(a: "int *", b: "int *", n: "int", p: "int *") -> "int":
    return _haznics.aresamep(a, b, n, p)

def xins(n: "int", nodes: "int *", xs: "double *", xstar: "double *") -> "int":
    return _haznics.xins(n, nodes, xs, xstar)

def marks(sc: "scomplex", errors: "dvector") -> "void":
    return _haznics.marks(sc, errors)

def reflect2(n: "int", _is: "int", it: "int", sv1: "int *", sv2: "int *", stos1: "int *", stos2: "int *", visited: "int", wrk: "int *") -> "unsigned int":
    return _haznics.reflect2(n, _is, it, sv1, sv2, stos1, stos2, visited, wrk)

def abfstree(it0: "int const", sc: "scomplex", wrk: "int *", print_level: "int const") -> "void":
    return _haznics.abfstree(it0, sc, wrk, print_level)

def scfinest(sc: "scomplex") -> "scomplex *":
    return _haznics.scfinest(sc)

def scfinalize(sc: "scomplex") -> "void":
    return _haznics.scfinalize(sc)

def cube2simp_free(c2s: "cube2simp") -> "void":
    return _haznics.cube2simp_free(c2s)

def reverse(arr: "void *", length: "int", elsize: "size_t") -> "void":
    return _haznics.reverse(arr, length, elsize)

def cube2simplex(dim: "int") -> "cube2simp *":
    return _haznics.cube2simplex(dim)

def dvec_set_amr(value: "double const", sc: "scomplex", pts: "dvector", toset: "double *") -> "int":
    return _haznics.dvec_set_amr(value, sc, pts, toset)

def locate0(needle: "int", haystack: "int *", n: "int") -> "int":
    return _haznics.locate0(needle, haystack, n)

def array_null(x: "double *") -> "void":
    return _haznics.array_null(x)

def iarray_null(x: "int *") -> "void":
    return _haznics.iarray_null(x)

def array_set(n: "int const", x: "double *", val: "double const") -> "void":
    return _haznics.array_set(n, x, val)

def iarray_set(n: "int const", x: "int *", val: "int const") -> "void":
    return _haznics.iarray_set(n, x, val)

def array_cp(n: "int const", x: "double *", y: "double *") -> "void":
    return _haznics.array_cp(n, x, y)

def iarray_cp(n: "int const", x: "int *", y: "int *") -> "void":
    return _haznics.iarray_cp(n, x, y)

def array_shuffle(n: "int const", x: "double *") -> "void":
    return _haznics.array_shuffle(n, x)

def iarray_shuffle(n: "int const", x: "int *") -> "void":
    return _haznics.iarray_shuffle(n, x)

def array_ax(n: "int const", a: "double const", x: "double *") -> "void":
    return _haznics.array_ax(n, a, x)

def array_axpy(n: "int const", a: "double const", x: "double *", y: "double *") -> "void":
    return _haznics.array_axpy(n, a, x, y)

def array_axpyz(n: "int const", a: "double const", x: "double *", y: "double *", z: "double *") -> "void":
    return _haznics.array_axpyz(n, a, x, y, z)

def array_axpby(n: "int const", a: "double const", x: "double *", b: "double const", y: "double *") -> "void":
    return _haznics.array_axpby(n, a, x, b, y)

def array_dotprod(n: "int const", x: "double const *", y: "double const *") -> "double":
    return _haznics.array_dotprod(n, x, y)

def array_norm1(n: "int const", x: "double const *") -> "double":
    return _haznics.array_norm1(n, x)

def array_norm2(n: "int const", x: "double const *") -> "double":
    return _haznics.array_norm2(n, x)

def array_norminf(n: "int const", x: "double const *") -> "double":
    return _haznics.array_norminf(n, x)

def array_normp(n: "int const", x: "double const *", p: "int const") -> "double":
    return _haznics.array_normp(n, x, p)

def det3D(mydet: "double *", vec1: "double *", vec2: "double *", vec3: "double *") -> "void":
    return _haznics.det3D(mydet, vec1, vec2, vec3)

def cross_product(u: "double *", v: "double *", cross: "double *", mag: "double *") -> "void":
    return _haznics.cross_product(u, v, cross, mag)

def constant_coeff_scal(val: "double *", x: "double *", constval: "double", param: "void *") -> "void":
    return _haznics.constant_coeff_scal(val, x, constval, param)

def constant_coeff_vec2D(val: "double *", x: "double *", constval: "double", param: "void *") -> "void":
    return _haznics.constant_coeff_vec2D(val, x, constval, param)

def constant_coeff_vec3D(val: "double *", x: "double *", constval: "double", param: "void *") -> "void":
    return _haznics.constant_coeff_vec3D(val, x, constval, param)

def zero_coeff_scal(val: "double *", x: "double *", time: "double", param: "void *") -> "void":
    return _haznics.zero_coeff_scal(val, x, time, param)

def zero_coeff_vec2D(val: "double *", x: "double *", time: "double", param: "void *") -> "void":
    return _haznics.zero_coeff_vec2D(val, x, time, param)

def zero_coeff_vec3D(val: "double *", x: "double *", time: "double", param: "void *") -> "void":
    return _haznics.zero_coeff_vec3D(val, x, time, param)

def one_coeff_scal(val: "double *", x: "double *", time: "double", param: "void *") -> "void":
    return _haznics.one_coeff_scal(val, x, time, param)

def one_coeff_vec2D(val: "double *", x: "double *", time: "double", param: "void *") -> "void":
    return _haznics.one_coeff_vec2D(val, x, time, param)

def one_coeff_vec3D(val: "double *", x: "double *", time: "double", param: "void *") -> "void":
    return _haznics.one_coeff_vec3D(val, x, time, param)

def precond_data_null(pcdata: "precond_data") -> "void":
    return _haznics.precond_data_null(pcdata)

def amg_data_create(max_levels: "short") -> "AMG_data *":
    return _haznics.amg_data_create(max_levels)

def amg_data_free(mgl: "AMG_data", param: "AMG_param") -> "void":
    return _haznics.amg_data_free(mgl, param)

def mg_blk_data_create(max_levels: "short") -> "MG_blk_data *":
    return _haznics.mg_blk_data_create(max_levels)

def HX_curl_data_null(hxcurldata: "HX_curl_data") -> "void":
    return _haznics.HX_curl_data_null(hxcurldata)

def HX_curl_data_free(hxcurldata: "HX_curl_data", flag: "short") -> "void":
    return _haznics.HX_curl_data_free(hxcurldata, flag)

def HX_div_data_null(hxdivdata: "HX_div_data") -> "void":
    return _haznics.HX_div_data_null(hxdivdata)

def HX_div_data_free(hxdivdata: "HX_div_data", flag: "short") -> "void":
    return _haznics.HX_div_data_free(hxdivdata, flag)

def precond_null(pcdata: "precond") -> "void":
    return _haznics.precond_null(pcdata)

def precond_block_data_null(precdata: "precond_block_data") -> "void":
    return _haznics.precond_block_data_null(precdata)

def precond_block_data_free(precdata: "precond_block_data", nb: "int const", flag: "short") -> "void":
    return _haznics.precond_block_data_free(precdata, nb, flag)

def ddense_create(n: "int const", m: "int const") -> "dDENSEmat":
    return _haznics.ddense_create(n, m)

def ddense_alloc(n: "int const", m: "int const", A: "dDENSEmat") -> "void":
    return _haznics.ddense_alloc(n, m, A)

def ddense_set(A: "dDENSEmat", val: "double") -> "void":
    return _haznics.ddense_set(A, val)

def ddense_free(A: "dDENSEmat") -> "void":
    return _haznics.ddense_free(A)

def ddense_cp(A: "dDENSEmat", B: "dDENSEmat") -> "void":
    return _haznics.ddense_cp(A, B)

def ddense_random_JL(k: "int const", d: "int const") -> "dDENSEmat":
    return _haznics.ddense_random_JL(k, d)

def find_det_4(A: "double *", deta: "double *") -> "void":
    return _haznics.find_det_4(A, deta)

def fenics_amg_data_setup(A: "dCSRmat", mgl: "AMG_data", amgparam: "AMG_param") -> "int":
    return _haznics.fenics_amg_data_setup(A, mgl, amgparam)

def fenics_famg_data_setup(A: "dCSRmat", M: "dCSRmat", mgl: "AMG_data", amgparam: "AMG_param") -> "int":
    return _haznics.fenics_famg_data_setup(A, M, mgl, amgparam)

def fenics_precond_data_setup(mgl: "AMG_data", amgparam: "AMG_param", pcdata: "precond_data") -> "void":
    return _haznics.fenics_precond_data_setup(mgl, amgparam, pcdata)

def precond_data_alloc(max_size: "short") -> "precond_data *":
    return _haznics.precond_data_alloc(max_size)

def amg_param_alloc(max_size: "short") -> "AMG_param *":
    return _haznics.amg_param_alloc(max_size)

def save_poles_residues(k: "int", poles: "double *", residues: "double *", pcdata: "precond_data") -> "void":
    return _haznics.save_poles_residues(k, poles, residues, pcdata)

def precond_block_data_alloc(max_size: "short") -> "precond_block_data *":
    return _haznics.precond_block_data_alloc(max_size)

def fenics_precond_block_data_setup(A: "block_dCSRmat", mgl: "AMG_data **", amgparam: "AMG_param", scaled_M: "dCSRmat", diag_scaled_M: "dvector", scaled_alpha: "double", scaled_beta: "double", poles: "dvector", residues: "dvector", pcdata: "precond_block_data") -> "void":
    return _haznics.fenics_precond_block_data_setup(A, mgl, amgparam, scaled_M, diag_scaled_M, scaled_alpha, scaled_beta, poles, residues, pcdata)

def fenics_ra_setup(A: "dCSRmat", M: "dCSRmat", s_frac_power: "double", t_frac_power: "double", alpha: "double", beta: "double", scaling_a: "double", scaling_m: "double", amgparam: "AMG_param", pcdata: "precond_block_data") -> "int":
    return _haznics.fenics_ra_setup(A, M, s_frac_power, t_frac_power, alpha, beta, scaling_a, scaling_m, amgparam, pcdata)

def precond_ra_data_null(precdata: "precond_ra_data") -> "void":
    return _haznics.precond_ra_data_null(precdata)

def precond_ra_data_alloc(max_size: "short") -> "precond_ra_data *":
    return _haznics.precond_ra_data_alloc(max_size)

def fenics_precond_ra_data_setup(A: "dCSRmat", M: "dCSRmat", s_frac_power: "double", t_frac_power: "double", alpha: "double", beta: "double", scaling_a: "double", scaling_m: "double", amgparam: "AMG_param", pcdata: "precond_ra_data") -> "int":
    return _haznics.fenics_precond_ra_data_setup(A, M, s_frac_power, t_frac_power, alpha, beta, scaling_a, scaling_m, amgparam, pcdata)

def precond_block_data_print(precdata: "precond_block_data", flag: "short") -> "void":
    return _haznics.precond_block_data_print(precdata, flag)

def array_calloc(n: "int const") -> "double *":
    return _haznics.array_calloc(n)

def dcsr_calloc(n: "int const") -> "dCSRmat *":
    return _haznics.dcsr_calloc(n)

def stupid_append_function(k: "int const", A_n: "dCSRmat", A_diag_ptr: "dCSRmat") -> "void":
    return _haznics.stupid_append_function(k, A_n, A_diag_ptr)

def HX_curl_data_alloc(max_size: "short") -> "HX_curl_data *":
    return _haznics.HX_curl_data_alloc(max_size)

def fenics_HX_curl_data_setup(Acurl: "dCSRmat", Pcurl: "dCSRmat", Grad: "dCSRmat", amgparam: "AMG_param", hxcurldata: "HX_curl_data") -> "int":
    return _haznics.fenics_HX_curl_data_setup(Acurl, Pcurl, Grad, amgparam, hxcurldata)

def HX_div_data_alloc(max_size: "short") -> "HX_div_data *":
    return _haznics.HX_div_data_alloc(max_size)

def fenics_HX_div_data_3D_setup(Adiv: "dCSRmat", P_div: "dCSRmat", Curl: "dCSRmat", P_curl: "dCSRmat", amgparam: "AMG_param", hxdivdata: "HX_div_data") -> "int":
    return _haznics.fenics_HX_div_data_3D_setup(Adiv, P_div, Curl, P_curl, amgparam, hxdivdata)

def fenics_HX_div_data_2D_setup(Adiv: "dCSRmat", P_div: "dCSRmat", Curl: "dCSRmat", amgparam: "AMG_param", hxdivdata: "HX_div_data") -> "int":
    return _haznics.fenics_HX_div_data_2D_setup(Adiv, P_div, Curl, amgparam, hxdivdata)

def smoother_data_null(smdata: "smoother_data") -> "void":
    return _haznics.smoother_data_null(smdata)

def smoother_data_free(smdata: "smoother_data") -> "void":
    return _haznics.smoother_data_free(smdata)

def smoother_data_alloc(max_size: "short") -> "smoother_data *":
    return _haznics.smoother_data_alloc(max_size)

def fenics_smoother_data_setup(istart: "int", iend: "int", istep: "int", nsweeps: "int", relax: "double", A: "dCSRmat", smdata: "smoother_data") -> "void":
    return _haznics.fenics_smoother_data_setup(istart, iend, istep, nsweeps, relax, A, smdata)

def smoother_matvec_null(smmv: "smoother_matvec") -> "void":
    return _haznics.smoother_matvec_null(smmv)

def smoother_matvec_alloc(max_size: "short") -> "smoother_matvec *":
    return _haznics.smoother_matvec_alloc(max_size)

def bdcsr_2_dcsr(Ab: "block_dCSRmat") -> "dCSRmat":
    return _haznics.bdcsr_2_dcsr(Ab)

def bdcsr_subblk_2_dcsr(Ab: "block_dCSRmat", brow_start: "int", brow_end: "int", bcol_start: "int", bcol_end: "int") -> "dCSRmat":
    return _haznics.bdcsr_subblk_2_dcsr(Ab, brow_start, brow_end, bcol_start, bcol_end)

def dcsr_2_bdcsr(A: "dCSRmat", bnum: "int", bsize: "int *") -> "block_dCSRmat":
    return _haznics.dcsr_2_bdcsr(A, bnum, bsize)

def dcoo_2_dcsr(A: "dCOOmat", B: "dCSRmat") -> "short":
    return _haznics.dcoo_2_dcsr(A, B)

def array_2_coord(xyz: "double *", ndof: "int", dim: "int") -> "coordinates *":
    return _haznics.array_2_coord(xyz, ndof, dim)

def dcoo_2_dcsr_p(A: "dCOOmat") -> "dCSRmat *":
    return _haznics.dcoo_2_dcsr_p(A)

def param_input(filenm: "char const *", inparam: "input_param") -> "void":
    return _haznics.param_input(filenm, inparam)

def chkn(n: "int", nmin: "int const", nmax: "int const") -> "int":
    return _haznics.chkn(n, nmin, nmax)

def iarray_print(vec: "int *", n: "int") -> "void":
    return _haznics.iarray_print(vec, n)

def array_print(vec: "double *", n: "int") -> "void":
    return _haznics.array_print(vec, n)

def ivector_write(filename: "char const *", vec: "ivector") -> "void":
    return _haznics.ivector_write(filename, vec)

def dvector_print(fid: "FILE *", b: "dvector") -> "void":
    return _haznics.dvector_print(fid, b)

def dvector_write(filename: "char const *", vec: "dvector") -> "void":
    return _haznics.dvector_write(filename, vec)

def dvector_read(filename: "char const *", b: "dvector") -> "void":
    return _haznics.dvector_read(filename, b)

def ivector_print(fid: "FILE *", b: "ivector") -> "void":
    return _haznics.ivector_print(fid, b)

def print_full_mat(n: "int const", m: "int const", A: "double *", varname: "char const *") -> "void":
    return _haznics.print_full_mat(n, m, A, varname)

def print_full_mat_int(n: "int const", m: "int const", A: "int *", varname: "char const *") -> "void":
    return _haznics.print_full_mat_int(n, m, A, varname)

def csr_print_matlab(fid: "FILE *", A: "dCSRmat") -> "void":
    return _haznics.csr_print_matlab(fid, A)

def bdcsr_print_matlab(fid: "FILE *", A: "block_dCSRmat") -> "void":
    return _haznics.bdcsr_print_matlab(fid, A)

def csr_print_native(fid: "FILE *", A: "dCSRmat", rhs: "dvector") -> "void":
    return _haznics.csr_print_native(fid, A, rhs)

def icsr_print_matlab(fid: "FILE *", A: "iCSRmat") -> "void":
    return _haznics.icsr_print_matlab(fid, A)

def icsr_print_matlab_val(fid: "FILE *", A: "iCSRmat") -> "void":
    return _haznics.icsr_print_matlab_val(fid, A)

def dvec_write(filename: "char const *", vec: "dvector") -> "void":
    return _haznics.dvec_write(filename, vec)

def ddense_write(filename: "char const *", A: "dDENSEmat") -> "void":
    return _haznics.ddense_write(filename, A)

def dcsr_write_dcoo(filename: "char const *", A: "dCSRmat") -> "void":
    return _haznics.dcsr_write_dcoo(filename, A)

def bdcsr_write_dcoo(filename: "char const *", A: "block_dCSRmat") -> "void":
    return _haznics.bdcsr_write_dcoo(filename, A)

def dcoo_read_dcsr(filename: "char const *", A: "dCSRmat") -> "void":
    return _haznics.dcoo_read_dcsr(filename, A)

def rveci_(fp: "FILE *", vec: "int *", nn: "int *") -> "void":
    return _haznics.rveci_(fp, vec, nn)

def rvecd_(fp: "FILE *", vec: "double *", nn: "int *") -> "void":
    return _haznics.rvecd_(fp, vec, nn)

def HAZ_fopen(fname: "char *", mode: "char *") -> "FILE *":
    return _haznics.HAZ_fopen(fname, mode)

def dump_sol_onV_vtk(namevtk: "char *", mesh: "mesh_struct", sol: "double *", ncomp: "int") -> "void":
    return _haznics.dump_sol_onV_vtk(namevtk, mesh, sol, ncomp)

def dump_sol_vtk(namevtk: "char *", varname: "char *", mesh: "mesh_struct", FE: "fespace", sol: "double *") -> "void":
    return _haznics.dump_sol_vtk(namevtk, varname, mesh, FE, sol)

def dump_blocksol_vtk(namevtk: "char *", varname: "char **", mesh: "mesh_struct", FE: "block_fespace", sol: "double *") -> "void":
    return _haznics.dump_blocksol_vtk(namevtk, varname, mesh, FE, sol)

def create_pvd(namepvd: "char *", nfiles: "int", vtkfilename: "char *", filetype: "char *") -> "void":
    return _haznics.create_pvd(namepvd, nfiles, vtkfilename, filetype)

def debug_print(string: "char *", kill: "int") -> "void":
    return _haznics.debug_print(string, kill)

def hazr(namein: "char *") -> "scomplex *":
    return _haznics.hazr(namein)

def hazw(nameout: "char *", sc: "scomplex", shift: "int const") -> "void":
    return _haznics.hazw(nameout, sc, shift)

def vtkw(namevtk: "char *", sc: "scomplex", shift: "int const", zscale: "double const") -> "void":
    return _haznics.vtkw(namevtk, sc, shift, zscale)

def matlw(sc: "scomplex", namematl: "char *") -> "void":
    return _haznics.matlw(sc, namematl)

def print_matlab_vector_field(ux: "dvector", uy: "dvector", uz: "dvector", FE: "fespace") -> "void":
    return _haznics.print_matlab_vector_field(ux, uy, uz, FE)

def dcoo_read_eof_dcsr_p(fp: "FILE *", size: "int *") -> "dCSRmat *":
    return _haznics.dcoo_read_eof_dcsr_p(fp, size)

def dvector_read_eof_p(fp: "FILE *") -> "dvector *":
    return _haznics.dvector_read_eof_p(fp)

def dcoo_read_dcsr_p(fp: "FILE *") -> "dCSRmat *":
    return _haznics.dcoo_read_dcsr_p(fp)

def dvector_read_p(fp: "FILE *") -> "dvector *":
    return _haznics.dvector_read_p(fp)

def print_itsolver_info(print_lvl: "int const", stop_type: "int const", iter: "int const", rel_res: "double const", abs_res: "double const", factor: "double const") -> "void":
    return _haznics.print_itsolver_info(print_lvl, stop_type, iter, rel_res, abs_res, factor)

def print_cputime(message: "char const *", cputime: "double const") -> "void":
    return _haznics.print_cputime(message, cputime)

def print_message(print_lvl: "int const", message: "char const *") -> "void":
    return _haznics.print_message(print_lvl, message)

def print_amg_complexity(mgl: "AMG_data", print_lvl: "short const") -> "void":
    return _haznics.print_amg_complexity(mgl, print_lvl)

def check_error(status: "short const", func_name: "char const *") -> "void":
    return _haznics.check_error(status, func_name)

def error_extlib(status: "short const", func_name: "char const *", lib_name: "char const *") -> "void":
    return _haznics.error_extlib(status, func_name, lib_name)

def param_input_init(inparam: "input_param") -> "void":
    return _haznics.param_input_init(inparam)

def param_amg_init(amgparam: "AMG_param") -> "void":
    return _haznics.param_amg_init(amgparam)

def param_Schwarz_init(schparam: "Schwarz_param") -> "void":
    return _haznics.param_Schwarz_init(schparam)

def param_linear_solver_init(itsparam: "linear_itsolver_param") -> "void":
    return _haznics.param_linear_solver_init(itsparam)

def param_linear_solver_set(itsparam: "linear_itsolver_param", inparam: "input_param") -> "void":
    return _haznics.param_linear_solver_set(itsparam, inparam)

def param_amg_set(amgparam: "AMG_param", inparam: "input_param") -> "void":
    return _haznics.param_amg_set(amgparam, inparam)

def param_amg_cp(amgparam1: "AMG_param", amgparam2: "AMG_param") -> "void":
    return _haznics.param_amg_cp(amgparam1, amgparam2)

def param_Schwarz_set(schparam: "Schwarz_param", inparam: "input_param") -> "void":
    return _haznics.param_Schwarz_set(schparam, inparam)

def param_linear_solver_print(itsparam: "linear_itsolver_param") -> "void":
    return _haznics.param_linear_solver_print(itsparam)

def param_amg_print(amgparam: "AMG_param") -> "void":
    return _haznics.param_amg_print(amgparam)

def param_Schwarz_print(schparam: "Schwarz_param") -> "void":
    return _haznics.param_Schwarz_print(schparam)

def param_amg_to_prec(pcdata: "precond_data", amgparam: "AMG_param") -> "void":
    return _haznics.param_amg_to_prec(pcdata, amgparam)

def param_prec_to_amg(amgparam: "AMG_param", pcdata: "precond_data") -> "void":
    return _haznics.param_prec_to_amg(amgparam, pcdata)

def amg_amli_coef(lambda_max: "double const", lambda_min: "double const", degree: "int const", coef: "double *") -> "void":
    return _haznics.amg_amli_coef(lambda_max, lambda_min, degree, coef)

def solve_pivot(dopivot: "int", n: "int", A: "double *", b: "double *", p: "int *", piv: "double *") -> "int":
    return _haznics.solve_pivot(dopivot, n, A, b, p, piv)

def lufull(dopivot: "int", n: "int", deta: "double *", A: "double *", p: "int *", piv: "double *") -> "short":
    return _haznics.lufull(dopivot, n, deta, A, p, piv)

def invfull(Ainv: "double *", n: "int", A: "double *", wrk: "void *") -> "void":
    return _haznics.invfull(Ainv, n, A, wrk)

def abybfull(m: "int const", p: "int const", c: "double *", a: "double *", b: "double *", n: "int const") -> "void":
    return _haznics.abybfull(m, p, c, a, b, n)

def abyvfull(m: "int const", y: "double *", a: "double *", x: "double *", n: "int const") -> "void":
    return _haznics.abyvfull(m, y, a, x, n)

def atbyvfull(m: "int const", y: "double *", a: "double *", x: "double *", n: "int const") -> "void":
    return _haznics.atbyvfull(m, y, a, x, n)

def qr_full(m: "int const", n: "int const", A: "double *", Q: "double *", R: "double *") -> "void":
    return _haznics.qr_full(m, n, A, Q, R)

def svd_full(m: "int", n: "int", A: "double *", U: "double *", VT: "double *", S: "double *", computeUV: "int") -> "int":
    return _haznics.svd_full(m, n, A, U, VT, S, computeUV)

def qr_full_lapack(m: "int", n: "int", A: "double *", Q: "double *", R: "double *", computeR: "int") -> "int":
    return _haznics.qr_full_lapack(m, n, A, Q, R, computeR)

def c2r(n: "int const", m: "int const", sizeel: "size_t const", x: "void *") -> "void":
    return _haznics.c2r(n, m, sizeel, x)

def r2c(n: "int const", m: "int const", sizeel: "size_t const", x: "void *") -> "void":
    return _haznics.r2c(n, m, sizeel, x)

def solve_pivot_l(dopivot: "int", n: "int", A: "long double *", b: "long double *", p: "int *", piv: "long double *") -> "int":
    return _haznics.solve_pivot_l(dopivot, n, A, b, p, piv)

def dlexsort(nr: "int const", nc: "int const", a: "double *", p: "int *") -> "void":
    return _haznics.dlexsort(nr, nc, a, p)

def ilexsort(nr: "int const", nc: "int const", a: "int *", p: "int *") -> "void":
    return _haznics.ilexsort(nr, nc, a, p)

def isi_sort(n: "int", a: "int *") -> "void":
    return _haznics.isi_sort(n, a)

def isi_sortp(n: "int const", a: "int *", p: "int *", invp: "int *") -> "void":
    return _haznics.isi_sortp(n, a, p, invp)

def dsi_sortp(n: "int const", a: "double *", p: "int *", invp: "int *") -> "void":
    return _haznics.dsi_sortp(n, a, p, invp)

def dcsr_create(m: "int const", n: "int const", nnz: "int const") -> "dCSRmat":
    return _haznics.dcsr_create(m, n, nnz)

def dcsr_create_zeromatrix(m: "int const", n: "int const", index_start: "int const") -> "dCSRmat":
    return _haznics.dcsr_create_zeromatrix(m, n, index_start)

def dcsr_create_fullmatrix(m: "int const", n: "int const") -> "dCSRmat":
    return _haznics.dcsr_create_fullmatrix(m, n)

def dcsr_set_zeromatrix(A: "dCSRmat", m: "int const", n: "int const", index_start: "int const") -> "void":
    return _haznics.dcsr_set_zeromatrix(A, m, n, index_start)

def dcsr_create_single_nnz_matrix(m: "int const", n: "int const", row: "int const", col: "int const", val: "double const", index_start: "int const") -> "dCSRmat":
    return _haznics.dcsr_create_single_nnz_matrix(m, n, row, col, val, index_start)

def dcsr_create_identity_matrix(m: "int const", index_start: "int const") -> "dCSRmat":
    return _haznics.dcsr_create_identity_matrix(m, index_start)

def dcsr_alloc(m: "int const", n: "int const", nnz: "int const", A: "dCSRmat") -> "void":
    return _haznics.dcsr_alloc(m, n, nnz, A)

def dcoo_create(m: "int", n: "int", nnz: "int") -> "dCOOmat":
    return _haznics.dcoo_create(m, n, nnz)

def dcoo_alloc(m: "int const", n: "int const", nnz: "int const", A: "dCOOmat") -> "void":
    return _haznics.dcoo_alloc(m, n, nnz, A)

def dcoo_free(A: "dCOOmat") -> "void":
    return _haznics.dcoo_free(A)

def icoo_free(A: "iCOOmat") -> "void":
    return _haznics.icoo_free(A)

def icsr_create(m: "int const", n: "int const", nnz: "int const") -> "iCSRmat":
    return _haznics.icsr_create(m, n, nnz)

def icsr_create_identity(m: "int const", index_start: "int const") -> "iCSRmat":
    return _haznics.icsr_create_identity(m, index_start)

def dcsr_free(A: "dCSRmat") -> "void":
    return _haznics.dcsr_free(A)

def icsr_free(A: "iCSRmat") -> "void":
    return _haznics.icsr_free(A)

def dcsr_null(A: "dCSRmat") -> "void":
    return _haznics.dcsr_null(A)

def icsr_null(A: "iCSRmat") -> "void":
    return _haznics.icsr_null(A)

def dcsr_perm(A: "dCSRmat", P: "int *") -> "dCSRmat":
    return _haznics.dcsr_perm(A, P)

def icsr_cp(A: "iCSRmat", B: "iCSRmat") -> "void":
    return _haznics.icsr_cp(A, B)

def dcsr_cp(A: "dCSRmat", B: "dCSRmat") -> "void":
    return _haznics.dcsr_cp(A, B)

def dcsr_trans(A: "dCSRmat", AT: "dCSRmat") -> "int":
    return _haznics.dcsr_trans(A, AT)

def dcsr_transz(A: "dCSRmat", p: "int *", AT: "dCSRmat") -> "void":
    return _haznics.dcsr_transz(A, p, AT)

def icsr_trans(A: "iCSRmat", AT: "iCSRmat") -> "void":
    return _haznics.icsr_trans(A, AT)

def icsr_concat(A: "iCSRmat", B: "iCSRmat", C: "iCSRmat") -> "void":
    return _haznics.icsr_concat(A, B, C)

def dcsr_compress(A: "dCSRmat", B: "dCSRmat", dtol: "double") -> "void":
    return _haznics.dcsr_compress(A, B, dtol)

def dcsr_compress_inplace(A: "dCSRmat", dtol: "double") -> "short":
    return _haznics.dcsr_compress_inplace(A, dtol)

def dcsr_shift(A: "dCSRmat", offset: "int") -> "void":
    return _haznics.dcsr_shift(A, offset)

def icsr_shift(A: "iCSRmat", offset: "int") -> "void":
    return _haznics.icsr_shift(A, offset)

def dcsr_add(A: "dCSRmat", alpha: "double const", B: "dCSRmat", beta: "double const", C: "dCSRmat") -> "int":
    return _haznics.dcsr_add(A, alpha, B, beta, C)

def dcsr_axm(A: "dCSRmat", alpha: "double const") -> "void":
    return _haznics.dcsr_axm(A, alpha)

def dcsr_mxv(A: "dCSRmat", x: "double *", y: "double *") -> "void":
    return _haznics.dcsr_mxv(A, x, y)

def dcsr_mxv_forts(At: "void *", x: "double *", y: "double *") -> "void":
    return _haznics.dcsr_mxv_forts(At, x, y)

def dcsr_mxv_agg(A: "dCSRmat", x: "double *", y: "double *") -> "void":
    return _haznics.dcsr_mxv_agg(A, x, y)

def dcsr_aAxpy(alpha: "double const", A: "dCSRmat", x: "double *", y: "double *") -> "void":
    return _haznics.dcsr_aAxpy(alpha, A, x, y)

def dcsr_aAxpy_agg(alpha: "double const", A: "dCSRmat", x: "double *", y: "double *") -> "void":
    return _haznics.dcsr_aAxpy_agg(alpha, A, x, y)

def dcsr_vmv(A: "dCSRmat", x: "double *", y: "double *") -> "double":
    return _haznics.dcsr_vmv(A, x, y)

def dcsr_mxm(A: "dCSRmat", B: "dCSRmat", C: "dCSRmat") -> "void":
    return _haznics.dcsr_mxm(A, B, C)

def icsr_mxm_symb(A: "iCSRmat", B: "iCSRmat", C: "iCSRmat") -> "void":
    return _haznics.icsr_mxm_symb(A, B, C)

def icsr_mxm(A: "iCSRmat", B: "iCSRmat", C: "iCSRmat") -> "void":
    return _haznics.icsr_mxm(A, B, C)

def icsr_mxm_symb_max(A: "iCSRmat", B: "iCSRmat", C: "iCSRmat", multmax: "int") -> "void":
    return _haznics.icsr_mxm_symb_max(A, B, C, multmax)

def dcsr_create_diagonal_matrix(diag: "dvector") -> "dCSRmat":
    return _haznics.dcsr_create_diagonal_matrix(diag)

def dcsr_getdiag(n: "int", A: "dCSRmat", diag: "dvector") -> "void":
    return _haznics.dcsr_getdiag(n, A, diag)

def dcsr_getdiag_pow(n: "int", p: "double", A: "dCSRmat", diag: "dvector") -> "void":
    return _haznics.dcsr_getdiag_pow(n, p, A, diag)

def dcsr_shiftdiag(n: "int", A: "dCSRmat", shifts: "dvector") -> "void":
    return _haznics.dcsr_shiftdiag(n, A, shifts)

def dcsr_row_scale(A: "dCSRmat", row_scale: "dvector") -> "void":
    return _haznics.dcsr_row_scale(A, row_scale)

def dcsr_diagpref(A: "dCSRmat") -> "void":
    return _haznics.dcsr_diagpref(A)

def dcsr_rap(R: "dCSRmat", A: "dCSRmat", P: "dCSRmat", RAP: "dCSRmat") -> "void":
    return _haznics.dcsr_rap(R, A, P, RAP)

def dcsr_rap_agg(R: "dCSRmat", A: "dCSRmat", P: "dCSRmat", RAP: "dCSRmat") -> "void":
    return _haznics.dcsr_rap_agg(R, A, P, RAP)

def dcsr_getblk(A: "dCSRmat", Is: "int *", Js: "int *", m: "int const", n: "int const", B: "dCSRmat") -> "short":
    return _haznics.dcsr_getblk(A, Is, Js, m, n, B)

def dcsr_delete_rowcol(A: "dCSRmat", delete_row: "int *", delete_col: "int *", B: "dCSRmat") -> "short":
    return _haznics.dcsr_delete_rowcol(A, delete_row, delete_col, B)

def dcsr_bandwith(A: "dCSRmat", bndwith: "int *") -> "void":
    return _haznics.dcsr_bandwith(A, bndwith)

def dcsr_sympat(A: "dCSRmat") -> "dCSRmat":
    return _haznics.dcsr_sympat(A)

def icsr_nodiag(a: "iCSRmat") -> "void":
    return _haznics.icsr_nodiag(a)

def icsr_clean_zeros(a: "iCSRmat") -> "void":
    return _haznics.icsr_clean_zeros(a)

def icsr_tri(a: "iCSRmat", loup: "char const") -> "void":
    return _haznics.icsr_tri(a, loup)

def bdcsr_alloc_minimal(brow: "int const", bcol: "int const", A: "block_dCSRmat") -> "void":
    return _haznics.bdcsr_alloc_minimal(brow, bcol, A)

def bdcsr_alloc(brow: "int const", bcol: "int const", A: "block_dCSRmat") -> "void":
    return _haznics.bdcsr_alloc(brow, bcol, A)

def bdcsr_free_minimal(A: "block_dCSRmat") -> "void":
    return _haznics.bdcsr_free_minimal(A)

def bdcsr_free(A: "block_dCSRmat") -> "void":
    return _haznics.bdcsr_free(A)

def bdcsr_cp(A: "block_dCSRmat", B: "block_dCSRmat") -> "void":
    return _haznics.bdcsr_cp(A, B)

def bdcsr_trans(A: "block_dCSRmat", AT: "block_dCSRmat") -> "void":
    return _haznics.bdcsr_trans(A, AT)

def bdcsr_add(A: "block_dCSRmat", alpha: "double const", B: "block_dCSRmat", beta: "double const", C: "block_dCSRmat") -> "int":
    return _haznics.bdcsr_add(A, alpha, B, beta, C)

def bdcsr_aAxpy(alpha: "double const", A: "block_dCSRmat", x: "double *", y: "double *") -> "void":
    return _haznics.bdcsr_aAxpy(alpha, A, x, y)

def bdcsr_mxv(A: "block_dCSRmat", x: "double *", y: "double *") -> "void":
    return _haznics.bdcsr_mxv(A, x, y)

def bdcsr_shift(A: "block_dCSRmat", shift: "int") -> "void":
    return _haznics.bdcsr_shift(A, shift)

def bdcsr_mxv_forts(At: "void *", x: "double *", y: "double *") -> "void":
    return _haznics.bdcsr_mxv_forts(At, x, y)

def bdcsr_delete_rowcol(A: "block_dCSRmat", delete_row: "int *", delete_col: "int *", B: "block_dCSRmat") -> "short":
    return _haznics.bdcsr_delete_rowcol(A, delete_row, delete_col, B)

def sparse_MIS(A: "dCSRmat", iord: "int *") -> "ivector *":
    return _haznics.sparse_MIS(A, iord)

def dcsr_create_p(m: "int const", n: "int const", nnz: "int const") -> "dCSRmat *":
    return _haznics.dcsr_create_p(m, n, nnz)

def dcoo_create_p(m: "int", n: "int", nnz: "int") -> "dCOOmat *":
    return _haznics.dcoo_create_p(m, n, nnz)

def dvec_create_p(m: "int const") -> "dvector *":
    return _haznics.dvec_create_p(m)

def icsr_create_p(m: "int const", n: "int const", nnz: "int const") -> "iCSRmat *":
    return _haznics.icsr_create_p(m, n, nnz)

def ivec_create_p(m: "int const") -> "ivector *":
    return _haznics.ivec_create_p(m)

def dcsr_alloc_p(m: "int const", n: "int const", nnz: "int const", A: "dCSRmat **") -> "void":
    return _haznics.dcsr_alloc_p(m, n, nnz, A)

def dvec_alloc_p(m: "int const", u: "dvector **") -> "void":
    return _haznics.dvec_alloc_p(m, u)

def ivec_alloc_p(m: "int const", u: "ivector **") -> "void":
    return _haznics.ivec_alloc_p(m, u)

def dcsr_create_plus(m: "int", n: "int", nnz: "int", ia: "void *", ja: "void *", aij: "void *") -> "dCSRmat *":
    return _haznics.dcsr_create_plus(m, n, nnz, ia, ja, aij)

def dcsr_alloc_plus(m: "int", n: "int", nnz: "int", ia: "void *", ja: "void *", aij: "void *", A: "dCSRmat") -> "void":
    return _haznics.dcsr_alloc_plus(m, n, nnz, ia, ja, aij, A)

def dvec_create_plus(n: "int", vi: "void *") -> "dvector *":
    return _haznics.dvec_create_plus(n, vi)

def dcsr2full(A: "dCSRmat", Afull: "double *") -> "void":
    return _haznics.dcsr2full(A, Afull)

def bdcsr_getdiag(A: "block_dCSRmat", A_diag: "dCSRmat") -> "void":
    return _haznics.bdcsr_getdiag(A, A_diag)

def get_time(time: "double *") -> "void":
    return _haznics.get_time(time)

def dvec_isnan(u: "dvector") -> "int":
    return _haznics.dvec_isnan(u)

def ivec_isnan(u: "ivector") -> "int":
    return _haznics.ivec_isnan(u)

def dvec_create(m: "int const") -> "dvector":
    return _haznics.dvec_create(m)

def ivec_create(m: "int const") -> "ivector":
    return _haznics.ivec_create(m)

def dvec_alloc(m: "int const", u: "dvector") -> "void":
    return _haznics.dvec_alloc(m, u)

def ivec_alloc(m: "int const", u: "ivector") -> "void":
    return _haznics.ivec_alloc(m, u)

def dvec_free(u: "dvector") -> "void":
    return _haznics.dvec_free(u)

def ivec_free(u: "ivector") -> "void":
    return _haznics.ivec_free(u)

def dvec_null(u: "dvector") -> "void":
    return _haznics.dvec_null(u)

def ivec_null(u: "ivector") -> "void":
    return _haznics.ivec_null(u)

def dvec_rand(n: "int const", u: "dvector") -> "void":
    return _haznics.dvec_rand(n, u)

def dvec_rand_true(n: "int const", u: "dvector") -> "void":
    return _haznics.dvec_rand_true(n, u)

def dvec_set(n: "int", u: "dvector", val: "double") -> "void":
    return _haznics.dvec_set(n, u, val)

def ivec_set(n: "int", u: "ivector", val: "int const") -> "void":
    return _haznics.ivec_set(n, u, val)

def dvec_cp(x: "dvector", y: "dvector") -> "void":
    return _haznics.dvec_cp(x, y)

def ivec_cp(x: "ivector", y: "ivector") -> "void":
    return _haznics.ivec_cp(x, y)

def dvec_maxdiff(x: "dvector", y: "dvector") -> "double":
    return _haznics.dvec_maxdiff(x, y)

def dvec_ax(a: "double const", x: "dvector") -> "void":
    return _haznics.dvec_ax(a, x)

def dvec_axpy(a: "double const", x: "dvector", y: "dvector") -> "void":
    return _haznics.dvec_axpy(a, x, y)

def dvec_axpyz(a: "double const", x: "dvector", y: "dvector", z: "dvector") -> "void":
    return _haznics.dvec_axpyz(a, x, y, z)

def dvec_dotprod(x: "dvector", y: "dvector") -> "double":
    return _haznics.dvec_dotprod(x, y)

def dvec_relerr(x: "dvector", y: "dvector") -> "double":
    return _haznics.dvec_relerr(x, y)

def dvec_norm1(x: "dvector") -> "double":
    return _haznics.dvec_norm1(x)

def dvec_norm2(x: "dvector") -> "double":
    return _haznics.dvec_norm2(x)

def dvec_norminf(x: "dvector") -> "double":
    return _haznics.dvec_norminf(x)

def dvec_orthog_const(x: "dvector") -> "void":
    return _haznics.dvec_orthog_const(x)

def dvec_orthog(x: "dvector", y: "dvector") -> "void":
    return _haznics.dvec_orthog(x, y)

def dvec_inv(x: "dvector") -> "void":
    return _haznics.dvec_inv(x)

def python_wrapper_krylov_amg(n: "int *", nnz: "int *", ia: "int *", ja: "int *", a: "double *", b: "double *", u: "double *", tol: "double *", maxit: "int *", print_lvl: "int *") -> "void":
    return _haznics.python_wrapper_krylov_amg(n, nnz, ia, ja, a, b, u, tol, maxit, print_lvl)

def python_wrapper_direct(n: "int *", nnz: "int *", ia: "int *", ja: "int *", a: "double *", b: "double *", u: "double *", print_lvl: "int *") -> "void":
    return _haznics.python_wrapper_direct(n, nnz, ia, ja, a, b, u, print_lvl)

def python_wrapper_krylov_block_2(n: "int *", nnz: "int *", ia: "int *", ja: "int *", a: "double *", b: "double *", u: "double *", tol: "double *", maxit: "int *", print_lvl: "int *") -> "void":
    return _haznics.python_wrapper_krylov_block_2(n, nnz, ia, ja, a, b, u, tol, maxit, print_lvl)

def python_wrapper_krylov_block_2by2(n00: "int *", nnz00: "int *", ia00: "int *", ja00: "int *", a00: "double *", n01: "int *", nnz01: "int *", ia01: "int *", ja01: "int *", a01: "double *", n10: "int *", nnz10: "int *", ia10: "int *", ja10: "int *", a10: "double *", n11: "int *", nnz11: "int *", ia11: "int *", ja11: "int *", a11: "double *", b: "double *", u: "double *", tol: "double *", maxit: "int *", print_lvl: "int *") -> "void":
    return _haznics.python_wrapper_krylov_block_2by2(n00, nnz00, ia00, ja00, a00, n01, nnz01, ia01, ja01, a01, n10, nnz10, ia10, ja10, a10, n11, nnz11, ia11, ja11, a11, b, u, tol, maxit, print_lvl)

def initialize_timestepper(tstepper: "timestepper", inparam: "input_param", rhs_timedep: "int", ndof: "int") -> "void":
    return _haznics.initialize_timestepper(tstepper, inparam, rhs_timedep, ndof)

def free_timestepper(ts: "timestepper") -> "void":
    return _haznics.free_timestepper(ts)

def update_timestep(tstepper: "timestepper") -> "void":
    return _haznics.update_timestep(tstepper)

def get_timeoperator(ts: "timestepper", first_visit: "int", cpyNoBC: "int") -> "void":
    return _haznics.get_timeoperator(ts, first_visit, cpyNoBC)

def update_time_rhs(ts: "timestepper") -> "void":
    return _haznics.update_time_rhs(ts)

def initialize_blktimestepper(tstepper: "block_timestepper", inparam: "input_param", rhs_timedep: "int", ndof: "int", blksize: "int") -> "void":
    return _haznics.initialize_blktimestepper(tstepper, inparam, rhs_timedep, ndof, blksize)

def free_blktimestepper(ts: "block_timestepper", flag: "int") -> "void":
    return _haznics.free_blktimestepper(ts, flag)

def update_blktimestep(tstepper: "block_timestepper") -> "void":
    return _haznics.update_blktimestep(tstepper)

def get_blktimeoperator(ts: "block_timestepper", first_visit: "int", cpyNoBC: "int") -> "void":
    return _haznics.get_blktimeoperator(ts, first_visit, cpyNoBC)

def update_blktime_rhs(ts: "block_timestepper") -> "void":
    return _haznics.update_blktime_rhs(ts)

def fixrhs_time(b: "dvector", b_old: "dvector", M: "dCSRmat", A: "dCSRmat", uprev: "dvector", time_scheme: "int", dt: "double", b_update: "dvector") -> "void":
    return _haznics.fixrhs_time(b, b_old, M, A, uprev, time_scheme, dt, b_update)

def get_timeoperator_old(M: "dCSRmat", A: "dCSRmat", time_scheme: "int", dt: "double", Atime: "dCSRmat") -> "void":
    return _haznics.get_timeoperator_old(M, A, time_scheme, dt, Atime)

def csrreb(nrow: "int *", ncol: "int *", nnzluo: "int *", ia: "int *", ja: "int *", a: "double *", jareb: "int **", areb: "double **") -> "void":
    return _haznics.csrreb(nrow, ncol, nnzluo, ia, ja, a, jareb, areb)

def deg2rad(alpha_deg: "double") -> "double":
    return _haznics.deg2rad(alpha_deg)

def zero_twopi(alpha: "double") -> "double":
    return _haznics.zero_twopi(alpha)

def zero_twopi_deg(alpha_deg: "double") -> "double":
    return _haznics.zero_twopi_deg(alpha_deg)

def polar2cart(dim: "int", px: "double *", cx: "double *") -> "void":
    return _haznics.polar2cart(dim, px, cx)

def cart2polar(dim: "int", c: "double *", p: "double *") -> "int":
    return _haznics.cart2polar(dim, c, p)

def map2mac(sc: "scomplex", c2s: "cube2simp", g: "input_grid") -> "void":
    return _haznics.map2mac(sc, c2s, g)

def input_strings(nall_out: "int *") -> "char **":
    return _haznics.input_strings(nall_out)

def input_grid_arrays(g: "input_grid") -> "void":
    return _haznics.input_grid_arrays(g)

def input_grid_free(g: "input_grid") -> "void":
    return _haznics.input_grid_free(g)

def input_grid_print(g: "input_grid") -> "void":
    return _haznics.input_grid_print(g)

def input_grid_example_file(fp: "FILE *", g: "input_grid") -> "void":
    return _haznics.input_grid_example_file(fp, g)

def read_mixed_data(nrec: "int", ni: "int", nr: "int", the_string: "char *") -> "void *":
    return _haznics.read_mixed_data(nrec, ni, nr, the_string)

def x_out(pattern: "char const *", le: "size_t") -> "void":
    return _haznics.x_out(pattern, le)

def make_string_from_file(the_file: "FILE *", length_string: "size_t *") -> "char *":
    return _haznics.make_string_from_file(the_file, length_string)

def get_substring(pattern: "char const *", length_substring: "size_t *", the_string: "char *") -> "char *":
    return _haznics.get_substring(pattern, length_substring, the_string)

def safe_parse(sinp: "char const *", warn0: "char const *", default_s: "char const *", max_length: "int const") -> "char *":
    return _haznics.safe_parse(sinp, warn0, default_s, max_length)

def parse_input_grid(the_file: "FILE *") -> "input_grid *":
    return _haznics.parse_input_grid(the_file)

def set_input_grid(g: "input_grid", c2s: "cube2simp") -> "int *":
    return _haznics.set_input_grid(g, c2s)

def set_edges(g0: "input_grid", c2s: "cube2simp") -> "void":
    return _haznics.set_edges(g0, c2s)

def set_ndiv_edges(g: "input_grid", g0: "input_grid", c2s: "cube2simp", nd: "int **", iter: "int const") -> "int":
    return _haznics.set_ndiv_edges(g, g0, c2s, nd, iter)

def interp4(c2s: "cube2simp", u: "double *", xhat: "double *") -> "double":
    return _haznics.interp4(c2s, u, xhat)

def interp8(c2s: "cube2simp", u: "double *", ue: "double *", xhat: "double *") -> "double":
    return _haznics.interp8(c2s, u, ue, xhat)

def data_transform(nv: "int const", m: "int const", data: "double *", xodst: "double *", xndst: "double *") -> "void":
    return _haznics.data_transform(nv, m, data, xodst, xndst)

def interp1(dimbig: "int const", fi: "double *", ug: "unigrid", x: "double *", nvert: "int const", mask: "int *") -> "void":
    return _haznics.interp1(dimbig, fi, ug, x, nvert, mask)

def align_lattice(nkj: "int const", nd0: "int *", nodes0: "int *", nd1: "int *", nodes1: "int *", c2s: "cube2simp") -> "int *":
    return _haznics.align_lattice(nkj, nd0, nodes0, nd1, nodes1, c2s)

def set_mmesh(g0: "input_grid", c2s: "cube2simp", wrk: "int *") -> "macrocomplex *":
    return _haznics.set_mmesh(g0, c2s, wrk)

def scomplex_merge(sc0: "scomplex **", nsall: "int const", nvall: "int const", cc: "int const", bndry_cc: "int const", g0: "input_grid", c2s: "cube2simp") -> "void":
    return _haznics.scomplex_merge(sc0, nsall, nvall, cc, bndry_cc, g0, c2s)

def scomplex_merge1(nvall: "int const", nsall: "int const", mc: "macrocomplex", sc0: "scomplex **", c2s: "cube2simp") -> "void":
    return _haznics.scomplex_merge1(nvall, nsall, mc, sc0, c2s)

def locate1(b: "int *", a: "int *", n: "int", a2: "int *", n2: "int", m2: "int") -> "int":
    return _haznics.locate1(b, a, n, a2, n2, m2)

def macrocomplex_free(mc: "macrocomplex") -> "void":
    return _haznics.macrocomplex_free(mc)

def fix_grid(mc: "macrocomplex", scin: "scomplex **", c2s: "cube2simp", g0: "input_grid") -> "void":
    return _haznics.fix_grid(mc, scin, c2s, g0)

def generate_initial_grid(g0: "input_grid") -> "scomplex *":
    return _haznics.generate_initial_grid(g0)

def chk_sign(it: "int const", nbrit: "int const") -> "double":
    return _haznics.chk_sign(it, nbrit)

def haz_scomplex_init(n: "int", ns: "int", nv: "int") -> "scomplex *":
    return _haznics.haz_scomplex_init(n, ns, nv)

def vol_simplex(dim: "int", fact: "double", xf: "double *", volt: "double *", wrk: "void *") -> "void":
    return _haznics.vol_simplex(dim, fact, xf, volt, wrk)

def haz_scomplex_read(fp: "FILE *", print_level: "int") -> "scomplex *":
    return _haznics.haz_scomplex_read(fp, print_level)

def haz_scomplex_print(sc: "scomplex", ns0: "int const", infor: "char const *") -> "void":
    return _haznics.haz_scomplex_print(sc, ns0, infor)

def haz_scomplex_free(sc: "scomplex") -> "void":
    return _haznics.haz_scomplex_free(sc)

def faces_cnt(subsc: "subscomplex") -> "void":
    return _haznics.faces_cnt(subsc)

def area_face(dim: "int", fact: "double", xf: "double *", sn: "double *", areas: "double *", volt: "double *", wrk: "void *") -> "void":
    return _haznics.area_face(dim, fact, xf, sn, areas, volt, wrk)

def faces_attr(subsc: "subscomplex") -> "void":
    return _haznics.faces_attr(subsc)

def haz_subscomplex_init(sc: "scomplex") -> "subscomplex *":
    return _haznics.haz_subscomplex_init(sc)

def haz_subscomplex_print(subsc: "subscomplex", ns0: "int const", infor: "char const *") -> "void":
    return _haznics.haz_subscomplex_print(subsc, ns0, infor)

def haz_subscomplex_free(subsc: "subscomplex") -> "void":
    return _haznics.haz_subscomplex_free(subsc)

def find_nbr(ns: "int", nv: "int", n: "int", sv: "int *", stos: "int *") -> "void":
    return _haznics.find_nbr(ns, nv, n, sv, stos)

def haz_add_simplex(_is: "int", sc: "scomplex", xnew: "double *", ibnew: "int", csysnew: "int", nsnew: "int", nvnew: "int") -> "int":
    return _haznics.haz_add_simplex(_is, sc, xnew, ibnew, csysnew, nsnew, nvnew)

def haz_refine_simplex(sc: "scomplex", _is: "int const", it: "int const") -> "int":
    return _haznics.haz_refine_simplex(sc, _is, it)

def refine(ref_levels: "int const", sc: "scomplex", marked: "ivector") -> "void":
    return _haznics.refine(ref_levels, sc, marked)

def sc2mesh(sc: "scomplex") -> "mesh_struct *":
    return _haznics.sc2mesh(sc)

def coord_lattice(m: "int *", dim: "int const", kf: "int const", nall: "int const", nd: "int const *") -> "void":
    return _haznics.coord_lattice(m, dim, kf, nall, nd)

def num_lattice(m: "int *", dim: "int const", nd: "int *") -> "int":
    return _haznics.num_lattice(m, dim, nd)

def binary1(dim: "int const", bits: "unsigned int *", nvloc: "int *") -> "void":
    return _haznics.binary1(dim, bits, nvloc)

def umesh(dim: "int const", nd: "int *", c2s: "cube2simp", isbndf: "int *", codef: "int *", elflag: "int", intype: "int const") -> "scomplex *":
    return _haznics.umesh(dim, nd, c2s, isbndf, codef, elflag, intype)

def unirefine(nd: "int *", sc: "scomplex") -> "void":
    return _haznics.unirefine(nd, sc)

def ugrid_init(n: "int", nd: "int *", xo: "double *", xn: "double *") -> "unigrid *":
    return _haznics.ugrid_init(n, nd, xo, xn)

def ugrid_free(ug: "unigrid") -> "void":
    return _haznics.ugrid_free(ug)

def ugrid_transform(n: "int const", ug: "unigrid", xodst: "double *", xndst: "double *") -> "void":
    return _haznics.ugrid_transform(n, ug, xodst, xndst)

def get_adjacency_from_transition(P: "dCSRmat", weighted_degree: "dvector") -> "dCSRmat":
    return _haznics.get_adjacency_from_transition(P, weighted_degree)

def get_graphLaplacian_from_adjacency(A: "dCSRmat", weighted_degree: "dvector") -> "dCSRmat":
    return _haznics.get_graphLaplacian_from_adjacency(A, weighted_degree)

def get_normalizedgraphLaplacian_from_L_wdeg_inv(L: "dCSRmat", weighted_degree_half_inv: "dvector") -> "dCSRmat":
    return _haznics.get_normalizedgraphLaplacian_from_L_wdeg_inv(L, weighted_degree_half_inv)

def pairwise_distance(X: "dDENSEmat", norm_type: "int const") -> "dvector":
    return _haznics.pairwise_distance(X, norm_type)

def bfs00(croot: "int const", a: "iCSRmat", bfs: "iCSRmat", et: "int *", mask: "int *") -> "void":
    return _haznics.bfs00(croot, a, bfs, et, mask)

def bfscc(nblk: "int", iblk: "int *", jblk: "int *", a: "iCSRmat", et: "int *") -> "iCSRmat *":
    return _haznics.bfscc(nblk, iblk, jblk, a, et)

def check0(elem1: "weights", elem2: "weights") -> "int":
    return _haznics.check0(elem1, elem2)

def check1(elem1: "iweights", elem2: "iweights") -> "int":
    return _haznics.check1(elem1, elem2)

def getp(ie: "int *", je: "int *", w: "double *", ne: "int", p: "int *") -> "void":
    return _haznics.getp(ie, je, w, ne, p)

def getpz(z: "double *", nv: "int", p: "int *") -> "void":
    return _haznics.getpz(z, nv, p)

def getpi(iz: "int *", maskv: "int *", nv: "int", p: "int *") -> "void":
    return _haznics.getpi(iz, maskv, nv, p)

def bfsx(nv: "int", ia: "int *", ja: "int *", ibfs: "int *", jbfs: "int *", maske: "int *", p: "int *", et: "int *", lev: "int *", w: "double *", z: "double *") -> "void":
    return _haznics.bfsx(nv, ia, ja, ibfs, jbfs, maske, p, et, lev, w, z)

def bfstree(root: "int", nv: "int", ne: "int", ia: "int *", ja: "int *", ibfs: "int *", jbfs: "int *", mask: "int *", et: "int *", lev: "int *", ledge: "int *", w: "double *", wo: "double *") -> "void":
    return _haznics.bfstree(root, nv, ne, ia, ja, ibfs, jbfs, mask, et, lev, ledge, w, wo)

def dfs00_(nin: "int *", ia: "int *", ja: "int *", nblko: "int *", iblk: "int *", jblk: "int *") -> "void":
    return _haznics.dfs00_(nin, ia, ja, nblko, iblk, jblk)

def optree(gradi: "int *", gradj: "int *", p: "int *", ne: "int", n: "int", et: "int *", net: "int *") -> "int":
    return _haznics.optree(gradi, gradj, p, ne, n, et, net)

def eigsymm(A: "dCSRmat", B: "dCSRmat", evalues: "double *", evectors: "double *") -> "int":
    return _haznics.eigsymm(A, B, evalues, evectors)

def eiggeneral(n: "int", a: "double *", wr: "double *", wi: "double *") -> "int":
    return _haznics.eiggeneral(n, a, wr, wi)

def svdgeneral(nrow: "int", ncol: "int", a: "double *", smin: "double *", w: "double *") -> "int":
    return _haznics.svdgeneral(nrow, ncol, a, smin, w)

def residues_poles(m: "int", zd: "double *", wd: "double *", fd: "double *", resd: "double *", pold: "double *") -> "int":
    return _haznics.residues_poles(m, zd, wd, fd, resd, pold)

def get_cpzwf(func: "long double (*)(long double,void *)", param: "void *", cpzwf: "double **", mbig_in: "int *", mmax_in: "int *", m_out: "int *", xmin_in: "double", xmax_in: "double", tolaaa: "double", print_level: "int") -> "double":
    return _haznics.get_cpzwf(func, param, cpzwf, mbig_in, mmax_in, m_out, xmin_in, xmax_in, tolaaa, print_level)

def create_matrix(A: "double *", ja: "int *", ia: "int *") -> "dCSRmat *":
    return _haznics.create_matrix(A, ja, ia)

def create_dvector(x: "double *") -> "dvector *":
    return _haznics.create_dvector(x)

def create_precond_amg(A: "dCSRmat", amgparam: "AMG_param") -> "precond *":
    return _haznics.create_precond_amg(A, amgparam)

def set_precond(data: "void *", foo: "void (*)(double *,double *,void *)") -> "precond *":
    return _haznics.set_precond(data, foo)

def create_precond(A: "dCSRmat", amgparam: "AMG_param") -> "precond *":
    return _haznics.create_precond(A, amgparam)

def create_precond_famg(A: "dCSRmat", M: "dCSRmat", amgparam: "AMG_param") -> "precond *":
    return _haznics.create_precond_famg(A, M, amgparam)

def create_precond_ra(A: "dCSRmat", M: "dCSRmat", s_frac_power: "double", t_frac_power: "double", alpha: "double", beta: "double", scaling_a: "double", scaling_m: "double", amgparam: "AMG_param") -> "precond *":
    return _haznics.create_precond_ra(A, M, s_frac_power, t_frac_power, alpha, beta, scaling_a, scaling_m, amgparam)

def create_precond_hxcurl(Acurl: "dCSRmat", Pcurl: "dCSRmat", Grad: "dCSRmat", prectype: "short", amgparam: "AMG_param") -> "precond *":
    return _haznics.create_precond_hxcurl(Acurl, Pcurl, Grad, prectype, amgparam)

def create_precond_hxdiv_3D(Adiv: "dCSRmat", P_div: "dCSRmat", Curl: "dCSRmat", P_curl: "dCSRmat", prectype: "short", amgparam: "AMG_param") -> "precond *":
    return _haznics.create_precond_hxdiv_3D(Adiv, P_div, Curl, P_curl, prectype, amgparam)

def create_precond_hxdiv_2D(Adiv: "dCSRmat", P_div: "dCSRmat", Curl: "dCSRmat", prectype: "short", amgparam: "AMG_param") -> "precond *":
    return _haznics.create_precond_hxdiv_2D(Adiv, P_div, Curl, prectype, amgparam)

def get_poles_no(pc: "precond") -> "int":
    return _haznics.get_poles_no(pc)

def apply_precond(*args) -> "void":
    return _haznics.apply_precond(*args)


