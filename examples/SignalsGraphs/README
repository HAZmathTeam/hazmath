This example tests an adaptive algorithm that compresses data on
graphs. Given a graph G = (V, E) and any data f (considered as a
function on the vertex set V), the algorithm uses matching to find an
optimal orthogonal basis under which the coefficients of f have the
fastest decay. It then compresses the data f using the largest few
components, and decompresses it back to report the compression
error. Two different methods to come up with the optimal basis are
presented, the first one (plain encoding) uses the orthogonal basis at
the bottom of the matching hierarchy, the second one (adaptive
encoding) adaptively chooses the best basis from all levels of the
hierarchy. The programs report results produced by both methods.

Two examples are provided. Example 1 (ex1) reads an unweighted
undirected graph from a file in mtx format, then generates some random
data to test the compression. An example usage is

  ./ex1 graphs/barth5.mtx -k num -p decimal

This means the program uses the largest n coefficients to compress the
data, and when using the "adaptive encoding" method, the best basis is
chosen by minimizing the lp-norm of f (under the basis). The parameter
p is optional and defaults to 1.

Example 2 (ex2) applies the algorithm to precipitation data on a
512x512 lattice grid stored in plain text. Example usages are

  ./ex2 graphs/Precip/AgMERRA_Precip_by_mo_tot/agp1980_ -k num

   or

  ./ex2 graphs/Precip/AgMERRA_Precip_by_mo_tot/agp1980_ -l

The program assumes that the unfinished filenames are suffixed by
month numbers, from 01 to 12, and each of the 12 files exists in the
directory. Depending on the options passed, the program behaves
differently:

1. If the option -k is specified, the programs writes compression
results into files (with extensions _1 and _2 for the two
methods). The integral parameter num following -k is used as the
filtering threshold for compression. One can then cd into the
corresponding folder where the files are located and use the MATLAB
script save_plot.m to plot the data and save the images.

2. If the option -l is specified, the program varies the threshold by
itself, starting from 1, and doubling every time, until the threshold
exceeds the vertex number in the graph (2^18). The programs outputs
reports of the compression error for each threhold in a fold with the
name 'levels/'. One can then cd into that folder and use the MATLAB
script save_plot.m to generates plots of the relative error against
threshold.