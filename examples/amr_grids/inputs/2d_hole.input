%----------------------------------------------%
% input parameters: for grid generation        %
%----------------------------------------------%
title{square with a hole in 2D}
%
dimension{2}   % spatial dimension in which the grid has to be generated
%
print_level{0}	% how much information to print out: 0 less | >0 more

refinement_type{-1} % -1 is usual 

%---------------%
% files: writeable by the user
%% vtu files for plotting follow the same convention.
%---------------%
file_grid{2d_hole.haz}
file_vtu{2d_hole.vtu}

%---------------%
% coordinate systems: Each has coordinates of the origin o[0:dim-1]
%                     type (0=cartesian, 1=polar)
%
%---------------%

num_coordsystems{3} % number of coordinate systems

%% data for the coord systems: coord-system label, coords of the
%% origin, type. the labels should be integers, consequtive and start
%% from 0 the values of the above quantities are given as space tab
%% separated values

data_coordsystems{0 0 0. 0.  
		  1 1 0. 0. 
		  2 1 -1. -1.}
%---------------%
% graph which describes the domain. The input are
% vertices and edges. The graph has to be a union of polygons,
% of polyhedrons that are isomorphic to an n-dimensional cube.
%---------------%

num_vertices{8} %number of vertices
%%% coords, type, origin for polar system: angles are in degrees
%%% data_vertices{
%%% 	       0 0 -1.    -1.
%%% 	       1 0 -1.   1. 
%%% 	       2 0 1.   -1.
%%% 	       3 0 1.   1.
%%% 	       4 0 -0.25    -0.25    
%%% 	       5 0 -0.25   0.25 
%%% 	       6 0 0.25   -0.25
%%% 	       7 0 0.25   0.25
%%% 	       	 }

data_vertices{
	       0 1 2.   -135.    
	       1 1 2.   135. 
	       2 1 2.   45.
	       3 1 2.   -45.
	       4 1 1.   -135.    
	       5 1 1.   135. 
	       6 1 1.   45.
	       7 1 1.   -45.
	       	 }


%%% data_vertices{
%%% 	       0 0 -2. -2. 
%%% 	       1 0 -2. 2.
%%% 	       2 0 2.  2.
%%% 	       3 0 2.  -2.
%%% 	       4 1 1.   -135.    
%%% 	       5 1 1.   135. 
%%% 	       6 1 1.   45.
%%% 	       7 1 1.   -45.
%%% 	       	 }

num_edges{8} %

%% edge: 1st vertex, 2nd vertex, number of divisions.
data_edges{4 0 	3
           5 1 	3
           6 2 	3
  	   3 7  3
	   0 1  6
	   2 3  6
	   1 2  6
	   0 3  6
	   }
%%% ====================MACROELEMENTS=========================
num_macroelements{4}
%%% NUMBERING OF VERTICES DESCRIBING A MACROELEMENT: Check the README.

%%% macroelement number, vertices forming the macroelement, macroelement code.

data_macroelements{
	0 1 4 5  3 
	0 3 4 7  3 
	2 3 6 7  3 
	1 2 5 6  3 
}

num_macrofaces{1}

% any face which needs a code (for example boundary faces: face
% number. If a face is not included here and is a boundary face then
% its code is set to Dirichlet (i.e. 1...16). Internal faces not found
% here have a code 0. Faces given here and not found in the
% macroelement list are ignored.

data_macrofaces{0 1  1
		   }

%%%%%%%%%%%%%%AMR %%%%%%%%%%%%%%%%%%%%%%%%%%%%
num_refinements{0}

err_stop_refinement{        -1.e-10        }
%%% marking type: 0 everything is marked; not zero can be user defined
%%%  marking strategy as in the examples given in the file
%%%  solve_estimate_mark.h

amr_marking_type{1}

