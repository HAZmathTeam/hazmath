%----------------------------------------------%
% input parameters: for grid generation        %
%----------------------------------------------%
title{Grid with two connected components and connected bndry}
%
dimension{2}   % spatial dimension in which the grid has to be generated
%
print_level{1}	% how much information to print out: 0 Nothing | >0 Something

%---------------%
% files: should exist an be writeable by the user
% vtu files for plotting follow the same convention.
%---------------%
file_grid{outputs/2d_Q+L.haz}
file_vtu{outputs/2d_Q+L.vtu}

%---------------%
% coordinate systems: Each has coordinates of the origin o[0:dim-1]
%                     type (0=cartesian, 1=polar)
%
%---------------%

num_coordsystems{3} % number of coordinate systems

%% data for the coord systems: coord-system label, coords of the
%% origin, type. the labels should be integers, consequtive and start
%% from 0 the values of the above quantities are given as space tab
%% separated values

data_coordsystems{0 0. 0.  0
		  1 0. 0.  1
		  2 -1. -1.  1}
%---------------%
% graph which describes the domain. The input are
% vertices and edges. The graph has to be a union of polygons,
% of polyhedrons that are isomorphic to an n-dimensional cube.
%---------------%

num_vertices{16} %number of vertices

%---------------%
%coords (see way below): for every node 1:numvertices give coords (dim
% coords per node)

% If two points on an edge are in the same coordinate system,
% then all points on this edge are in polar coordinate system.
% if two points on an edge are in in different coordinate systems,
% then the points on the edge are on a straight
%% line connecting the two vertices.
%---------------%

%%% vertex number (consequtive), coord system, vertex coords. Polar coords are in
%%%    degrees.
data_vertices{0 0   -1.   -1. 	%% vertex number, coord system, coords
	      1 0   -1.   0.  
	      2 0    1.5   1.5
	      3 0    -0.25   2.1   
	      4 0    1.   -1.  	
	      5 0    1.    0.  
	      6 0   -1.   1.  
	      7 0    0.   1.

	      8 0 2.   2.
	      9 0 1.5   2.  
	      10 0  0. -1.  
	      11 0  2.   1.5   
	      12 0  1.5   1.  	
	      13 0  2.    1.  
	      14 0  0.    1.5  
	      15 0  0.    0.  
	      }

%---------------%
% edges and number of divisions for every edge.
% opposite edges have the same number of divisions. if they do not,
% then the max number of divisions is taken.
%---------------%

num_edges{9} %

%% edge: 1st vertex, 2nd vertex, number of divisions. Does not have to contain all edges. Edges that are not listed here and are not parallel to any of the edges listed here are not divided. 

data_edges{0 1	1
           1 15	1
           0 10 1
	   10 4  1
  	   3 9  1
  	   7 12  1
  	   4 5  1
  	   6 7  1
  	   13 11  1
	   }



% the vertices should be ordered so that the
% macroelement (polyhedron) is mapped to the unit cube without
% "twisting". This can be done by consistently labeling all faces. In
% dimension d, if the vertices are numbered from 0 to (2^d-1) each
% face corresponds to fixing exactly one bit in the binary
% representation of the vertex label.

%  For example in 3D we have [000:111] as vertex labels, i.e. [0:7]
% (this has nothing to do with coordinates) and the faces are:
% (000,001,010,011)= fixing the first bit to be 0; and
% (011,010,110,111)= fixing the second bit to be 1; and so on. The
% ordering of the labels in the faces follows the same convention. In
% the example we gave, the face for which the second bit is fixed is
% numbered incorrectly, it should be (010,011,110,111).

num_macroelements{7}

%%% vertices forming the macroelement ordered as explained in the
%%% README.  vertex numbers (v[0]...v[2^{d}-1]) and the material for
%%% the macroelement.

data_macroelements{
	      10 4 15 5 4
	      0 1 10 15 2
	      6 7 1 15 6
	      14 2 3 9 8
	      
	      7 12 14 2 14
	      11 8 2 9 12
	      12 13 2 11 10
	      }

num_macrofaces{10}

% any face which needs a code (for example boundary faces: face
% number. If a face is not included here and is a boundary face then
% its code is set to Dirichlet (i.e. 1...16). Internal faces not found
% here have a code 0. Faces given here and not found in the
% macroelement list are ignored.

data_macrofaces{0 10  1 %boundary face with code 1
		1 4  0 % iterior face
		3 10  4
		10 3  0
		0 1  32
		1 4  24
		4 5  17
		3 5  1
		6 7  2
		7 3  3
		   }

%%%%%%%%%%%%%%AMR %%%%%%%%%%%%%%%%%%%%%%%%%%%%
num_refinements{1}

refinement_type{0}

err_stop_refinement{        -1.e-10        }
%%% marking type: 0 everything is marked; not zero can be user defined
%%%  marking strategy as in the examples given in the file
%%%  solve_estimate_mark.h

amr_marking_type{1}

