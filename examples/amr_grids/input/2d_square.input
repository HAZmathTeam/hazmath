%----------------------------------------------%
% input parameters: for grid generation        %
%----------------------------------------------%
%%%%%%%%%%%%%% AMR %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% marking type: 0 everything is marked; not zero can be user defined
%%  marking strategy as in the examples given in the file
%%%  solve_estimate_mark.h
%%% 
title{Unit square in 2D}

%% 0 means uniform refinement everywhere. 33 means refining near specific points.
%% 1 means something different like Doerfler marking
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
amr_marking_type{0} 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

num_refinements{0}

err_stop_refinement{        -1.e-10        } %% for the user to define and use

dimension{2}   % spatial dimension in which the grid has to be generated

print_level{0}	% how much information to print out: 0 Nothing | >0 Something

refinement_type{0}

file_grid{outputs/2d_square.haz}
file_vtu{outputs/2d_square.vtu}

%---------------%
% coordinate systems: Each has coordinates of the origin o[0:dim-1]
%                     type (0=cartesian, 1=polar)%
%---------------%
num_coordsystems{3} % number of coordinate systems
data_coordsystems{0 0 0. 0.}

%---------------%
% graph which describes the domain. The input are
% vertices and edges. 
%---------------%

num_vertices{4} %number of vertices
%%% coords, type, origin for polar system: angles are in degrees
data_vertices{0 0 -1.   -1.   
	      1 0   1.   -1.    
	      2 0  -1.   1.    
	      3 0   1.   1.    }
%
%---------------%
% edges and number of divisions for every edge.
% opposite edges have the same number of divisions. if they do not,
% then the max number of divisions is taken.
%---------------%

num_edges{4} %

%% edge: 1st vertex, 2nd vertex, number of divisions.
data_edges{0 1	1
           1 3 		1
           0 2 		1
  	   2 3     	1	      }


%%% ====================MACROELEMENTS=========================
num_macroelements{1}
data_macroelements{0 1 2 3  2} %% v1...v4 and material. 
%%% ====================MACROFACES=========================
num_macrofaces{4}    
data_macrofaces{0 1   1
		1 3   1
		0 2   1
		3 2   1
		   } %% codes on boundary faces (v1,v2,code).
		   

