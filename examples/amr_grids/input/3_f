%----------------------------------------------%
% input parameters: for grid generation        %
%----------------------------------------------%
%
title{Fichera corner}
%
dimension{3}   % spatial dimension in which the grid has to be generated
%---------------%
% output flags
%---------------%
print_level{2}	% how much information to print out: 0 less | >0 more

%%%%% NOT USED HERE: refinement_type{-1}

%%%%%%%%%%%%%%AMR %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% marking type: 0 everything is marked; not zero can be user defined
%%%  marking strategy as in the examples given in the file
%%%  solve_estimate_mark.h

amr_marking_type{1}

num_refinements{0}

err_stop_refinement{        -1.e-10        }


%---------------%
% files(grid and vtu): should exist as  and be writeable by the user
% vtu files for plotting follow the same convention. Spaces in names should be escaped. 
%---------------%
file_grid{output/3d_fichera.grid}
file_vtu{output/3d_fichera.vtu}

%---------------%
% coordinate systems: Each has coordinates of the origin o[0:dim-1]
%                     type (0=cartesian, 1=polar)
%
%---------------%

num_coordsystems{1} % number of coordinate systems

%% data for the coord systems: coord-system label, coords of the
%% origin, type. the labels should be integers, consequtive and start
%% from 0 the values of the above quantities are given as space/tab
%% separated values. type=1 is polar coordinate system centered at the
%% specified origin.

data_coordsystems{0 0. 0.  0. 0}

%%%---------------%
%%% graph which describes the domain. The input are vertices and edges
%%% and d-1 dimensional faces. The graph has to be a union of
%%% polygons, of polyhedrons that are isomorphic to a d-dimensional
%%% cube.
%%%---------------%

num_vertices{26} %number of vertices

%---------------%

%%% coords: for every node 1:numvertices give coords (dim
%%% coords per node)
%%%
%%% If two points on an edge are in the same coordinate system,
%%% then all points on this edge are in polar coordinate system.
%%% if two points on an edge are in in different coordinate systems,
%%% then the points on the edge are on a straight
%%% line connecting the two vertices.
%---------------%


%%% vertex number (label) coord_system, coords
data_vertices{
    0    0   -1.   -1.   -1.
    1    0   -1.   -1.    0.
    2    0   -1.    0.   -1.
    3    0   -1.    0.    0.
    4    0    0.   -1.   -1.
    5    0    0.   -1.    0.
    6    0    0.    0.   -1.
    7    0    0.    0.    0.

    8    0    0.    1.   -1.
    9    0    0.    1.    0.
   10    0    1.    0.   -1.
   11    0    1.    0.    0.
   12    0    1.    1.   -1.
   13    0    1.    1.    0.
   14	 0   -1.    1.   -1.
   15	 0   -1.    1.    0.

   16	 0   1.    -1.    -1.
   17	 0   1.    -1.    0.
%% top-top;
   18    0   -1.   -1.    1. % above 1 
   19    0   -1.    0.    1. %3
   20    0    0.   -1.    1. %5
   21   0    0.    0.    1.  %7
   22   0    0.    1.    1.  %9
   23    0    1.    0.    1. %11
   24    0    1.    1.    1. %13
   25	 0   -1.    1.    1. %15
}
%---------------%
% edges and number of divisions for every edge.
% opposite edges have the same number of divisions. if they do not,
% then the max number of divisions is taken.
%---------------%

num_edges{16} %

%% edge: 1st vertex, 2nd vertex, number of divisions.
data_edges{0 1 	     2
  	   4 0	     2	      
	    0 2	     2 
	    1 3      2 
	    1 5      2
            3 7      2
            7 5	     2
  	    2 6      2	      
  	    4 6      2	      
  	    3 2      2	      
  	    7  6     2	      
            11 13   2
            9 13    2
           13 12    2
           15 25    2
           3  19     2
	   }	    

%%% ====================MACROELEMENTS=========================
num_macroelements{7}

%%% Numbering (ordering) of the vertices describing a macroelement:
%%% CHECK the README.

%%% MACROELEMENT: its 2^d vertices and a macroelement code.

data_macroelements{
	0 1  2  3  4  5  6  7  1
	6 7  8  9 10 11 12 13  2
	2 3 14 15  6  7  8  9  3
	4 5 6  7  16 17  10 11 4
	1 18 3 19  5 20   7 21 -1
	7 21 9  22  11 23 13  24 -2
	3 19 15 25 7 21 9 22 -2
	       }

num_macrofaces{9}

% any face which needs a code (for example boundary faces: face
% number. If a face is not included here and is a boundary face then
% its code is set to Dirichlet (i.e. 1...16). Internal faces not found
% here have a code 0. Faces given here and not found in the
% macroelement list are ignored.

data_macrofaces{0 1 2 3 1
		0 4 1 5 2
		4 7 5 6 3
		2 6 3 7 4
		0 4 2 6 5
		1 5 7 3 6
		6 7 8 9 7
		8 12 9 13 8
		2 6 14 8 9
		   }


