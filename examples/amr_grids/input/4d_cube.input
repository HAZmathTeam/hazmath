%----------------------------------------------%
% input parameters: for grid generation        %
%----------------------------------------------%
%
title{Grid on the 4d cube (-1,1)x(-1,1)x(-1,1)x(-1,-1)}
%
dimension{4}   % spatial dimension in which the grid has to be generated
print_level{10}	% how much information to print out: 0 little | >0 more
%---------------%

num_refinements{0}

%%%%% SHOULD NOT BE USED HERE: refinement_type{-1}

err_stop_refinement{        -1.e-10        }
%%% files:  should be writeable by the user
%%% vtu files for plotting follow the same convention.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
file_grid{output/4dcube.haz}
file_vtu{output/4dcube.vtu}

%%%num_edges{12}
%%% it is enough to specify 4 divisions only for the 4
%%% edges of the cube which span 4D.

num_edges{4}

data_edges{0 1 1 %% edge: 1st vertex, 2nd vertex, number of divisions.
  	   0 2 1
	   0 4 1
	   0 8 1
	   }
%%% ====================VERTICES=========================
num_vertices{16} %number of vertices

%---------------%
%%% coords: for every node 1:numvertices give coords (dim
%%% coords per node)
%%%
%%% If two points on an edge are in the same coordinate system,
%%% then all points on this edge are in polar coordinate system.
%%% if two points on an edge are in in different coordinate systems,
%%% then the points on the edge are on a straight
%%% line connecting the two vertices.
%---------------%
%%% vertex number (label) coord_system, coords
data_vertices{0 0 -1. -1.  -1.  -1. 
	      1 0 -1. -1.  -1    1. 
	      2 0 -1. -1.   1.  -1. 
	      3 0 -1. -1.   1.   1.   
	      4 0 -1.  1.  -1.  -1.  
	      5 0 -1.  1.  -1.   1.	 
	      6 0 -1.  1.   1.  -1. 
	      7 0 -1.  1.   1.   1.
              8 0  1. -1.  -1.  -1. 
	      9 0  1. -1.  -1    1. 
	     10 0  1. -1.   1.  -1. 
	     11 0  1. -1.   1.   1.   
	     12 0  1.  1.  -1.  -1.  
	     13 0  1.  1.  -1.   1.	 
	     14 0  1.  1.   1.  -1. 
	     15 0  1.  1.   1.   1.}
%%%%%
%%% ====================MACROELEMENTS=========================

num_macroelements{1}

%%% Numbering (ordering) of the vertices describing a macroelement:
%%% CHECK the README.

%%% MACROELEMENT: its 2^d vertices and a macroelement code.

data_macroelements{0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 1  }

% any face which needs a code (for example boundary faces: face
% number. If a face is not included here and is a boundary face then
% its code is set to Dirichlet (i.e. 1...16). Internal faces not found
% here have a code 0. Faces given here and not found in the
% macroelement list are ignored.
% If no faces are given then every boundary point gets a code of 1 (Dirichlet); 
num_macrofaces{1}
data_macrofaces{0    1    2    3    4    5    6    7  1}
%%% or a complete list of the 4d cube faces below:)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% num_macrofaces{8}
%%% data_macrofaces{ 0    1    2    3    4    5    6    7  1
                 %%% 0    1    2    3    8    9   10   11  2
                 %%% 0    1    4    5    8    9   12   13  3 
                 %%% 0    2    4    6    8   10   12   14  4 
                 %%% 8    9   10   11   12   13   14   15  5 
                 %%% 4    5    6    7   12   13   14   15  6
                 %%% 2    3    6    7   10   11   14   15  7
                 %%% 1    3    5    7    9   11   13   15  8}
%
num_coordsystems{1}

data_coordsystems{0 0. 0.  0. 0. 0}


%%% marking type: 0 everything is marked; not zero can be user defined
%%%  marking strategy as in the examples given in the file
%%%  solve_estimate_mark.h

amr_marking_type{0}

