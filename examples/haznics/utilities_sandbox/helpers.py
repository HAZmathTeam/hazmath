# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_helpers', [dirname(__file__)])
        except ImportError:
            import _helpers
            return _helpers
        if fp is not None:
            try:
                _mod = imp.load_module('_helpers', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _helpers = swig_import_helper()
    del swig_import_helper
else:
    import _helpers
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def dabla(a: 'double *', b: 'double *') -> "void":
    return _helpers.dabla(a, b)
dabla = _helpers.dabla

def dabla2(func_ptr0: 'void *', a: 'double *', b: 'double *') -> "void":
    return _helpers.dabla2(func_ptr0, a, b)
dabla2 = _helpers.dabla2

def make_dabla() -> "func_ptr":
    return _helpers.make_dabla()
make_dabla = _helpers.make_dabla
class dabla_struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dabla_struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dabla_struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _helpers.dabla_struct_a_set
    __swig_getmethods__["a"] = _helpers.dabla_struct_a_get
    if _newclass:
        a = _swig_property(_helpers.dabla_struct_a_get, _helpers.dabla_struct_a_set)
    __swig_setmethods__["b"] = _helpers.dabla_struct_b_set
    __swig_getmethods__["b"] = _helpers.dabla_struct_b_get
    if _newclass:
        b = _swig_property(_helpers.dabla_struct_b_get, _helpers.dabla_struct_b_set)
    __swig_setmethods__["func"] = _helpers.dabla_struct_func_set
    __swig_getmethods__["func"] = _helpers.dabla_struct_func_get
    if _newclass:
        func = _swig_property(_helpers.dabla_struct_func_get, _helpers.dabla_struct_func_set)

    def __init__(self):
        this = _helpers.new_dabla_struct()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_dabla_struct
    __del__ = lambda self: None
dabla_struct_swigregister = _helpers.dabla_struct_swigregister
dabla_struct_swigregister(dabla_struct)

class dabla_struct1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dabla_struct1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dabla_struct1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _helpers.dabla_struct1_type_set
    __swig_getmethods__["type"] = _helpers.dabla_struct1_type_get
    if _newclass:
        type = _swig_property(_helpers.dabla_struct1_type_get, _helpers.dabla_struct1_type_set)
    __swig_setmethods__["data"] = _helpers.dabla_struct1_data_set
    __swig_getmethods__["data"] = _helpers.dabla_struct1_data_get
    if _newclass:
        data = _swig_property(_helpers.dabla_struct1_data_get, _helpers.dabla_struct1_data_set)
    __swig_setmethods__["a"] = _helpers.dabla_struct1_a_set
    __swig_getmethods__["a"] = _helpers.dabla_struct1_a_get
    if _newclass:
        a = _swig_property(_helpers.dabla_struct1_a_get, _helpers.dabla_struct1_a_set)
    __swig_setmethods__["b"] = _helpers.dabla_struct1_b_set
    __swig_getmethods__["b"] = _helpers.dabla_struct1_b_get
    if _newclass:
        b = _swig_property(_helpers.dabla_struct1_b_get, _helpers.dabla_struct1_b_set)
    __swig_setmethods__["func1"] = _helpers.dabla_struct1_func1_set
    __swig_getmethods__["func1"] = _helpers.dabla_struct1_func1_get
    if _newclass:
        func1 = _swig_property(_helpers.dabla_struct1_func1_get, _helpers.dabla_struct1_func1_set)

    def __init__(self):
        this = _helpers.new_dabla_struct1()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_dabla_struct1
    __del__ = lambda self: None
dabla_struct1_swigregister = _helpers.dabla_struct1_swigregister
dabla_struct1_swigregister(dabla_struct1)


def dabla4(d: 'dabla_struct') -> "void":
    return _helpers.dabla4(d)
dabla4 = _helpers.dabla4

def callback(a: 'double *', b: 'double *', pyfunc: 'PyObject *') -> "PyObject *":
    return _helpers.callback(a, b, pyfunc)
callback = _helpers.callback

def dabla5(d: 'dabla_struct1') -> "void":
    return _helpers.dabla5(d)
dabla5 = _helpers.dabla5
# This file is compatible with both classic and new-style classes.


